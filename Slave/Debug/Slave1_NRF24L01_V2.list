
Slave1_NRF24L01_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c978  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a30  0800cb48  0800cb48  0001cb48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d578  0800d578  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d578  0800d578  0001d578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d580  0800d580  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d580  0800d580  0001d580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d584  0800d584  0001d584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800d588  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000200  0800d784  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  0800d784  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001943f  00000000  00000000  0002026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e81  00000000  00000000  000396ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001860  00000000  00000000  0003d530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012f4  00000000  00000000  0003ed90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027886  00000000  00000000  00040084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e9cb  00000000  00000000  0006790a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eaebc  00000000  00000000  000862d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007bc0  00000000  00000000  00171194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00178d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cb30 	.word	0x0800cb30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0800cb30 	.word	0x0800cb30

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cfc:	f000 b9a6 	b.w	800104c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9e08      	ldr	r6, [sp, #32]
 8000d8a:	460d      	mov	r5, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	460f      	mov	r7, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4694      	mov	ip, r2
 8000d98:	d965      	bls.n	8000e66 <__udivmoddi4+0xe2>
 8000d9a:	fab2 f382 	clz	r3, r2
 8000d9e:	b143      	cbz	r3, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da4:	f1c3 0220 	rsb	r2, r3, #32
 8000da8:	409f      	lsls	r7, r3
 8000daa:	fa20 f202 	lsr.w	r2, r0, r2
 8000dae:	4317      	orrs	r7, r2
 8000db0:	409c      	lsls	r4, r3
 8000db2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000db6:	fa1f f58c 	uxth.w	r5, ip
 8000dba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dbe:	0c22      	lsrs	r2, r4, #16
 8000dc0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dc4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dc8:	fb01 f005 	mul.w	r0, r1, r5
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000dd8:	f080 811c 	bcs.w	8001014 <__udivmoddi4+0x290>
 8000ddc:	4290      	cmp	r0, r2
 8000dde:	f240 8119 	bls.w	8001014 <__udivmoddi4+0x290>
 8000de2:	3902      	subs	r1, #2
 8000de4:	4462      	add	r2, ip
 8000de6:	1a12      	subs	r2, r2, r0
 8000de8:	b2a4      	uxth	r4, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000df6:	fb00 f505 	mul.w	r5, r0, r5
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	d90a      	bls.n	8000e14 <__udivmoddi4+0x90>
 8000dfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000e02:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e06:	f080 8107 	bcs.w	8001018 <__udivmoddi4+0x294>
 8000e0a:	42a5      	cmp	r5, r4
 8000e0c:	f240 8104 	bls.w	8001018 <__udivmoddi4+0x294>
 8000e10:	4464      	add	r4, ip
 8000e12:	3802      	subs	r0, #2
 8000e14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e18:	1b64      	subs	r4, r4, r5
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11e      	cbz	r6, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40dc      	lsrs	r4, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	e9c6 4300 	strd	r4, r3, [r6]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0xbc>
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	f000 80ed 	beq.w	800100e <__udivmoddi4+0x28a>
 8000e34:	2100      	movs	r1, #0
 8000e36:	e9c6 0500 	strd	r0, r5, [r6]
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e40:	fab3 f183 	clz	r1, r3
 8000e44:	2900      	cmp	r1, #0
 8000e46:	d149      	bne.n	8000edc <__udivmoddi4+0x158>
 8000e48:	42ab      	cmp	r3, r5
 8000e4a:	d302      	bcc.n	8000e52 <__udivmoddi4+0xce>
 8000e4c:	4282      	cmp	r2, r0
 8000e4e:	f200 80f8 	bhi.w	8001042 <__udivmoddi4+0x2be>
 8000e52:	1a84      	subs	r4, r0, r2
 8000e54:	eb65 0203 	sbc.w	r2, r5, r3
 8000e58:	2001      	movs	r0, #1
 8000e5a:	4617      	mov	r7, r2
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d0e2      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	e9c6 4700 	strd	r4, r7, [r6]
 8000e64:	e7df      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e66:	b902      	cbnz	r2, 8000e6a <__udivmoddi4+0xe6>
 8000e68:	deff      	udf	#255	; 0xff
 8000e6a:	fab2 f382 	clz	r3, r2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f040 8090 	bne.w	8000f94 <__udivmoddi4+0x210>
 8000e74:	1a8a      	subs	r2, r1, r2
 8000e76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7a:	fa1f fe8c 	uxth.w	lr, ip
 8000e7e:	2101      	movs	r1, #1
 8000e80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e84:	fb07 2015 	mls	r0, r7, r5, r2
 8000e88:	0c22      	lsrs	r2, r4, #16
 8000e8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e8e:	fb0e f005 	mul.w	r0, lr, r5
 8000e92:	4290      	cmp	r0, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x124>
 8000e96:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x122>
 8000ea0:	4290      	cmp	r0, r2
 8000ea2:	f200 80cb 	bhi.w	800103c <__udivmoddi4+0x2b8>
 8000ea6:	4645      	mov	r5, r8
 8000ea8:	1a12      	subs	r2, r2, r0
 8000eaa:	b2a4      	uxth	r4, r4
 8000eac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000eb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000eb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000eb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x14e>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ec8:	d202      	bcs.n	8000ed0 <__udivmoddi4+0x14c>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f200 80bb 	bhi.w	8001046 <__udivmoddi4+0x2c2>
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	eba4 040e 	sub.w	r4, r4, lr
 8000ed6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eda:	e79f      	b.n	8000e1c <__udivmoddi4+0x98>
 8000edc:	f1c1 0720 	rsb	r7, r1, #32
 8000ee0:	408b      	lsls	r3, r1
 8000ee2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ee6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eea:	fa05 f401 	lsl.w	r4, r5, r1
 8000eee:	fa20 f307 	lsr.w	r3, r0, r7
 8000ef2:	40fd      	lsrs	r5, r7
 8000ef4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef8:	4323      	orrs	r3, r4
 8000efa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000efe:	fa1f fe8c 	uxth.w	lr, ip
 8000f02:	fb09 5518 	mls	r5, r9, r8, r5
 8000f06:	0c1c      	lsrs	r4, r3, #16
 8000f08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f10:	42a5      	cmp	r5, r4
 8000f12:	fa02 f201 	lsl.w	r2, r2, r1
 8000f16:	fa00 f001 	lsl.w	r0, r0, r1
 8000f1a:	d90b      	bls.n	8000f34 <__udivmoddi4+0x1b0>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f24:	f080 8088 	bcs.w	8001038 <__udivmoddi4+0x2b4>
 8000f28:	42a5      	cmp	r5, r4
 8000f2a:	f240 8085 	bls.w	8001038 <__udivmoddi4+0x2b4>
 8000f2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f32:	4464      	add	r4, ip
 8000f34:	1b64      	subs	r4, r4, r5
 8000f36:	b29d      	uxth	r5, r3
 8000f38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f48:	45a6      	cmp	lr, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x1da>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f54:	d26c      	bcs.n	8001030 <__udivmoddi4+0x2ac>
 8000f56:	45a6      	cmp	lr, r4
 8000f58:	d96a      	bls.n	8001030 <__udivmoddi4+0x2ac>
 8000f5a:	3b02      	subs	r3, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f62:	fba3 9502 	umull	r9, r5, r3, r2
 8000f66:	eba4 040e 	sub.w	r4, r4, lr
 8000f6a:	42ac      	cmp	r4, r5
 8000f6c:	46c8      	mov	r8, r9
 8000f6e:	46ae      	mov	lr, r5
 8000f70:	d356      	bcc.n	8001020 <__udivmoddi4+0x29c>
 8000f72:	d053      	beq.n	800101c <__udivmoddi4+0x298>
 8000f74:	b156      	cbz	r6, 8000f8c <__udivmoddi4+0x208>
 8000f76:	ebb0 0208 	subs.w	r2, r0, r8
 8000f7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f82:	40ca      	lsrs	r2, r1
 8000f84:	40cc      	lsrs	r4, r1
 8000f86:	4317      	orrs	r7, r2
 8000f88:	e9c6 7400 	strd	r7, r4, [r6]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f94:	f1c3 0120 	rsb	r1, r3, #32
 8000f98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000fa0:	fa25 f101 	lsr.w	r1, r5, r1
 8000fa4:	409d      	lsls	r5, r3
 8000fa6:	432a      	orrs	r2, r5
 8000fa8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fac:	fa1f fe8c 	uxth.w	lr, ip
 8000fb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000fc2:	428d      	cmp	r5, r1
 8000fc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fc8:	d908      	bls.n	8000fdc <__udivmoddi4+0x258>
 8000fca:	eb1c 0101 	adds.w	r1, ip, r1
 8000fce:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fd2:	d22f      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8000fd4:	428d      	cmp	r5, r1
 8000fd6:	d92d      	bls.n	8001034 <__udivmoddi4+0x2b0>
 8000fd8:	3802      	subs	r0, #2
 8000fda:	4461      	add	r1, ip
 8000fdc:	1b49      	subs	r1, r1, r5
 8000fde:	b292      	uxth	r2, r2
 8000fe0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fe4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fe8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fec:	fb05 f10e 	mul.w	r1, r5, lr
 8000ff0:	4291      	cmp	r1, r2
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x282>
 8000ff4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ff8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ffc:	d216      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000ffe:	4291      	cmp	r1, r2
 8001000:	d914      	bls.n	800102c <__udivmoddi4+0x2a8>
 8001002:	3d02      	subs	r5, #2
 8001004:	4462      	add	r2, ip
 8001006:	1a52      	subs	r2, r2, r1
 8001008:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800100c:	e738      	b.n	8000e80 <__udivmoddi4+0xfc>
 800100e:	4631      	mov	r1, r6
 8001010:	4630      	mov	r0, r6
 8001012:	e708      	b.n	8000e26 <__udivmoddi4+0xa2>
 8001014:	4639      	mov	r1, r7
 8001016:	e6e6      	b.n	8000de6 <__udivmoddi4+0x62>
 8001018:	4610      	mov	r0, r2
 800101a:	e6fb      	b.n	8000e14 <__udivmoddi4+0x90>
 800101c:	4548      	cmp	r0, r9
 800101e:	d2a9      	bcs.n	8000f74 <__udivmoddi4+0x1f0>
 8001020:	ebb9 0802 	subs.w	r8, r9, r2
 8001024:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001028:	3b01      	subs	r3, #1
 800102a:	e7a3      	b.n	8000f74 <__udivmoddi4+0x1f0>
 800102c:	4645      	mov	r5, r8
 800102e:	e7ea      	b.n	8001006 <__udivmoddi4+0x282>
 8001030:	462b      	mov	r3, r5
 8001032:	e794      	b.n	8000f5e <__udivmoddi4+0x1da>
 8001034:	4640      	mov	r0, r8
 8001036:	e7d1      	b.n	8000fdc <__udivmoddi4+0x258>
 8001038:	46d0      	mov	r8, sl
 800103a:	e77b      	b.n	8000f34 <__udivmoddi4+0x1b0>
 800103c:	3d02      	subs	r5, #2
 800103e:	4462      	add	r2, ip
 8001040:	e732      	b.n	8000ea8 <__udivmoddi4+0x124>
 8001042:	4608      	mov	r0, r1
 8001044:	e70a      	b.n	8000e5c <__udivmoddi4+0xd8>
 8001046:	4464      	add	r4, ip
 8001048:	3802      	subs	r0, #2
 800104a:	e742      	b.n	8000ed2 <__udivmoddi4+0x14e>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001056:	463b      	mov	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_ADC1_Init+0x98>)
 8001064:	4a21      	ldr	r2, [pc, #132]	; (80010ec <MX_ADC1_Init+0x9c>)
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <MX_ADC1_Init+0x98>)
 800106a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <MX_ADC1_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <MX_ADC1_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_ADC1_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <MX_ADC1_Init+0x98>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <MX_ADC1_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_ADC1_Init+0x98>)
 8001092:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <MX_ADC1_Init+0xa0>)
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_ADC1_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_ADC1_Init+0x98>)
 800109e:	2201      	movs	r2, #1
 80010a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_ADC1_Init+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_ADC1_Init+0x98>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b0:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_ADC1_Init+0x98>)
 80010b2:	f001 f93f 	bl	8002334 <HAL_ADC_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010bc:	f000 fbc8 	bl	8001850 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_ADC1_Init+0x98>)
 80010d2:	f001 fadd 	bl	8002690 <HAL_ADC_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010dc:	f000 fbb8 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000021c 	.word	0x2000021c
 80010ec:	40012000 	.word	0x40012000
 80010f0:	0f000001 	.word	0x0f000001

080010f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a17      	ldr	r2, [pc, #92]	; (8001170 <HAL_ADC_MspInit+0x7c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d127      	bne.n	8001166 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_ADC_MspInit+0x80>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a15      	ldr	r2, [pc, #84]	; (8001174 <HAL_ADC_MspInit+0x80>)
 8001120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <HAL_ADC_MspInit+0x80>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_ADC_MspInit+0x80>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_ADC_MspInit+0x80>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_ADC_MspInit+0x80>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800114e:	2301      	movs	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001152:	2303      	movs	r3, #3
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	4805      	ldr	r0, [pc, #20]	; (8001178 <HAL_ADC_MspInit+0x84>)
 8001162:	f001 fdd5 	bl	8002d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001166:	bf00      	nop
 8001168:	3728      	adds	r7, #40	; 0x28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40012000 	.word	0x40012000
 8001174:	40023800 	.word	0x40023800
 8001178:	40020000 	.word	0x40020000

0800117c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b42      	ldr	r3, [pc, #264]	; (80012a0 <MX_GPIO_Init+0x124>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a41      	ldr	r2, [pc, #260]	; (80012a0 <MX_GPIO_Init+0x124>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <MX_GPIO_Init+0x124>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <MX_GPIO_Init+0x124>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a3a      	ldr	r2, [pc, #232]	; (80012a0 <MX_GPIO_Init+0x124>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <MX_GPIO_Init+0x124>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	4b34      	ldr	r3, [pc, #208]	; (80012a0 <MX_GPIO_Init+0x124>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a33      	ldr	r2, [pc, #204]	; (80012a0 <MX_GPIO_Init+0x124>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b31      	ldr	r3, [pc, #196]	; (80012a0 <MX_GPIO_Init+0x124>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <MX_GPIO_Init+0x124>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a2c      	ldr	r2, [pc, #176]	; (80012a0 <MX_GPIO_Init+0x124>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b2a      	ldr	r3, [pc, #168]	; (80012a0 <MX_GPIO_Init+0x124>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT22_PIN_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2122      	movs	r1, #34	; 0x22
 8001206:	4827      	ldr	r0, [pc, #156]	; (80012a4 <MX_GPIO_Init+0x128>)
 8001208:	f001 ff2e 	bl	8003068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	2130      	movs	r1, #48	; 0x30
 8001210:	4825      	ldr	r0, [pc, #148]	; (80012a8 <MX_GPIO_Init+0x12c>)
 8001212:	f001 ff29 	bl	8003068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001216:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800121c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	481f      	ldr	r0, [pc, #124]	; (80012ac <MX_GPIO_Init+0x130>)
 800122e:	f001 fd6f 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DHT22_PIN_Pin|LD2_Pin;
 8001232:	2322      	movs	r3, #34	; 0x22
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4816      	ldr	r0, [pc, #88]	; (80012a4 <MX_GPIO_Init+0x128>)
 800124a:	f001 fd61 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 800124e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001254:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4810      	ldr	r0, [pc, #64]	; (80012a8 <MX_GPIO_Init+0x12c>)
 8001266:	f001 fd53 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 800126a:	2330      	movs	r3, #48	; 0x30
 800126c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	2301      	movs	r3, #1
 8001270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <MX_GPIO_Init+0x12c>)
 8001282:	f001 fd45 	bl	8002d10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2028      	movs	r0, #40	; 0x28
 800128c:	f001 fd09 	bl	8002ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001290:	2028      	movs	r0, #40	; 0x28
 8001292:	f001 fd22 	bl	8002cda <HAL_NVIC_EnableIRQ>

}
 8001296:	bf00      	nop
 8001298:	3728      	adds	r7, #40	; 0x28
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020800 	.word	0x40020800

080012b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <MX_I2C1_Init+0x50>)
 80012b6:	4a13      	ldr	r2, [pc, #76]	; (8001304 <MX_I2C1_Init+0x54>)
 80012b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_I2C1_Init+0x50>)
 80012bc:	4a12      	ldr	r2, [pc, #72]	; (8001308 <MX_I2C1_Init+0x58>)
 80012be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_I2C1_Init+0x50>)
 80012ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <MX_I2C1_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_I2C1_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <MX_I2C1_Init+0x50>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_I2C1_Init+0x50>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_I2C1_Init+0x50>)
 80012ee:	f001 fef9 	bl	80030e4 <HAL_I2C_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012f8:	f000 faaa 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000264 	.word	0x20000264
 8001304:	40005400 	.word	0x40005400
 8001308:	00061a80 	.word	0x00061a80

0800130c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a19      	ldr	r2, [pc, #100]	; (8001390 <HAL_I2C_MspInit+0x84>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d12c      	bne.n	8001388 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_I2C_MspInit+0x88>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a17      	ldr	r2, [pc, #92]	; (8001394 <HAL_I2C_MspInit+0x88>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_I2C_MspInit+0x88>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = RGB_SCL_Pin|RGB_SDA_Pin;
 800134a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001350:	2312      	movs	r3, #18
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800135c:	2304      	movs	r3, #4
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	480c      	ldr	r0, [pc, #48]	; (8001398 <HAL_I2C_MspInit+0x8c>)
 8001368:	f001 fcd2 	bl	8002d10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_I2C_MspInit+0x88>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_I2C_MspInit+0x88>)
 8001376:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137a:	6413      	str	r3, [r2, #64]	; 0x40
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_I2C_MspInit+0x88>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40005400 	.word	0x40005400
 8001394:	40023800 	.word	0x40023800
 8001398:	40020400 	.word	0x40020400

0800139c <nrf24_config_mode>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to configure NRF24 module for transmit mode without acknowledgment
void nrf24_config_mode(bool transmit_mode) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	// Print information about entering transmit mode without acknowledgment
	//printf("________________________Tx Mode________________________ \n\r");

	if (transmit_mode) {
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d009      	beq.n	80013c0 <nrf24_config_mode+0x24>
		// Stop listening for incoming data
		NRF24_stopListening();
 80013ac:	f005 ffd0 	bl	8007350 <NRF24_stopListening>

		// Set writing pipe address to TxpipeAddrs
		NRF24_openWritingPipe(Addr);
 80013b0:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <nrf24_config_mode+0x58>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f006 f849 	bl	8007450 <NRF24_openWritingPipe>
 80013be:	e007      	b.n	80013d0 <nrf24_config_mode+0x34>
	} else{
		// Start listening for incoming data
		NRF24_startListening();
 80013c0:	f005 ffa0 	bl	8007304 <NRF24_startListening>
		// Open reading pipe with address RxpipeAddrs
		NRF24_openReadingPipe(1, Addr);
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <nrf24_config_mode+0x58>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	2001      	movs	r0, #1
 80013cc:	f006 f864 	bl	8007498 <NRF24_openReadingPipe>

	}

	// Enable auto acknowledgment
	NRF24_setAutoAck(true);
 80013d0:	2001      	movs	r0, #1
 80013d2:	f006 f983 	bl	80076dc <NRF24_setAutoAck>

	// Set channel to 52
	NRF24_setChannel(52);
 80013d6:	2034      	movs	r0, #52	; 0x34
 80013d8:	f006 f8c7 	bl	800756a <NRF24_setChannel>

	// Set payload size to 32 bytes
	NRF24_setPayloadSize(32);
 80013dc:	2020      	movs	r0, #32
 80013de:	f006 f8d9 	bl	8007594 <NRF24_setPayloadSize>

	// Enable dynamic payloads
	NRF24_enableDynamicPayloads();
 80013e2:	f006 f931 	bl	8007648 <NRF24_enableDynamicPayloads>

	// Enable acknowledgment payloads
	NRF24_enableAckPayload();
 80013e6:	f006 f901 	bl	80075ec <NRF24_enableAckPayload>

}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000000 	.word	0x20000000

080013f8 <Payload_charge_simulate>:

bool Payload_charge_simulate(uint8_t *payload, uint8_t len) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	70fb      	strb	r3, [r7, #3]

	uint8_t test_bit = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]
	// Check for valid payload pointer and length
	if (payload == NULL || len < 11) {
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <Payload_charge_simulate+0x1c>
 800140e:	78fb      	ldrb	r3, [r7, #3]
 8001410:	2b0a      	cmp	r3, #10
 8001412:	d801      	bhi.n	8001418 <Payload_charge_simulate+0x20>
		return false; // Indicate error (invalid payload or insufficient size)
 8001414:	2300      	movs	r3, #0
 8001416:	e052      	b.n	80014be <Payload_charge_simulate+0xc6>
	}

	// Directly access payload elements without unnecessary array indexing
	if (dht22_readings()) {
 8001418:	f000 fea2 	bl	8002160 <dht22_readings>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d016      	beq.n	8001450 <Payload_charge_simulate+0x58>
		// Copy sensor data directly
		payload[1] = RH1;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3301      	adds	r3, #1
 8001426:	4a28      	ldr	r2, [pc, #160]	; (80014c8 <Payload_charge_simulate+0xd0>)
 8001428:	7812      	ldrb	r2, [r2, #0]
 800142a:	701a      	strb	r2, [r3, #0]
		payload[2] = RH2;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3302      	adds	r3, #2
 8001430:	4a26      	ldr	r2, [pc, #152]	; (80014cc <Payload_charge_simulate+0xd4>)
 8001432:	7812      	ldrb	r2, [r2, #0]
 8001434:	701a      	strb	r2, [r3, #0]
		payload[3] = TC1;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3303      	adds	r3, #3
 800143a:	4a25      	ldr	r2, [pc, #148]	; (80014d0 <Payload_charge_simulate+0xd8>)
 800143c:	7812      	ldrb	r2, [r2, #0]
 800143e:	701a      	strb	r2, [r3, #0]
		payload[4] = TC2;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3304      	adds	r3, #4
 8001444:	4a23      	ldr	r2, [pc, #140]	; (80014d4 <Payload_charge_simulate+0xdc>)
 8001446:	7812      	ldrb	r2, [r2, #0]
 8001448:	701a      	strb	r2, [r3, #0]
		test_bit = test_bit + 1;
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	3301      	adds	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
	}
	if (HAL_ADC_Start(&hadc1) == HAL_OK) {
 8001450:	4821      	ldr	r0, [pc, #132]	; (80014d8 <Payload_charge_simulate+0xe0>)
 8001452:	f000 ffb3 	bl	80023bc <HAL_ADC_Start>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d112      	bne.n	8001482 <Payload_charge_simulate+0x8a>
		HAL_ADC_PollForConversion(&hadc1, 100);
 800145c:	2164      	movs	r1, #100	; 0x64
 800145e:	481e      	ldr	r0, [pc, #120]	; (80014d8 <Payload_charge_simulate+0xe0>)
 8001460:	f001 f87e 	bl	8002560 <HAL_ADC_PollForConversion>
		Value = HAL_ADC_GetValue(&hadc1);
 8001464:	481c      	ldr	r0, [pc, #112]	; (80014d8 <Payload_charge_simulate+0xe0>)
 8001466:	f001 f906 	bl	8002676 <HAL_ADC_GetValue>
 800146a:	4603      	mov	r3, r0
 800146c:	4a1b      	ldr	r2, [pc, #108]	; (80014dc <Payload_charge_simulate+0xe4>)
 800146e:	6013      	str	r3, [r2, #0]
		payload[5] = Value;
 8001470:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <Payload_charge_simulate+0xe4>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3305      	adds	r3, #5
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	701a      	strb	r2, [r3, #0]
		test_bit = test_bit + 2;
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	3302      	adds	r3, #2
 8001480:	73fb      	strb	r3, [r7, #15]
	}
	if (getRGB(&R, &G, &B) != 0) {
 8001482:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <Payload_charge_simulate+0xe8>)
 8001484:	4917      	ldr	r1, [pc, #92]	; (80014e4 <Payload_charge_simulate+0xec>)
 8001486:	4818      	ldr	r0, [pc, #96]	; (80014e8 <Payload_charge_simulate+0xf0>)
 8001488:	f006 fece 	bl	8008228 <getRGB>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d011      	beq.n	80014b6 <Payload_charge_simulate+0xbe>

		payload[6] = R;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3306      	adds	r3, #6
 8001496:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <Payload_charge_simulate+0xf0>)
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	701a      	strb	r2, [r3, #0]
		payload[7] = G;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3307      	adds	r3, #7
 80014a0:	4a10      	ldr	r2, [pc, #64]	; (80014e4 <Payload_charge_simulate+0xec>)
 80014a2:	7812      	ldrb	r2, [r2, #0]
 80014a4:	701a      	strb	r2, [r3, #0]
		payload[8] = B;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3308      	adds	r3, #8
 80014aa:	4a0d      	ldr	r2, [pc, #52]	; (80014e0 <Payload_charge_simulate+0xe8>)
 80014ac:	7812      	ldrb	r2, [r2, #0]
 80014ae:	701a      	strb	r2, [r3, #0]
		test_bit = test_bit + 3;
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	3303      	adds	r3, #3
 80014b4:	73fb      	strb	r3, [r7, #15]
	}
	payload[0] = test_bit;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	701a      	strb	r2, [r3, #0]

	return true; // Indicate successful payload population
 80014bc:	2301      	movs	r3, #1
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200002b8 	.word	0x200002b8
 80014cc:	200002b9 	.word	0x200002b9
 80014d0:	200002ba 	.word	0x200002ba
 80014d4:	200002bb 	.word	0x200002bb
 80014d8:	2000021c 	.word	0x2000021c
 80014dc:	200002c0 	.word	0x200002c0
 80014e0:	200002c6 	.word	0x200002c6
 80014e4:	200002c5 	.word	0x200002c5
 80014e8:	200002c4 	.word	0x200002c4

080014ec <Send_Data>:

bool Send_Data(void) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
	nrf24_config_mode(TX_MODE);
 80014f2:	2001      	movs	r0, #1
 80014f4:	f7ff ff52 	bl	800139c <nrf24_config_mode>
	// Variable to track the status of data transmission
	bool send_stat = false;
 80014f8:	2300      	movs	r3, #0
 80014fa:	71fb      	strb	r3, [r7, #7]

	// Loop indefinitely until acknowledgment is sent or a timeout occurs
	int coun = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	603b      	str	r3, [r7, #0]
	while (coun < 5) {
 8001500:	e01f      	b.n	8001542 <Send_Data+0x56>

		printf("Waiting for acknowledgement... (Attempt %d)\n", coun);
 8001502:	6839      	ldr	r1, [r7, #0]
 8001504:	4813      	ldr	r0, [pc, #76]	; (8001554 <Send_Data+0x68>)
 8001506:	f007 fe07 	bl	8009118 <iprintf>
		HAL_Delay(10);
 800150a:	200a      	movs	r0, #10
 800150c:	f000 feee 	bl	80022ec <HAL_Delay>

		// Attempt to write data to NRF24 module
		if (NRF24_write(payload, 32)) {
 8001510:	2120      	movs	r1, #32
 8001512:	4811      	ldr	r0, [pc, #68]	; (8001558 <Send_Data+0x6c>)
 8001514:	f005 ff28 	bl	8007368 <NRF24_write>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00e      	beq.n	800153c <Send_Data+0x50>
			// If data is successfully written, read acknowledgment payload
			NRF24_read(AckPayload, 32);
 800151e:	2120      	movs	r1, #32
 8001520:	480e      	ldr	r0, [pc, #56]	; (800155c <Send_Data+0x70>)
 8001522:	f005 ff75 	bl	8007410 <NRF24_read>
			if (strlen(AckPayload) != 0) {
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <Send_Data+0x70>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d006      	beq.n	800153c <Send_Data+0x50>
				printf("Master acknowledgement : %s \r\n", AckPayload);
 800152e:	490b      	ldr	r1, [pc, #44]	; (800155c <Send_Data+0x70>)
 8001530:	480b      	ldr	r0, [pc, #44]	; (8001560 <Send_Data+0x74>)
 8001532:	f007 fdf1 	bl	8009118 <iprintf>
				send_stat = true;
 8001536:	2301      	movs	r3, #1
 8001538:	71fb      	strb	r3, [r7, #7]
				break;
 800153a:	e005      	b.n	8001548 <Send_Data+0x5c>
			}

		}

		// If acknowledgment transmission fails, wait for a short period before retrying
		coun++;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	603b      	str	r3, [r7, #0]
	while (coun < 5) {
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b04      	cmp	r3, #4
 8001546:	dddc      	ble.n	8001502 <Send_Data+0x16>
	}

	// Return the status of data transmission
	return send_stat;
 8001548:	79fb      	ldrb	r3, [r7, #7]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	0800cb48 	.word	0x0800cb48
 8001558:	200002c8 	.word	0x200002c8
 800155c:	200002e8 	.word	0x200002e8
 8001560:	0800cb78 	.word	0x0800cb78

08001564 <AnalyseThePayload>:

uint8_t AnalyseThePayload(uint8_t *rxPayload) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	// Check the first byte of the payload for an error flag (assuming 0 indicates error)
	if (strcmp(rxPayload, LED_ON) == 0)
 800156c:	4921      	ldr	r1, [pc, #132]	; (80015f4 <AnalyseThePayload+0x90>)
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7fe fe4e 	bl	8000210 <strcmp>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d105      	bne.n	8001586 <AnalyseThePayload+0x22>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800157a:	2201      	movs	r2, #1
 800157c:	2120      	movs	r1, #32
 800157e:	481e      	ldr	r0, [pc, #120]	; (80015f8 <AnalyseThePayload+0x94>)
 8001580:	f001 fd72 	bl	8003068 <HAL_GPIO_WritePin>
 8001584:	e030      	b.n	80015e8 <AnalyseThePayload+0x84>
	}else if (strcmp(rxPayload, LED_OFF) == 0)
 8001586:	491d      	ldr	r1, [pc, #116]	; (80015fc <AnalyseThePayload+0x98>)
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7fe fe41 	bl	8000210 <strcmp>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d105      	bne.n	80015a0 <AnalyseThePayload+0x3c>
    {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	2120      	movs	r1, #32
 8001598:	4817      	ldr	r0, [pc, #92]	; (80015f8 <AnalyseThePayload+0x94>)
 800159a:	f001 fd65 	bl	8003068 <HAL_GPIO_WritePin>
 800159e:	e023      	b.n	80015e8 <AnalyseThePayload+0x84>
    }else if (strcmp(rxPayload, POWER_1) == 0)
 80015a0:	4917      	ldr	r1, [pc, #92]	; (8001600 <AnalyseThePayload+0x9c>)
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7fe fe34 	bl	8000210 <strcmp>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d103      	bne.n	80015b6 <AnalyseThePayload+0x52>
    {
    	NRF24_setPALevel(RF24_PA_m18dB);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f006 f8a9 	bl	8007706 <NRF24_setPALevel>
 80015b4:	e018      	b.n	80015e8 <AnalyseThePayload+0x84>
    }else if (strcmp(rxPayload, POWER_2) == 0)
 80015b6:	4913      	ldr	r1, [pc, #76]	; (8001604 <AnalyseThePayload+0xa0>)
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7fe fe29 	bl	8000210 <strcmp>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d103      	bne.n	80015cc <AnalyseThePayload+0x68>
    {
    	NRF24_setPALevel(RF24_PA_m6dB);
 80015c4:	2002      	movs	r0, #2
 80015c6:	f006 f89e 	bl	8007706 <NRF24_setPALevel>
 80015ca:	e00d      	b.n	80015e8 <AnalyseThePayload+0x84>
    }else if (strcmp(rxPayload, POWER_3) == 0)
 80015cc:	490e      	ldr	r1, [pc, #56]	; (8001608 <AnalyseThePayload+0xa4>)
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7fe fe1e 	bl	8000210 <strcmp>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d103      	bne.n	80015e2 <AnalyseThePayload+0x7e>
    {
    	NRF24_setPALevel(RF24_PA_0dB);
 80015da:	2003      	movs	r0, #3
 80015dc:	f006 f893 	bl	8007706 <NRF24_setPALevel>
 80015e0:	e002      	b.n	80015e8 <AnalyseThePayload+0x84>
    }else
    {
    	printf("No Command from the master \n");
 80015e2:	480a      	ldr	r0, [pc, #40]	; (800160c <AnalyseThePayload+0xa8>)
 80015e4:	f007 fdfe 	bl	80091e4 <puts>
	}
    return 1;
 80015e8:	2301      	movs	r3, #1
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	0800cb98 	.word	0x0800cb98
 80015f8:	40020000 	.word	0x40020000
 80015fc:	0800cba0 	.word	0x0800cba0
 8001600:	0800cba8 	.word	0x0800cba8
 8001604:	0800cbac 	.word	0x0800cbac
 8001608:	0800cbb0 	.word	0x0800cbb0
 800160c:	0800cbb4 	.word	0x0800cbb4

08001610 <Receive_Data>:
 * Function: Receive_Data
 * Description: Receives data from Node 1 using NRF24 module.
 * Parameters: None
 * Returns: bool - Indicates whether data was received successfully or not
 */
bool Receive_Data(void) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0

	nrf24_config_mode(RX_MODE);
 8001616:	2000      	movs	r0, #0
 8001618:	f7ff fec0 	bl	800139c <nrf24_config_mode>

	// Variable to track the status of data reception
	bool receive_stat = false;
 800161c:	2300      	movs	r3, #0
 800161e:	71fb      	strb	r3, [r7, #7]

	while (1) {
		//printf("Waiting for Master request ... \n");
		// Check if there is data available to read
		if (NRF24_available()) {
 8001620:	f005 feee 	bl	8007400 <NRF24_available>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0fa      	beq.n	8001620 <Receive_Data+0x10>
			// Read data from NRF24 module
			NRF24_read(myRxData, 32);
 800162a:	2120      	movs	r1, #32
 800162c:	480a      	ldr	r0, [pc, #40]	; (8001658 <Receive_Data+0x48>)
 800162e:	f005 feef 	bl	8007410 <NRF24_read>

			// Send acknowledgment payload to Node 1
			NRF24_writeAckPayload(1, myAckPayload, 32);
 8001632:	2220      	movs	r2, #32
 8001634:	4909      	ldr	r1, [pc, #36]	; (800165c <Receive_Data+0x4c>)
 8001636:	2001      	movs	r0, #1
 8001638:	f006 f97a 	bl	8007930 <NRF24_writeAckPayload>

			// Print the received data
			count++;
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <Receive_Data+0x50>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	4a07      	ldr	r2, [pc, #28]	; (8001660 <Receive_Data+0x50>)
 8001644:	6013      	str	r3, [r2, #0]

			// Set receive_stat to true to indicate successful data reception
			receive_stat = true;
 8001646:	2301      	movs	r3, #1
 8001648:	71fb      	strb	r3, [r7, #7]
			break;
 800164a:	bf00      	nop
		}

	}

	// Return the status of data reception
	return receive_stat;
 800164c:	79fb      	ldrb	r3, [r7, #7]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000308 	.word	0x20000308
 800165c:	20000008 	.word	0x20000008
 8001660:	20000328 	.word	0x20000328

08001664 <setup>:

void setup(void) {
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	// Initialize NRF24 module
	NRF24_Init();
 8001668:	f005 fe29 	bl	80072be <NRF24_Init>

	nrf24_config_mode(RX_MODE);
 800166c:	2000      	movs	r0, #0
 800166e:	f7ff fe95 	bl	800139c <nrf24_config_mode>

	// Print information about entering receive mode with acknowledgment
	printf(
 8001672:	4803      	ldr	r0, [pc, #12]	; (8001680 <setup+0x1c>)
 8001674:	f007 fd50 	bl	8009118 <iprintf>
			"________________________Engaging communication channels...________________________ \n\r");

	// Print current radio settings
	printRadioSettings();
 8001678:	f006 f9da 	bl	8007a30 <printRadioSettings>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	0800cbd0 	.word	0x0800cbd0

08001684 <loop>:

void loop(void) {
 8001684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001686:	b087      	sub	sp, #28
 8001688:	af06      	add	r7, sp, #24

	Payload_charge_simulate(payload, 32);
 800168a:	2120      	movs	r1, #32
 800168c:	481c      	ldr	r0, [pc, #112]	; (8001700 <loop+0x7c>)
 800168e:	f7ff feb3 	bl	80013f8 <Payload_charge_simulate>
	// Check if data is received successfully
	if (Receive_Data()) {
 8001692:	f7ff ffbd 	bl	8001610 <Receive_Data>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d027      	beq.n	80016ec <loop+0x68>
		printf("Payload : %d | %d | %d | %d | %d | %d | %d | %d | %d | \n\r", payload[0], payload[1], payload[2], payload[3], payload[4], payload[5], payload[6], payload[7], payload[8]);
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <loop+0x7c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461e      	mov	r6, r3
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <loop+0x7c>)
 80016a4:	785b      	ldrb	r3, [r3, #1]
 80016a6:	469c      	mov	ip, r3
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <loop+0x7c>)
 80016aa:	789b      	ldrb	r3, [r3, #2]
 80016ac:	469e      	mov	lr, r3
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <loop+0x7c>)
 80016b0:	78db      	ldrb	r3, [r3, #3]
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <loop+0x7c>)
 80016b6:	791b      	ldrb	r3, [r3, #4]
 80016b8:	4619      	mov	r1, r3
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <loop+0x7c>)
 80016bc:	795b      	ldrb	r3, [r3, #5]
 80016be:	4618      	mov	r0, r3
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <loop+0x7c>)
 80016c2:	799b      	ldrb	r3, [r3, #6]
 80016c4:	461c      	mov	r4, r3
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <loop+0x7c>)
 80016c8:	79db      	ldrb	r3, [r3, #7]
 80016ca:	461d      	mov	r5, r3
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <loop+0x7c>)
 80016ce:	7a1b      	ldrb	r3, [r3, #8]
 80016d0:	9305      	str	r3, [sp, #20]
 80016d2:	9504      	str	r5, [sp, #16]
 80016d4:	9403      	str	r4, [sp, #12]
 80016d6:	9002      	str	r0, [sp, #8]
 80016d8:	9101      	str	r1, [sp, #4]
 80016da:	9200      	str	r2, [sp, #0]
 80016dc:	4673      	mov	r3, lr
 80016de:	4662      	mov	r2, ip
 80016e0:	4631      	mov	r1, r6
 80016e2:	4808      	ldr	r0, [pc, #32]	; (8001704 <loop+0x80>)
 80016e4:	f007 fd18 	bl	8009118 <iprintf>
		// Check if acknowledgment is sent successfully
			Send_Data();
 80016e8:	f7ff ff00 	bl	80014ec <Send_Data>


		// Delay for 100 milliseconds before breaking out of the loop
	}
	AnalyseThePayload(myRxData);
 80016ec:	4806      	ldr	r0, [pc, #24]	; (8001708 <loop+0x84>)
 80016ee:	f7ff ff39 	bl	8001564 <AnalyseThePayload>
	HAL_Delay(200);
 80016f2:	20c8      	movs	r0, #200	; 0xc8
 80016f4:	f000 fdfa 	bl	80022ec <HAL_Delay>

}
 80016f8:	bf00      	nop
 80016fa:	3704      	adds	r7, #4
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001700:	200002c8 	.word	0x200002c8
 8001704:	0800cc28 	.word	0x0800cc28
 8001708:	20000308 	.word	0x20000308

0800170c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001710:	f000 fd7a 	bl	8002208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001714:	f000 f826 	bl	8001764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001718:	f7ff fd30 	bl	800117c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800171c:	f000 fb6e 	bl	8001dfc <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001720:	f000 f960 	bl	80019e4 <MX_SPI2_Init>
  MX_TIM6_Init();
 8001724:	f000 fb12 	bl	8001d4c <MX_TIM6_Init>
  MX_RTC_Init();
 8001728:	f000 f898 	bl	800185c <MX_RTC_Init>
  MX_ADC1_Init();
 800172c:	f7ff fc90 	bl	8001050 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001730:	f7ff fdbe 	bl	80012b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim6);
 8001734:	4809      	ldr	r0, [pc, #36]	; (800175c <main+0x50>)
 8001736:	f004 fecb 	bl	80064d0 <HAL_TIM_Base_Start>
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2) {
 800173a:	2101      	movs	r1, #1
 800173c:	4808      	ldr	r0, [pc, #32]	; (8001760 <main+0x54>)
 800173e:	f004 f889 	bl	8005854 <HAL_RTCEx_BKUPRead>
 8001742:	4603      	mov	r3, r0
 8001744:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001748:	4293      	cmp	r3, r2
 800174a:	d001      	beq.n	8001750 <main+0x44>
		set_time();
 800174c:	f000 f90a 	bl	8001964 <set_time>
	}
	/*
	 * Description: This block of code initializes the NRF24 module, enters receive mode,
	 *              and prints current radio settings.
	 */
	setup();
 8001750:	f7ff ff88 	bl	8001664 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		loop();
 8001754:	f7ff ff96 	bl	8001684 <loop>
 8001758:	e7fc      	b.n	8001754 <main+0x48>
 800175a:	bf00      	nop
 800175c:	200003a8 	.word	0x200003a8
 8001760:	2000032c 	.word	0x2000032c

08001764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b094      	sub	sp, #80	; 0x50
 8001768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	2234      	movs	r2, #52	; 0x34
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f007 fe36 	bl	80093e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001778:	f107 0308 	add.w	r3, r7, #8
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <SystemClock_Config+0xe4>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	4a2d      	ldr	r2, [pc, #180]	; (8001848 <SystemClock_Config+0xe4>)
 8001792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001796:	6413      	str	r3, [r2, #64]	; 0x40
 8001798:	4b2b      	ldr	r3, [pc, #172]	; (8001848 <SystemClock_Config+0xe4>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a4:	2300      	movs	r3, #0
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <SystemClock_Config+0xe8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a27      	ldr	r2, [pc, #156]	; (800184c <SystemClock_Config+0xe8>)
 80017ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b25      	ldr	r3, [pc, #148]	; (800184c <SystemClock_Config+0xe8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017bc:	603b      	str	r3, [r7, #0]
 80017be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80017c0:	230a      	movs	r3, #10
 80017c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017c4:	2301      	movs	r3, #1
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c8:	2301      	movs	r3, #1
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017cc:	2310      	movs	r3, #16
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017d0:	2301      	movs	r3, #1
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d4:	2302      	movs	r3, #2
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017d8:	2300      	movs	r3, #0
 80017da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017dc:	2308      	movs	r3, #8
 80017de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80017e0:	23b4      	movs	r3, #180	; 0xb4
 80017e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017e4:	2302      	movs	r3, #2
 80017e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017e8:	2302      	movs	r3, #2
 80017ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017ec:	2302      	movs	r3, #2
 80017ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 fb33 	bl	8004e60 <HAL_RCC_OscConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001800:	f000 f826 	bl	8001850 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001804:	f002 fc68 	bl	80040d8 <HAL_PWREx_EnableOverDrive>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800180e:	f000 f81f 	bl	8001850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001812:	230f      	movs	r3, #15
 8001814:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001816:	2302      	movs	r3, #2
 8001818:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800181e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001828:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	2105      	movs	r1, #5
 8001830:	4618      	mov	r0, r3
 8001832:	f002 fca1 	bl	8004178 <HAL_RCC_ClockConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800183c:	f000 f808 	bl	8001850 <Error_Handler>
  }
}
 8001840:	bf00      	nop
 8001842:	3750      	adds	r7, #80	; 0x50
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40023800 	.word	0x40023800
 800184c:	40007000 	.word	0x40007000

08001850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001854:	b672      	cpsid	i
}
 8001856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001858:	e7fe      	b.n	8001858 <Error_Handler+0x8>
	...

0800185c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001870:	2300      	movs	r3, #0
 8001872:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <MX_RTC_Init+0xac>)
 8001876:	4a25      	ldr	r2, [pc, #148]	; (800190c <MX_RTC_Init+0xb0>)
 8001878:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800187a:	4b23      	ldr	r3, [pc, #140]	; (8001908 <MX_RTC_Init+0xac>)
 800187c:	2200      	movs	r2, #0
 800187e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001880:	4b21      	ldr	r3, [pc, #132]	; (8001908 <MX_RTC_Init+0xac>)
 8001882:	227f      	movs	r2, #127	; 0x7f
 8001884:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <MX_RTC_Init+0xac>)
 8001888:	22ff      	movs	r2, #255	; 0xff
 800188a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <MX_RTC_Init+0xac>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <MX_RTC_Init+0xac>)
 8001894:	2200      	movs	r2, #0
 8001896:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <MX_RTC_Init+0xac>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800189e:	481a      	ldr	r0, [pc, #104]	; (8001908 <MX_RTC_Init+0xac>)
 80018a0:	f003 fd7c 	bl	800539c <HAL_RTC_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80018aa:	f7ff ffd1 	bl	8001850 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 80018ae:	2310      	movs	r3, #16
 80018b0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2201      	movs	r2, #1
 80018c6:	4619      	mov	r1, r3
 80018c8:	480f      	ldr	r0, [pc, #60]	; (8001908 <MX_RTC_Init+0xac>)
 80018ca:	f003 fdea 	bl	80054a2 <HAL_RTC_SetTime>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80018d4:	f7ff ffbc 	bl	8001850 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80018d8:	2306      	movs	r3, #6
 80018da:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 80018dc:	2304      	movs	r3, #4
 80018de:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x25;
 80018e0:	2325      	movs	r3, #37	; 0x25
 80018e2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 80018e4:	2324      	movs	r3, #36	; 0x24
 80018e6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80018e8:	463b      	mov	r3, r7
 80018ea:	2201      	movs	r2, #1
 80018ec:	4619      	mov	r1, r3
 80018ee:	4806      	ldr	r0, [pc, #24]	; (8001908 <MX_RTC_Init+0xac>)
 80018f0:	f003 fe71 	bl	80055d6 <HAL_RTC_SetDate>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80018fa:	f7ff ffa9 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000032c 	.word	0x2000032c
 800190c:	40002800 	.word	0x40002800

08001910 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b09a      	sub	sp, #104	; 0x68
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	225c      	movs	r2, #92	; 0x5c
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f007 fd5f 	bl	80093e4 <memset>
  if(rtcHandle->Instance==RTC)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a0c      	ldr	r2, [pc, #48]	; (800195c <HAL_RTC_MspInit+0x4c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d111      	bne.n	8001954 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001930:	2320      	movs	r3, #32
 8001932:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001938:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	4618      	mov	r0, r3
 8001940:	f002 fd34 	bl	80043ac <HAL_RCCEx_PeriphCLKConfig>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800194a:	f7ff ff81 	bl	8001850 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <HAL_RTC_MspInit+0x50>)
 8001950:	2201      	movs	r2, #1
 8001952:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001954:	bf00      	nop
 8001956:	3768      	adds	r7, #104	; 0x68
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40002800 	.word	0x40002800
 8001960:	42470e3c 	.word	0x42470e3c

08001964 <set_time>:
  }
}

/* USER CODE BEGIN 1 */

void set_time(void) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0

	RTC_TimeTypeDef sTime = { 0 };
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001978:	2300      	movs	r3, #0
 800197a:	603b      	str	r3, [r7, #0]

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x10;
 800197c:	2310      	movs	r3, #16
 800197e:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8001980:	2300      	movs	r3, #0
 8001982:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8001984:	2300      	movs	r3, #0
 8001986:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	2201      	movs	r2, #1
 8001994:	4619      	mov	r1, r3
 8001996:	4812      	ldr	r0, [pc, #72]	; (80019e0 <set_time+0x7c>)
 8001998:	f003 fd83 	bl	80054a2 <HAL_RTC_SetTime>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <set_time+0x42>
		Error_Handler();
 80019a2:	f7ff ff55 	bl	8001850 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80019a6:	2306      	movs	r3, #6
 80019a8:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_APRIL;
 80019aa:	2304      	movs	r3, #4
 80019ac:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x25;
 80019ae:	2325      	movs	r3, #37	; 0x25
 80019b0:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x24;
 80019b2:	2324      	movs	r3, #36	; 0x24
 80019b4:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80019b6:	463b      	mov	r3, r7
 80019b8:	2201      	movs	r2, #1
 80019ba:	4619      	mov	r1, r3
 80019bc:	4808      	ldr	r0, [pc, #32]	; (80019e0 <set_time+0x7c>)
 80019be:	f003 fe0a 	bl	80055d6 <HAL_RTC_SetDate>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <set_time+0x68>
		Error_Handler();
 80019c8:	f7ff ff42 	bl	8001850 <Error_Handler>
	}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80019cc:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80019d0:	2101      	movs	r1, #1
 80019d2:	4803      	ldr	r0, [pc, #12]	; (80019e0 <set_time+0x7c>)
 80019d4:	f003 ff24 	bl	8005820 <HAL_RTCEx_BKUPWrite>
}
 80019d8:	bf00      	nop
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	2000032c 	.word	0x2000032c

080019e4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <MX_SPI2_Init+0x64>)
 80019ea:	4a18      	ldr	r2, [pc, #96]	; (8001a4c <MX_SPI2_Init+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <MX_SPI2_Init+0x64>)
 80019f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <MX_SPI2_Init+0x64>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <MX_SPI2_Init+0x64>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_SPI2_Init+0x64>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <MX_SPI2_Init+0x64>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_SPI2_Init+0x64>)
 8001a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_SPI2_Init+0x64>)
 8001a18:	2210      	movs	r2, #16
 8001a1a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <MX_SPI2_Init+0x64>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_SPI2_Init+0x64>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <MX_SPI2_Init+0x64>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_SPI2_Init+0x64>)
 8001a30:	220a      	movs	r2, #10
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a34:	4804      	ldr	r0, [pc, #16]	; (8001a48 <MX_SPI2_Init+0x64>)
 8001a36:	f003 ff25 	bl	8005884 <HAL_SPI_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a40:	f7ff ff06 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	2000034c 	.word	0x2000034c
 8001a4c:	40003800 	.word	0x40003800

08001a50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a19      	ldr	r2, [pc, #100]	; (8001ad4 <HAL_SPI_MspInit+0x84>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d12c      	bne.n	8001acc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_SPI_MspInit+0x88>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a17      	ldr	r2, [pc, #92]	; (8001ad8 <HAL_SPI_MspInit+0x88>)
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_SPI_MspInit+0x88>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_SPI_MspInit+0x88>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <HAL_SPI_MspInit+0x88>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_SPI_MspInit+0x88>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001aaa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001abc:	2305      	movs	r3, #5
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <HAL_SPI_MspInit+0x8c>)
 8001ac8:	f001 f922 	bl	8002d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001acc:	bf00      	nop
 8001ace:	3728      	adds	r7, #40	; 0x28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40003800 	.word	0x40003800
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020400 	.word	0x40020400

08001ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <HAL_MspInit+0x4c>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	4a0f      	ldr	r2, [pc, #60]	; (8001b2c <HAL_MspInit+0x4c>)
 8001af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af4:	6453      	str	r3, [r2, #68]	; 0x44
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <HAL_MspInit+0x4c>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	603b      	str	r3, [r7, #0]
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_MspInit+0x4c>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	4a08      	ldr	r2, [pc, #32]	; (8001b2c <HAL_MspInit+0x4c>)
 8001b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_MspInit+0x4c>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b1e:	2007      	movs	r0, #7
 8001b20:	f001 f8b4 	bl	8002c8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800

08001b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b34:	e7fe      	b.n	8001b34 <NMI_Handler+0x4>

08001b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3a:	e7fe      	b.n	8001b3a <HardFault_Handler+0x4>

08001b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <MemManage_Handler+0x4>

08001b42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <BusFault_Handler+0x4>

08001b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <UsageFault_Handler+0x4>

08001b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7c:	f000 fb96 	bl	80022ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF_IRQ_Pin);
 8001b88:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b8c:	f001 fa86 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b94:	f001 fa82 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return 1;
 8001ba0:	2301      	movs	r3, #1
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_kill>:

int _kill(int pid, int sig)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bb6:	f007 fc67 	bl	8009488 <__errno>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2216      	movs	r2, #22
 8001bbe:	601a      	str	r2, [r3, #0]
  return -1;
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_exit>:

void _exit (int status)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ffe7 	bl	8001bac <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bde:	e7fe      	b.n	8001bde <_exit+0x12>

08001be0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	e00a      	b.n	8001c08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bf2:	f3af 8000 	nop.w
 8001bf6:	4601      	mov	r1, r0
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	60ba      	str	r2, [r7, #8]
 8001bfe:	b2ca      	uxtb	r2, r1
 8001c00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dbf0      	blt.n	8001bf2 <_read+0x12>
  }

  return len;
 8001c10:	687b      	ldr	r3, [r7, #4]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	e009      	b.n	8001c40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	60ba      	str	r2, [r7, #8]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f953 	bl	8001ee0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	dbf1      	blt.n	8001c2c <_write+0x12>
  }
  return len;
 8001c48:	687b      	ldr	r3, [r7, #4]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <_close>:

int _close(int file)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c7a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_isatty>:

int _isatty(int file)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc4:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <_sbrk+0x5c>)
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <_sbrk+0x60>)
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <_sbrk+0x64>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <_sbrk+0x68>)
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d207      	bcs.n	8001cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cec:	f007 fbcc 	bl	8009488 <__errno>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cfa:	e009      	b.n	8001d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <_sbrk+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <_sbrk+0x64>)
 8001d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20020000 	.word	0x20020000
 8001d1c:	00000400 	.word	0x00000400
 8001d20:	200003a4 	.word	0x200003a4
 8001d24:	200005a8 	.word	0x200005a8

08001d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <SystemInit+0x20>)
 8001d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d32:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <SystemInit+0x20>)
 8001d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d52:	463b      	mov	r3, r7
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <MX_TIM6_Init+0x64>)
 8001d5c:	4a15      	ldr	r2, [pc, #84]	; (8001db4 <MX_TIM6_Init+0x68>)
 8001d5e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90;
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <MX_TIM6_Init+0x64>)
 8001d62:	225a      	movs	r2, #90	; 0x5a
 8001d64:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <MX_TIM6_Init+0x64>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8001d6c:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <MX_TIM6_Init+0x64>)
 8001d6e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001d72:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <MX_TIM6_Init+0x64>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d7a:	480d      	ldr	r0, [pc, #52]	; (8001db0 <MX_TIM6_Init+0x64>)
 8001d7c:	f004 fb58 	bl	8006430 <HAL_TIM_Base_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001d86:	f7ff fd63 	bl	8001850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d92:	463b      	mov	r3, r7
 8001d94:	4619      	mov	r1, r3
 8001d96:	4806      	ldr	r0, [pc, #24]	; (8001db0 <MX_TIM6_Init+0x64>)
 8001d98:	f004 fcae 	bl	80066f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001da2:	f7ff fd55 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200003a8 	.word	0x200003a8
 8001db4:	40001000 	.word	0x40001000

08001db8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <HAL_TIM_Base_MspInit+0x3c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d10d      	bne.n	8001de6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_TIM_Base_MspInit+0x40>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <HAL_TIM_Base_MspInit+0x40>)
 8001dd4:	f043 0310 	orr.w	r3, r3, #16
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <HAL_TIM_Base_MspInit+0x40>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40001000 	.word	0x40001000
 8001df8:	40023800 	.word	0x40023800

08001dfc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <MX_USART2_UART_Init+0x50>)
 8001e04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e22:	220c      	movs	r2, #12
 8001e24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e32:	4805      	ldr	r0, [pc, #20]	; (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e34:	f004 fcdc 	bl	80067f0 <HAL_UART_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e3e:	f7ff fd07 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200003f0 	.word	0x200003f0
 8001e4c:	40004400 	.word	0x40004400

08001e50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a19      	ldr	r2, [pc, #100]	; (8001ed4 <HAL_UART_MspInit+0x84>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d12b      	bne.n	8001eca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <HAL_UART_MspInit+0x88>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	4a17      	ldr	r2, [pc, #92]	; (8001ed8 <HAL_UART_MspInit+0x88>)
 8001e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_UART_MspInit+0x88>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_UART_MspInit+0x88>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a10      	ldr	r2, [pc, #64]	; (8001ed8 <HAL_UART_MspInit+0x88>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <HAL_UART_MspInit+0x88>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001eaa:	230c      	movs	r3, #12
 8001eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eba:	2307      	movs	r3, #7
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4805      	ldr	r0, [pc, #20]	; (8001edc <HAL_UART_MspInit+0x8c>)
 8001ec6:	f000 ff23 	bl	8002d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	; 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40004400 	.word	0x40004400
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40020000 	.word	0x40020000

08001ee0 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001ee8:	1d39      	adds	r1, r7, #4
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4803      	ldr	r0, [pc, #12]	; (8001f00 <__io_putchar+0x20>)
 8001ef2:	f004 fccd 	bl	8006890 <HAL_UART_Transmit>
	return ch;
 8001ef6:	687b      	ldr	r3, [r7, #4]

}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200003f0 	.word	0x200003f0

08001f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f08:	f7ff ff0e 	bl	8001d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f0e:	490d      	ldr	r1, [pc, #52]	; (8001f44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f10:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f14:	e002      	b.n	8001f1c <LoopCopyDataInit>

08001f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1a:	3304      	adds	r3, #4

08001f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f20:	d3f9      	bcc.n	8001f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f24:	4c0a      	ldr	r4, [pc, #40]	; (8001f50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f28:	e001      	b.n	8001f2e <LoopFillZerobss>

08001f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f2c:	3204      	adds	r2, #4

08001f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f30:	d3fb      	bcc.n	8001f2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f32:	f007 faaf 	bl	8009494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f36:	f7ff fbe9 	bl	800170c <main>
  bx  lr    
 8001f3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f44:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001f48:	0800d588 	.word	0x0800d588
  ldr r2, =_sbss
 8001f4c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001f50:	200005a4 	.word	0x200005a4

08001f54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f54:	e7fe      	b.n	8001f54 <ADC_IRQHandler>
	...

08001f58 <microsecond_delay>:

extern uint8_t RH1, RH2, TC1, TC2, SUM, CHECK;
extern float tCelsius, tFahrenheit, RH;
uint32_t pMillis, cMillis;

void microsecond_delay(uint16_t delay) {
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0); // Reset the timer counter
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <microsecond_delay+0x30>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2200      	movs	r2, #0
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < delay)
 8001f6a:	bf00      	nop
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <microsecond_delay+0x30>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d3f9      	bcc.n	8001f6c <microsecond_delay+0x14>
		// Wait until the timer reaches the specified delay
		;
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	200003a8 	.word	0x200003a8

08001f8c <dht22_init>:

uint8_t dht22_init(void) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0

	uint8_t Response = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef GPIO_InitStructPrivate = { 0 };
 8001f96:	463b      	mov	r3, r7
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
	// Configure GPIO pin as output and pull it low
	GPIO_InitStructPrivate.Pin = DHT22_PIN;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	603b      	str	r3, [r7, #0]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // Initialize GPIO
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	482a      	ldr	r0, [pc, #168]	; (8002064 <dht22_init+0xd8>)
 8001fba:	f000 fea9 	bl	8002d10 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 0); // Pull the pin low
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2102      	movs	r1, #2
 8001fc2:	4828      	ldr	r0, [pc, #160]	; (8002064 <dht22_init+0xd8>)
 8001fc4:	f001 f850 	bl	8003068 <HAL_GPIO_WritePin>
	microsecond_delay(1300); // Wait for 1300 microseconds
 8001fc8:	f240 5014 	movw	r0, #1300	; 0x514
 8001fcc:	f7ff ffc4 	bl	8001f58 <microsecond_delay>

	// Pull the pin high and wait for 30 microseconds
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 1);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	4823      	ldr	r0, [pc, #140]	; (8002064 <dht22_init+0xd8>)
 8001fd6:	f001 f847 	bl	8003068 <HAL_GPIO_WritePin>
	microsecond_delay(30);
 8001fda:	201e      	movs	r0, #30
 8001fdc:	f7ff ffbc 	bl	8001f58 <microsecond_delay>

	// Configure GPIO pin as input with pull-up
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // Initialize GPIO
 8001fe8:	463b      	mov	r3, r7
 8001fea:	4619      	mov	r1, r3
 8001fec:	481d      	ldr	r0, [pc, #116]	; (8002064 <dht22_init+0xd8>)
 8001fee:	f000 fe8f 	bl	8002d10 <HAL_GPIO_Init>
	microsecond_delay(40);
 8001ff2:	2028      	movs	r0, #40	; 0x28
 8001ff4:	f7ff ffb0 	bl	8001f58 <microsecond_delay>

	// Check if the sensor responds
	if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) {
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	481a      	ldr	r0, [pc, #104]	; (8002064 <dht22_init+0xd8>)
 8001ffc:	f001 f81c 	bl	8003038 <HAL_GPIO_ReadPin>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10b      	bne.n	800201e <dht22_init+0x92>
		microsecond_delay(80);
 8002006:	2050      	movs	r0, #80	; 0x50
 8002008:	f7ff ffa6 	bl	8001f58 <microsecond_delay>
		if ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)))
 800200c:	2102      	movs	r1, #2
 800200e:	4815      	ldr	r0, [pc, #84]	; (8002064 <dht22_init+0xd8>)
 8002010:	f001 f812 	bl	8003038 <HAL_GPIO_ReadPin>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <dht22_init+0x92>
			Response = 1;
 800201a:	2301      	movs	r3, #1
 800201c:	75fb      	strb	r3, [r7, #23]
	}

	// Wait for the pin to go low or timeout
	pMillis = HAL_GetTick();
 800201e:	f000 f959 	bl	80022d4 <HAL_GetTick>
 8002022:	4603      	mov	r3, r0
 8002024:	4a10      	ldr	r2, [pc, #64]	; (8002068 <dht22_init+0xdc>)
 8002026:	6013      	str	r3, [r2, #0]
	cMillis = HAL_GetTick();
 8002028:	f000 f954 	bl	80022d4 <HAL_GetTick>
 800202c:	4603      	mov	r3, r0
 800202e:	4a0f      	ldr	r2, [pc, #60]	; (800206c <dht22_init+0xe0>)
 8002030:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis) {
 8002032:	e004      	b.n	800203e <dht22_init+0xb2>
		cMillis = HAL_GetTick();
 8002034:	f000 f94e 	bl	80022d4 <HAL_GetTick>
 8002038:	4603      	mov	r3, r0
 800203a:	4a0c      	ldr	r2, [pc, #48]	; (800206c <dht22_init+0xe0>)
 800203c:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis) {
 800203e:	2102      	movs	r1, #2
 8002040:	4808      	ldr	r0, [pc, #32]	; (8002064 <dht22_init+0xd8>)
 8002042:	f000 fff9 	bl	8003038 <HAL_GPIO_ReadPin>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <dht22_init+0xce>
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <dht22_init+0xdc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	1c9a      	adds	r2, r3, #2
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <dht22_init+0xe0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d8ec      	bhi.n	8002034 <dht22_init+0xa8>
	}

	return Response; // Return the response status
 800205a:	7dfb      	ldrb	r3, [r7, #23]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40020000 	.word	0x40020000
 8002068:	20000438 	.word	0x20000438
 800206c:	2000043c 	.word	0x2000043c

08002070 <dht22_read_data>:

uint8_t dht22_read_data(void) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
	uint8_t a, b;
	for (a = 0; a < 8; a++) {
 8002076:	2300      	movs	r3, #0
 8002078:	71fb      	strb	r3, [r7, #7]
 800207a:	e063      	b.n	8002144 <dht22_read_data+0xd4>
		pMillis = HAL_GetTick(); // Record current time
 800207c:	f000 f92a 	bl	80022d4 <HAL_GetTick>
 8002080:	4603      	mov	r3, r0
 8002082:	4a34      	ldr	r2, [pc, #208]	; (8002154 <dht22_read_data+0xe4>)
 8002084:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick(); // Initialize comparison time
 8002086:	f000 f925 	bl	80022d4 <HAL_GetTick>
 800208a:	4603      	mov	r3, r0
 800208c:	4a32      	ldr	r2, [pc, #200]	; (8002158 <dht22_read_data+0xe8>)
 800208e:	6013      	str	r3, [r2, #0]
		// Wait for the pin to go high or timeout
		while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8002090:	e004      	b.n	800209c <dht22_read_data+0x2c>
				&& pMillis + 2 > cMillis) {
			cMillis = HAL_GetTick(); // Update comparison time
 8002092:	f000 f91f 	bl	80022d4 <HAL_GetTick>
 8002096:	4603      	mov	r3, r0
 8002098:	4a2f      	ldr	r2, [pc, #188]	; (8002158 <dht22_read_data+0xe8>)
 800209a:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 800209c:	2102      	movs	r1, #2
 800209e:	482f      	ldr	r0, [pc, #188]	; (800215c <dht22_read_data+0xec>)
 80020a0:	f000 ffca 	bl	8003038 <HAL_GPIO_ReadPin>
 80020a4:	4603      	mov	r3, r0
				&& pMillis + 2 > cMillis) {
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <dht22_read_data+0x48>
 80020aa:	4b2a      	ldr	r3, [pc, #168]	; (8002154 <dht22_read_data+0xe4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	1c9a      	adds	r2, r3, #2
 80020b0:	4b29      	ldr	r3, [pc, #164]	; (8002158 <dht22_read_data+0xe8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d8ec      	bhi.n	8002092 <dht22_read_data+0x22>
		}
		microsecond_delay(40); // Wait for 40 microseconds
 80020b8:	2028      	movs	r0, #40	; 0x28
 80020ba:	f7ff ff4d 	bl	8001f58 <microsecond_delay>
		if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) // If the pin is low
 80020be:	2102      	movs	r1, #2
 80020c0:	4826      	ldr	r0, [pc, #152]	; (800215c <dht22_read_data+0xec>)
 80020c2:	f000 ffb9 	bl	8003038 <HAL_GPIO_ReadPin>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10e      	bne.n	80020ea <dht22_read_data+0x7a>
			b &= ~(1 << (7 - a)); // Clear the corresponding bit in 'b'
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	f1c3 0307 	rsb	r3, r3, #7
 80020d2:	2201      	movs	r2, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	b25a      	sxtb	r2, r3
 80020de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80020e2:	4013      	ands	r3, r2
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	71bb      	strb	r3, [r7, #6]
 80020e8:	e00b      	b.n	8002102 <dht22_read_data+0x92>
		else
			b |= (1 << (7 - a)); // Set the corresponding bit in 'b'
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	f1c3 0307 	rsb	r3, r3, #7
 80020f0:	2201      	movs	r2, #1
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	b25a      	sxtb	r2, r3
 80020f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	b25b      	sxtb	r3, r3
 8002100:	71bb      	strb	r3, [r7, #6]
		pMillis = HAL_GetTick(); // Record current time
 8002102:	f000 f8e7 	bl	80022d4 <HAL_GetTick>
 8002106:	4603      	mov	r3, r0
 8002108:	4a12      	ldr	r2, [pc, #72]	; (8002154 <dht22_read_data+0xe4>)
 800210a:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick(); // Initialize comparison time
 800210c:	f000 f8e2 	bl	80022d4 <HAL_GetTick>
 8002110:	4603      	mov	r3, r0
 8002112:	4a11      	ldr	r2, [pc, #68]	; (8002158 <dht22_read_data+0xe8>)
 8002114:	6013      	str	r3, [r2, #0]
		// Wait for the pin to go low or timeout
		while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8002116:	e004      	b.n	8002122 <dht22_read_data+0xb2>
				&& pMillis + 2 > cMillis) {
			cMillis = HAL_GetTick(); // Update comparison time
 8002118:	f000 f8dc 	bl	80022d4 <HAL_GetTick>
 800211c:	4603      	mov	r3, r0
 800211e:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <dht22_read_data+0xe8>)
 8002120:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8002122:	2102      	movs	r1, #2
 8002124:	480d      	ldr	r0, [pc, #52]	; (800215c <dht22_read_data+0xec>)
 8002126:	f000 ff87 	bl	8003038 <HAL_GPIO_ReadPin>
 800212a:	4603      	mov	r3, r0
				&& pMillis + 2 > cMillis) {
 800212c:	2b00      	cmp	r3, #0
 800212e:	d006      	beq.n	800213e <dht22_read_data+0xce>
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <dht22_read_data+0xe4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	1c9a      	adds	r2, r3, #2
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <dht22_read_data+0xe8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d8ec      	bhi.n	8002118 <dht22_read_data+0xa8>
	for (a = 0; a < 8; a++) {
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	3301      	adds	r3, #1
 8002142:	71fb      	strb	r3, [r7, #7]
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	2b07      	cmp	r3, #7
 8002148:	d998      	bls.n	800207c <dht22_read_data+0xc>
		}
	}
	return b; // Return the received byte
 800214a:	79bb      	ldrb	r3, [r7, #6]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000438 	.word	0x20000438
 8002158:	2000043c 	.word	0x2000043c
 800215c:	40020000 	.word	0x40020000

08002160 <dht22_readings>:

uint8_t dht22_readings(void) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0

	uint8_t ReadingStatus = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	71fb      	strb	r3, [r7, #7]

	// Check if communication with DHT22 sensor is successful
	if (dht22_init()) {
 800216a:	f7ff ff0f 	bl	8001f8c <dht22_init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d037      	beq.n	80021e4 <dht22_readings+0x84>
		// Read data from DHT22 sensor
		RH1 = dht22_read_data(); // First 8 bits of humidity
 8002174:	f7ff ff7c 	bl	8002070 <dht22_read_data>
 8002178:	4603      	mov	r3, r0
 800217a:	461a      	mov	r2, r3
 800217c:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <dht22_readings+0x90>)
 800217e:	701a      	strb	r2, [r3, #0]
		RH2 = dht22_read_data(); // Second 8 bits of Relative humidity
 8002180:	f7ff ff76 	bl	8002070 <dht22_read_data>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <dht22_readings+0x94>)
 800218a:	701a      	strb	r2, [r3, #0]
		TC1 = dht22_read_data(); // First 8 bits of Celsius
 800218c:	f7ff ff70 	bl	8002070 <dht22_read_data>
 8002190:	4603      	mov	r3, r0
 8002192:	461a      	mov	r2, r3
 8002194:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <dht22_readings+0x98>)
 8002196:	701a      	strb	r2, [r3, #0]
		TC2 = dht22_read_data(); // Second 8 bits of Celsius
 8002198:	f7ff ff6a 	bl	8002070 <dht22_read_data>
 800219c:	4603      	mov	r3, r0
 800219e:	461a      	mov	r2, r3
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <dht22_readings+0x9c>)
 80021a2:	701a      	strb	r2, [r3, #0]
		SUM = dht22_read_data(); // Check sum
 80021a4:	f7ff ff64 	bl	8002070 <dht22_read_data>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <dht22_readings+0xa0>)
 80021ae:	701a      	strb	r2, [r3, #0]

		// Calculate checksum
		CHECK = RH1 + RH2 + TC1 + TC2;
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <dht22_readings+0x90>)
 80021b2:	781a      	ldrb	r2, [r3, #0]
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <dht22_readings+0x94>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <dht22_readings+0x98>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <dht22_readings+0x9c>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4413      	add	r3, r2
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <dht22_readings+0xa4>)
 80021ce:	701a      	strb	r2, [r3, #0]
		ReadingStatus = SUM == CHECK;
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <dht22_readings+0xa0>)
 80021d2:	781a      	ldrb	r2, [r3, #0]
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <dht22_readings+0xa4>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	bf0c      	ite	eq
 80021dc:	2301      	moveq	r3, #1
 80021de:	2300      	movne	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	71fb      	strb	r3, [r7, #7]
	}
	return ReadingStatus;
 80021e4:	79fb      	ldrb	r3, [r7, #7]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200002b8 	.word	0x200002b8
 80021f4:	200002b9 	.word	0x200002b9
 80021f8:	200002ba 	.word	0x200002ba
 80021fc:	200002bb 	.word	0x200002bb
 8002200:	200002bc 	.word	0x200002bc
 8002204:	200002bd 	.word	0x200002bd

08002208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800220c:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <HAL_Init+0x40>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <HAL_Init+0x40>)
 8002212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002216:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_Init+0x40>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <HAL_Init+0x40>)
 800221e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002222:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <HAL_Init+0x40>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a07      	ldr	r2, [pc, #28]	; (8002248 <HAL_Init+0x40>)
 800222a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002230:	2003      	movs	r0, #3
 8002232:	f000 fd2b 	bl	8002c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002236:	2000      	movs	r0, #0
 8002238:	f000 f808 	bl	800224c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800223c:	f7ff fc50 	bl	8001ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023c00 	.word	0x40023c00

0800224c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_InitTick+0x54>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_InitTick+0x58>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	4619      	mov	r1, r3
 800225e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002262:	fbb3 f3f1 	udiv	r3, r3, r1
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4618      	mov	r0, r3
 800226c:	f000 fd43 	bl	8002cf6 <HAL_SYSTICK_Config>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e00e      	b.n	8002298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b0f      	cmp	r3, #15
 800227e:	d80a      	bhi.n	8002296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002280:	2200      	movs	r2, #0
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002288:	f000 fd0b 	bl	8002ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800228c:	4a06      	ldr	r2, [pc, #24]	; (80022a8 <HAL_InitTick+0x5c>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	e000      	b.n	8002298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000028 	.word	0x20000028
 80022a4:	20000030 	.word	0x20000030
 80022a8:	2000002c 	.word	0x2000002c

080022ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_IncTick+0x20>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_IncTick+0x24>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <HAL_IncTick+0x24>)
 80022be:	6013      	str	r3, [r2, #0]
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000030 	.word	0x20000030
 80022d0:	20000440 	.word	0x20000440

080022d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return uwTick;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_GetTick+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000440 	.word	0x20000440

080022ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f4:	f7ff ffee 	bl	80022d4 <HAL_GetTick>
 80022f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002304:	d005      	beq.n	8002312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002306:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <HAL_Delay+0x44>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4413      	add	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002312:	bf00      	nop
 8002314:	f7ff ffde 	bl	80022d4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	429a      	cmp	r2, r3
 8002322:	d8f7      	bhi.n	8002314 <HAL_Delay+0x28>
  {
  }
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000030 	.word	0x20000030

08002334 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e033      	b.n	80023b2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7fe fece 	bl	80010f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b00      	cmp	r3, #0
 8002370:	d118      	bne.n	80023a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800237a:	f023 0302 	bic.w	r3, r3, #2
 800237e:	f043 0202 	orr.w	r2, r3, #2
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 fab4 	bl	80028f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f023 0303 	bic.w	r3, r3, #3
 800239a:	f043 0201 	orr.w	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
 80023a2:	e001      	b.n	80023a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_Start+0x1a>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e0b2      	b.n	800253c <HAL_ADC_Start+0x180>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d018      	beq.n	800241e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023fc:	4b52      	ldr	r3, [pc, #328]	; (8002548 <HAL_ADC_Start+0x18c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a52      	ldr	r2, [pc, #328]	; (800254c <HAL_ADC_Start+0x190>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	0c9a      	lsrs	r2, r3, #18
 8002408:	4613      	mov	r3, r2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	4413      	add	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002410:	e002      	b.n	8002418 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	3b01      	subs	r3, #1
 8002416:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f9      	bne.n	8002412 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b01      	cmp	r3, #1
 800242a:	d17a      	bne.n	8002522 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002456:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246a:	d106      	bne.n	800247a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002470:	f023 0206 	bic.w	r2, r3, #6
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	645a      	str	r2, [r3, #68]	; 0x44
 8002478:	e002      	b.n	8002480 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002488:	4b31      	ldr	r3, [pc, #196]	; (8002550 <HAL_ADC_Start+0x194>)
 800248a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002494:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 031f 	and.w	r3, r3, #31
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d12a      	bne.n	80024f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a2b      	ldr	r2, [pc, #172]	; (8002554 <HAL_ADC_Start+0x198>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d015      	beq.n	80024d8 <HAL_ADC_Start+0x11c>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a29      	ldr	r2, [pc, #164]	; (8002558 <HAL_ADC_Start+0x19c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d105      	bne.n	80024c2 <HAL_ADC_Start+0x106>
 80024b6:	4b26      	ldr	r3, [pc, #152]	; (8002550 <HAL_ADC_Start+0x194>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a25      	ldr	r2, [pc, #148]	; (800255c <HAL_ADC_Start+0x1a0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d136      	bne.n	800253a <HAL_ADC_Start+0x17e>
 80024cc:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_ADC_Start+0x194>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d130      	bne.n	800253a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d129      	bne.n	800253a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	e020      	b.n	800253a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a15      	ldr	r2, [pc, #84]	; (8002554 <HAL_ADC_Start+0x198>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d11b      	bne.n	800253a <HAL_ADC_Start+0x17e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d114      	bne.n	800253a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	e00b      	b.n	800253a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f043 0210 	orr.w	r2, r3, #16
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	f043 0201 	orr.w	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	20000028 	.word	0x20000028
 800254c:	431bde83 	.word	0x431bde83
 8002550:	40012300 	.word	0x40012300
 8002554:	40012000 	.word	0x40012000
 8002558:	40012100 	.word	0x40012100
 800255c:	40012200 	.word	0x40012200

08002560 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257c:	d113      	bne.n	80025a6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800258c:	d10b      	bne.n	80025a6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f043 0220 	orr.w	r2, r3, #32
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e063      	b.n	800266e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80025a6:	f7ff fe95 	bl	80022d4 <HAL_GetTick>
 80025aa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025ac:	e021      	b.n	80025f2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025b4:	d01d      	beq.n	80025f2 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d007      	beq.n	80025cc <HAL_ADC_PollForConversion+0x6c>
 80025bc:	f7ff fe8a 	bl	80022d4 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d212      	bcs.n	80025f2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d00b      	beq.n	80025f2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f043 0204 	orr.w	r2, r3, #4
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e03d      	b.n	800266e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d1d6      	bne.n	80025ae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0212 	mvn.w	r2, #18
 8002608:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d123      	bne.n	800266c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002628:	2b00      	cmp	r3, #0
 800262a:	d11f      	bne.n	800266c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002636:	2b00      	cmp	r3, #0
 8002638:	d006      	beq.n	8002648 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002644:	2b00      	cmp	r3, #0
 8002646:	d111      	bne.n	800266c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d105      	bne.n	800266c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f043 0201 	orr.w	r2, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x1c>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e113      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x244>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b09      	cmp	r3, #9
 80026ba:	d925      	bls.n	8002708 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68d9      	ldr	r1, [r3, #12]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	4613      	mov	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4413      	add	r3, r2
 80026d0:	3b1e      	subs	r3, #30
 80026d2:	2207      	movs	r2, #7
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43da      	mvns	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	400a      	ands	r2, r1
 80026e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68d9      	ldr	r1, [r3, #12]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	4618      	mov	r0, r3
 80026f4:	4603      	mov	r3, r0
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4403      	add	r3, r0
 80026fa:	3b1e      	subs	r3, #30
 80026fc:	409a      	lsls	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	e022      	b.n	800274e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6919      	ldr	r1, [r3, #16]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	2207      	movs	r2, #7
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43da      	mvns	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	400a      	ands	r2, r1
 800272a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6919      	ldr	r1, [r3, #16]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	4618      	mov	r0, r3
 800273e:	4603      	mov	r3, r0
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	4403      	add	r3, r0
 8002744:	409a      	lsls	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b06      	cmp	r3, #6
 8002754:	d824      	bhi.n	80027a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	3b05      	subs	r3, #5
 8002768:	221f      	movs	r2, #31
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	400a      	ands	r2, r1
 8002776:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	4618      	mov	r0, r3
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	3b05      	subs	r3, #5
 8002792:	fa00 f203 	lsl.w	r2, r0, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	635a      	str	r2, [r3, #52]	; 0x34
 800279e:	e04c      	b.n	800283a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b0c      	cmp	r3, #12
 80027a6:	d824      	bhi.n	80027f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	3b23      	subs	r3, #35	; 0x23
 80027ba:	221f      	movs	r2, #31
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43da      	mvns	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	400a      	ands	r2, r1
 80027c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	4618      	mov	r0, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	3b23      	subs	r3, #35	; 0x23
 80027e4:	fa00 f203 	lsl.w	r2, r0, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
 80027f0:	e023      	b.n	800283a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	3b41      	subs	r3, #65	; 0x41
 8002804:	221f      	movs	r2, #31
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43da      	mvns	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	400a      	ands	r2, r1
 8002812:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	4618      	mov	r0, r3
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	3b41      	subs	r3, #65	; 0x41
 800282e:	fa00 f203 	lsl.w	r2, r0, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800283a:	4b29      	ldr	r3, [pc, #164]	; (80028e0 <HAL_ADC_ConfigChannel+0x250>)
 800283c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a28      	ldr	r2, [pc, #160]	; (80028e4 <HAL_ADC_ConfigChannel+0x254>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d10f      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x1d8>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b12      	cmp	r3, #18
 800284e:	d10b      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <HAL_ADC_ConfigChannel+0x254>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d12b      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x23a>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <HAL_ADC_ConfigChannel+0x258>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d003      	beq.n	8002884 <HAL_ADC_ConfigChannel+0x1f4>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b11      	cmp	r3, #17
 8002882:	d122      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a11      	ldr	r2, [pc, #68]	; (80028e8 <HAL_ADC_ConfigChannel+0x258>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d111      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_ADC_ConfigChannel+0x25c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a11      	ldr	r2, [pc, #68]	; (80028f0 <HAL_ADC_ConfigChannel+0x260>)
 80028ac:	fba2 2303 	umull	r2, r3, r2, r3
 80028b0:	0c9a      	lsrs	r2, r3, #18
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028bc:	e002      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f9      	bne.n	80028be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	40012300 	.word	0x40012300
 80028e4:	40012000 	.word	0x40012000
 80028e8:	10000012 	.word	0x10000012
 80028ec:	20000028 	.word	0x20000028
 80028f0:	431bde83 	.word	0x431bde83

080028f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028fc:	4b79      	ldr	r3, [pc, #484]	; (8002ae4 <ADC_Init+0x1f0>)
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	431a      	orrs	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002928:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	021a      	lsls	r2, r3, #8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800294c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800296e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6899      	ldr	r1, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	4a58      	ldr	r2, [pc, #352]	; (8002ae8 <ADC_Init+0x1f4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d022      	beq.n	80029d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800299a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6899      	ldr	r1, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	e00f      	b.n	80029f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0202 	bic.w	r2, r2, #2
 8002a00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6899      	ldr	r1, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7e1b      	ldrb	r3, [r3, #24]
 8002a0c:	005a      	lsls	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01b      	beq.n	8002a58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a2e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	035a      	lsls	r2, r3, #13
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	e007      	b.n	8002a68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a66:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	051a      	lsls	r2, r3, #20
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6899      	ldr	r1, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aaa:	025a      	lsls	r2, r3, #9
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	029a      	lsls	r2, r3, #10
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	609a      	str	r2, [r3, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40012300 	.word	0x40012300
 8002ae8:	0f000001 	.word	0x0f000001

08002aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1e:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	60d3      	str	r3, [r2, #12]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <__NVIC_GetPriorityGrouping+0x18>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	f003 0307 	and.w	r3, r3, #7
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	db0b      	blt.n	8002b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	f003 021f 	and.w	r2, r3, #31
 8002b68:	4907      	ldr	r1, [pc, #28]	; (8002b88 <__NVIC_EnableIRQ+0x38>)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	2001      	movs	r0, #1
 8002b72:	fa00 f202 	lsl.w	r2, r0, r2
 8002b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	e000e100 	.word	0xe000e100

08002b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	6039      	str	r1, [r7, #0]
 8002b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	db0a      	blt.n	8002bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	490c      	ldr	r1, [pc, #48]	; (8002bd8 <__NVIC_SetPriority+0x4c>)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	0112      	lsls	r2, r2, #4
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	440b      	add	r3, r1
 8002bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb4:	e00a      	b.n	8002bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4908      	ldr	r1, [pc, #32]	; (8002bdc <__NVIC_SetPriority+0x50>)
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	3b04      	subs	r3, #4
 8002bc4:	0112      	lsls	r2, r2, #4
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	440b      	add	r3, r1
 8002bca:	761a      	strb	r2, [r3, #24]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000e100 	.word	0xe000e100
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f1c3 0307 	rsb	r3, r3, #7
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	bf28      	it	cs
 8002bfe:	2304      	movcs	r3, #4
 8002c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3304      	adds	r3, #4
 8002c06:	2b06      	cmp	r3, #6
 8002c08:	d902      	bls.n	8002c10 <NVIC_EncodePriority+0x30>
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3b03      	subs	r3, #3
 8002c0e:	e000      	b.n	8002c12 <NVIC_EncodePriority+0x32>
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	401a      	ands	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	43d9      	mvns	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	4313      	orrs	r3, r2
         );
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3724      	adds	r7, #36	; 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c58:	d301      	bcc.n	8002c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e00f      	b.n	8002c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <SysTick_Config+0x40>)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c66:	210f      	movs	r1, #15
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c6c:	f7ff ff8e 	bl	8002b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <SysTick_Config+0x40>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c76:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <SysTick_Config+0x40>)
 8002c78:	2207      	movs	r2, #7
 8002c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	e000e010 	.word	0xe000e010

08002c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff ff29 	bl	8002aec <__NVIC_SetPriorityGrouping>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb4:	f7ff ff3e 	bl	8002b34 <__NVIC_GetPriorityGrouping>
 8002cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f7ff ff8e 	bl	8002be0 <NVIC_EncodePriority>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff5d 	bl	8002b8c <__NVIC_SetPriority>
}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff31 	bl	8002b50 <__NVIC_EnableIRQ>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff ffa2 	bl	8002c48 <SysTick_Config>
 8002d04:	4603      	mov	r3, r0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	; 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	e165      	b.n	8002ff8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	f040 8154 	bne.w	8002ff2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d005      	beq.n	8002d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d130      	bne.n	8002dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d98:	2201      	movs	r2, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 0201 	and.w	r2, r3, #1
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d017      	beq.n	8002e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2203      	movs	r2, #3
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d123      	bne.n	8002e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	08da      	lsrs	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3208      	adds	r2, #8
 8002e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	220f      	movs	r2, #15
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	08da      	lsrs	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3208      	adds	r2, #8
 8002e4e:	69b9      	ldr	r1, [r7, #24]
 8002e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0203 	and.w	r2, r3, #3
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80ae 	beq.w	8002ff2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	4b5d      	ldr	r3, [pc, #372]	; (8003010 <HAL_GPIO_Init+0x300>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	4a5c      	ldr	r2, [pc, #368]	; (8003010 <HAL_GPIO_Init+0x300>)
 8002ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ea6:	4b5a      	ldr	r3, [pc, #360]	; (8003010 <HAL_GPIO_Init+0x300>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eb2:	4a58      	ldr	r2, [pc, #352]	; (8003014 <HAL_GPIO_Init+0x304>)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	3302      	adds	r3, #2
 8002eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	220f      	movs	r2, #15
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a4f      	ldr	r2, [pc, #316]	; (8003018 <HAL_GPIO_Init+0x308>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d025      	beq.n	8002f2a <HAL_GPIO_Init+0x21a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a4e      	ldr	r2, [pc, #312]	; (800301c <HAL_GPIO_Init+0x30c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d01f      	beq.n	8002f26 <HAL_GPIO_Init+0x216>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a4d      	ldr	r2, [pc, #308]	; (8003020 <HAL_GPIO_Init+0x310>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d019      	beq.n	8002f22 <HAL_GPIO_Init+0x212>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a4c      	ldr	r2, [pc, #304]	; (8003024 <HAL_GPIO_Init+0x314>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <HAL_GPIO_Init+0x20e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a4b      	ldr	r2, [pc, #300]	; (8003028 <HAL_GPIO_Init+0x318>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00d      	beq.n	8002f1a <HAL_GPIO_Init+0x20a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a4a      	ldr	r2, [pc, #296]	; (800302c <HAL_GPIO_Init+0x31c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d007      	beq.n	8002f16 <HAL_GPIO_Init+0x206>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a49      	ldr	r2, [pc, #292]	; (8003030 <HAL_GPIO_Init+0x320>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d101      	bne.n	8002f12 <HAL_GPIO_Init+0x202>
 8002f0e:	2306      	movs	r3, #6
 8002f10:	e00c      	b.n	8002f2c <HAL_GPIO_Init+0x21c>
 8002f12:	2307      	movs	r3, #7
 8002f14:	e00a      	b.n	8002f2c <HAL_GPIO_Init+0x21c>
 8002f16:	2305      	movs	r3, #5
 8002f18:	e008      	b.n	8002f2c <HAL_GPIO_Init+0x21c>
 8002f1a:	2304      	movs	r3, #4
 8002f1c:	e006      	b.n	8002f2c <HAL_GPIO_Init+0x21c>
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e004      	b.n	8002f2c <HAL_GPIO_Init+0x21c>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e002      	b.n	8002f2c <HAL_GPIO_Init+0x21c>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_GPIO_Init+0x21c>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	69fa      	ldr	r2, [r7, #28]
 8002f2e:	f002 0203 	and.w	r2, r2, #3
 8002f32:	0092      	lsls	r2, r2, #2
 8002f34:	4093      	lsls	r3, r2
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f3c:	4935      	ldr	r1, [pc, #212]	; (8003014 <HAL_GPIO_Init+0x304>)
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	3302      	adds	r3, #2
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f4a:	4b3a      	ldr	r3, [pc, #232]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f6e:	4a31      	ldr	r2, [pc, #196]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f74:	4b2f      	ldr	r3, [pc, #188]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f98:	4a26      	ldr	r2, [pc, #152]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f9e:	4b25      	ldr	r3, [pc, #148]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4013      	ands	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fc2:	4a1c      	ldr	r2, [pc, #112]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fec:	4a11      	ldr	r2, [pc, #68]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	61fb      	str	r3, [r7, #28]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	2b0f      	cmp	r3, #15
 8002ffc:	f67f ae96 	bls.w	8002d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	3724      	adds	r7, #36	; 0x24
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800
 8003014:	40013800 	.word	0x40013800
 8003018:	40020000 	.word	0x40020000
 800301c:	40020400 	.word	0x40020400
 8003020:	40020800 	.word	0x40020800
 8003024:	40020c00 	.word	0x40020c00
 8003028:	40021000 	.word	0x40021000
 800302c:	40021400 	.word	0x40021400
 8003030:	40021800 	.word	0x40021800
 8003034:	40013c00 	.word	0x40013c00

08003038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	887b      	ldrh	r3, [r7, #2]
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
 8003054:	e001      	b.n	800305a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003056:	2300      	movs	r3, #0
 8003058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800305a:	7bfb      	ldrb	r3, [r7, #15]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	807b      	strh	r3, [r7, #2]
 8003074:	4613      	mov	r3, r2
 8003076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003078:	787b      	ldrb	r3, [r7, #1]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800307e:	887a      	ldrh	r2, [r7, #2]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003084:	e003      	b.n	800308e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003086:	887b      	ldrh	r3, [r7, #2]
 8003088:	041a      	lsls	r2, r3, #16
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	619a      	str	r2, [r3, #24]
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d006      	beq.n	80030c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030b2:	4a05      	ldr	r2, [pc, #20]	; (80030c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 f806 	bl	80030cc <HAL_GPIO_EXTI_Callback>
  }
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40013c00 	.word	0x40013c00

080030cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e12b      	b.n	800334e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fe f8fe 	bl	800130c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2224      	movs	r2, #36	; 0x24
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0201 	bic.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003136:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003146:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003148:	f001 f908 	bl	800435c <HAL_RCC_GetPCLK1Freq>
 800314c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4a81      	ldr	r2, [pc, #516]	; (8003358 <HAL_I2C_Init+0x274>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d807      	bhi.n	8003168 <HAL_I2C_Init+0x84>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4a80      	ldr	r2, [pc, #512]	; (800335c <HAL_I2C_Init+0x278>)
 800315c:	4293      	cmp	r3, r2
 800315e:	bf94      	ite	ls
 8003160:	2301      	movls	r3, #1
 8003162:	2300      	movhi	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	e006      	b.n	8003176 <HAL_I2C_Init+0x92>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4a7d      	ldr	r2, [pc, #500]	; (8003360 <HAL_I2C_Init+0x27c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	bf94      	ite	ls
 8003170:	2301      	movls	r3, #1
 8003172:	2300      	movhi	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e0e7      	b.n	800334e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4a78      	ldr	r2, [pc, #480]	; (8003364 <HAL_I2C_Init+0x280>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	0c9b      	lsrs	r3, r3, #18
 8003188:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a6a      	ldr	r2, [pc, #424]	; (8003358 <HAL_I2C_Init+0x274>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d802      	bhi.n	80031b8 <HAL_I2C_Init+0xd4>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	3301      	adds	r3, #1
 80031b6:	e009      	b.n	80031cc <HAL_I2C_Init+0xe8>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	4a69      	ldr	r2, [pc, #420]	; (8003368 <HAL_I2C_Init+0x284>)
 80031c4:	fba2 2303 	umull	r2, r3, r2, r3
 80031c8:	099b      	lsrs	r3, r3, #6
 80031ca:	3301      	adds	r3, #1
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	430b      	orrs	r3, r1
 80031d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	495c      	ldr	r1, [pc, #368]	; (8003358 <HAL_I2C_Init+0x274>)
 80031e8:	428b      	cmp	r3, r1
 80031ea:	d819      	bhi.n	8003220 <HAL_I2C_Init+0x13c>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1e59      	subs	r1, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031fa:	1c59      	adds	r1, r3, #1
 80031fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003200:	400b      	ands	r3, r1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_I2C_Init+0x138>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1e59      	subs	r1, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	fbb1 f3f3 	udiv	r3, r1, r3
 8003214:	3301      	adds	r3, #1
 8003216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321a:	e051      	b.n	80032c0 <HAL_I2C_Init+0x1dc>
 800321c:	2304      	movs	r3, #4
 800321e:	e04f      	b.n	80032c0 <HAL_I2C_Init+0x1dc>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d111      	bne.n	800324c <HAL_I2C_Init+0x168>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1e58      	subs	r0, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	440b      	add	r3, r1
 8003236:	fbb0 f3f3 	udiv	r3, r0, r3
 800323a:	3301      	adds	r3, #1
 800323c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	e012      	b.n	8003272 <HAL_I2C_Init+0x18e>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1e58      	subs	r0, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6859      	ldr	r1, [r3, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	0099      	lsls	r1, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003262:	3301      	adds	r3, #1
 8003264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf0c      	ite	eq
 800326c:	2301      	moveq	r3, #1
 800326e:	2300      	movne	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_I2C_Init+0x196>
 8003276:	2301      	movs	r3, #1
 8003278:	e022      	b.n	80032c0 <HAL_I2C_Init+0x1dc>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10e      	bne.n	80032a0 <HAL_I2C_Init+0x1bc>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1e58      	subs	r0, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6859      	ldr	r1, [r3, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	440b      	add	r3, r1
 8003290:	fbb0 f3f3 	udiv	r3, r0, r3
 8003294:	3301      	adds	r3, #1
 8003296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800329a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800329e:	e00f      	b.n	80032c0 <HAL_I2C_Init+0x1dc>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1e58      	subs	r0, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	0099      	lsls	r1, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b6:	3301      	adds	r3, #1
 80032b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	6809      	ldr	r1, [r1, #0]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69da      	ldr	r2, [r3, #28]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6911      	ldr	r1, [r2, #16]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	68d2      	ldr	r2, [r2, #12]
 80032fa:	4311      	orrs	r1, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	430b      	orrs	r3, r1
 8003302:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	000186a0 	.word	0x000186a0
 800335c:	001e847f 	.word	0x001e847f
 8003360:	003d08ff 	.word	0x003d08ff
 8003364:	431bde83 	.word	0x431bde83
 8003368:	10624dd3 	.word	0x10624dd3

0800336c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af02      	add	r7, sp, #8
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	607a      	str	r2, [r7, #4]
 8003376:	461a      	mov	r2, r3
 8003378:	460b      	mov	r3, r1
 800337a:	817b      	strh	r3, [r7, #10]
 800337c:	4613      	mov	r3, r2
 800337e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003380:	f7fe ffa8 	bl	80022d4 <HAL_GetTick>
 8003384:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b20      	cmp	r3, #32
 8003390:	f040 80e0 	bne.w	8003554 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	2319      	movs	r3, #25
 800339a:	2201      	movs	r2, #1
 800339c:	4970      	ldr	r1, [pc, #448]	; (8003560 <HAL_I2C_Master_Transmit+0x1f4>)
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 fc64 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033aa:	2302      	movs	r3, #2
 80033ac:	e0d3      	b.n	8003556 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_I2C_Master_Transmit+0x50>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e0cc      	b.n	8003556 <HAL_I2C_Master_Transmit+0x1ea>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d007      	beq.n	80033e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0201 	orr.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2221      	movs	r2, #33	; 0x21
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2210      	movs	r2, #16
 80033fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	893a      	ldrh	r2, [r7, #8]
 8003412:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4a50      	ldr	r2, [pc, #320]	; (8003564 <HAL_I2C_Master_Transmit+0x1f8>)
 8003422:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003424:	8979      	ldrh	r1, [r7, #10]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	6a3a      	ldr	r2, [r7, #32]
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 face 	bl	80039cc <I2C_MasterRequestWrite>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e08d      	b.n	8003556 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343a:	2300      	movs	r3, #0
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003450:	e066      	b.n	8003520 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	6a39      	ldr	r1, [r7, #32]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fd22 	bl	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00d      	beq.n	800347e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b04      	cmp	r3, #4
 8003468:	d107      	bne.n	800347a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003478:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e06b      	b.n	8003556 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	781a      	ldrb	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d11b      	bne.n	80034f4 <HAL_I2C_Master_Transmit+0x188>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d017      	beq.n	80034f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	781a      	ldrb	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	6a39      	ldr	r1, [r7, #32]
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 fd19 	bl	8003f30 <I2C_WaitOnBTFFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00d      	beq.n	8003520 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	2b04      	cmp	r3, #4
 800350a:	d107      	bne.n	800351c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800351a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e01a      	b.n	8003556 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003524:	2b00      	cmp	r3, #0
 8003526:	d194      	bne.n	8003452 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	e000      	b.n	8003556 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003554:	2302      	movs	r3, #2
  }
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	00100002 	.word	0x00100002
 8003564:	ffff0000 	.word	0xffff0000

08003568 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08c      	sub	sp, #48	; 0x30
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	461a      	mov	r2, r3
 8003574:	460b      	mov	r3, r1
 8003576:	817b      	strh	r3, [r7, #10]
 8003578:	4613      	mov	r3, r2
 800357a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800357c:	f7fe feaa 	bl	80022d4 <HAL_GetTick>
 8003580:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b20      	cmp	r3, #32
 800358c:	f040 8217 	bne.w	80039be <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2319      	movs	r3, #25
 8003596:	2201      	movs	r2, #1
 8003598:	497c      	ldr	r1, [pc, #496]	; (800378c <HAL_I2C_Master_Receive+0x224>)
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 fb66 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
 80035a8:	e20a      	b.n	80039c0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_I2C_Master_Receive+0x50>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e203      	b.n	80039c0 <HAL_I2C_Master_Receive+0x458>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d007      	beq.n	80035de <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0201 	orr.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2222      	movs	r2, #34	; 0x22
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2210      	movs	r2, #16
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	893a      	ldrh	r2, [r7, #8]
 800360e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4a5c      	ldr	r2, [pc, #368]	; (8003790 <HAL_I2C_Master_Receive+0x228>)
 800361e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003620:	8979      	ldrh	r1, [r7, #10]
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 fa52 	bl	8003ad0 <I2C_MasterRequestRead>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e1c4      	b.n	80039c0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363a:	2b00      	cmp	r3, #0
 800363c:	d113      	bne.n	8003666 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363e:	2300      	movs	r3, #0
 8003640:	623b      	str	r3, [r7, #32]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	623b      	str	r3, [r7, #32]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	623b      	str	r3, [r7, #32]
 8003652:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	e198      	b.n	8003998 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366a:	2b01      	cmp	r3, #1
 800366c:	d11b      	bne.n	80036a6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800367c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e178      	b.n	8003998 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d11b      	bne.n	80036e6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ce:	2300      	movs	r3, #0
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	61bb      	str	r3, [r7, #24]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	e158      	b.n	8003998 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800370c:	e144      	b.n	8003998 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003712:	2b03      	cmp	r3, #3
 8003714:	f200 80f1 	bhi.w	80038fa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371c:	2b01      	cmp	r3, #1
 800371e:	d123      	bne.n	8003768 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003722:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fc4b 	bl	8003fc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e145      	b.n	80039c0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003766:	e117      	b.n	8003998 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	2b02      	cmp	r3, #2
 800376e:	d14e      	bne.n	800380e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003776:	2200      	movs	r2, #0
 8003778:	4906      	ldr	r1, [pc, #24]	; (8003794 <HAL_I2C_Master_Receive+0x22c>)
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 fa76 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e11a      	b.n	80039c0 <HAL_I2C_Master_Receive+0x458>
 800378a:	bf00      	nop
 800378c:	00100002 	.word	0x00100002
 8003790:	ffff0000 	.word	0xffff0000
 8003794:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800380c:	e0c4      	b.n	8003998 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	2200      	movs	r2, #0
 8003816:	496c      	ldr	r1, [pc, #432]	; (80039c8 <HAL_I2C_Master_Receive+0x460>)
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 fa27 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0cb      	b.n	80039c0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003836:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003870:	2200      	movs	r2, #0
 8003872:	4955      	ldr	r1, [pc, #340]	; (80039c8 <HAL_I2C_Master_Receive+0x460>)
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f9f9 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e09d      	b.n	80039c0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003892:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038f8:	e04e      	b.n	8003998 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 fb5e 	bl	8003fc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e058      	b.n	80039c0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b04      	cmp	r3, #4
 800394c:	d124      	bne.n	8003998 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	2b03      	cmp	r3, #3
 8003954:	d107      	bne.n	8003966 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003964:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399c:	2b00      	cmp	r3, #0
 800399e:	f47f aeb6 	bne.w	800370e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e000      	b.n	80039c0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80039be:	2302      	movs	r3, #2
  }
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3728      	adds	r7, #40	; 0x28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	00010004 	.word	0x00010004

080039cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	460b      	mov	r3, r1
 80039da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d006      	beq.n	80039f6 <I2C_MasterRequestWrite+0x2a>
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d003      	beq.n	80039f6 <I2C_MasterRequestWrite+0x2a>
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039f4:	d108      	bne.n	8003a08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e00b      	b.n	8003a20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	2b12      	cmp	r3, #18
 8003a0e:	d107      	bne.n	8003a20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f91d 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00d      	beq.n	8003a54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a46:	d103      	bne.n	8003a50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e035      	b.n	8003ac0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a5c:	d108      	bne.n	8003a70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a5e:	897b      	ldrh	r3, [r7, #10]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a6c:	611a      	str	r2, [r3, #16]
 8003a6e:	e01b      	b.n	8003aa8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a70:	897b      	ldrh	r3, [r7, #10]
 8003a72:	11db      	asrs	r3, r3, #7
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	f003 0306 	and.w	r3, r3, #6
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f063 030f 	orn	r3, r3, #15
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	490e      	ldr	r1, [pc, #56]	; (8003ac8 <I2C_MasterRequestWrite+0xfc>)
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f966 	bl	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e010      	b.n	8003ac0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a9e:	897b      	ldrh	r3, [r7, #10]
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	4907      	ldr	r1, [pc, #28]	; (8003acc <I2C_MasterRequestWrite+0x100>)
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f956 	bl	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	00010008 	.word	0x00010008
 8003acc:	00010002 	.word	0x00010002

08003ad0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	607a      	str	r2, [r7, #4]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	460b      	mov	r3, r1
 8003ade:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003af4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d006      	beq.n	8003b0a <I2C_MasterRequestRead+0x3a>
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d003      	beq.n	8003b0a <I2C_MasterRequestRead+0x3a>
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b08:	d108      	bne.n	8003b1c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e00b      	b.n	8003b34 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b20:	2b11      	cmp	r3, #17
 8003b22:	d107      	bne.n	8003b34 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f893 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00d      	beq.n	8003b68 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5a:	d103      	bne.n	8003b64 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e079      	b.n	8003c5c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b70:	d108      	bne.n	8003b84 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b72:	897b      	ldrh	r3, [r7, #10]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	611a      	str	r2, [r3, #16]
 8003b82:	e05f      	b.n	8003c44 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b84:	897b      	ldrh	r3, [r7, #10]
 8003b86:	11db      	asrs	r3, r3, #7
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f003 0306 	and.w	r3, r3, #6
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f063 030f 	orn	r3, r3, #15
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4930      	ldr	r1, [pc, #192]	; (8003c64 <I2C_MasterRequestRead+0x194>)
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f8dc 	bl	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e054      	b.n	8003c5c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	4929      	ldr	r1, [pc, #164]	; (8003c68 <I2C_MasterRequestRead+0x198>)
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f8cc 	bl	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e044      	b.n	8003c5c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f831 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00d      	beq.n	8003c2c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1e:	d103      	bne.n	8003c28 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e017      	b.n	8003c5c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003c2c:	897b      	ldrh	r3, [r7, #10]
 8003c2e:	11db      	asrs	r3, r3, #7
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	f003 0306 	and.w	r3, r3, #6
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f063 030e 	orn	r3, r3, #14
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	4907      	ldr	r1, [pc, #28]	; (8003c68 <I2C_MasterRequestRead+0x198>)
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f888 	bl	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	00010008 	.word	0x00010008
 8003c68:	00010002 	.word	0x00010002

08003c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c7c:	e048      	b.n	8003d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c84:	d044      	beq.n	8003d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c86:	f7fe fb25 	bl	80022d4 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d302      	bcc.n	8003c9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d139      	bne.n	8003d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	0c1b      	lsrs	r3, r3, #16
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d10d      	bne.n	8003cc2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	43da      	mvns	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	bf0c      	ite	eq
 8003cb8:	2301      	moveq	r3, #1
 8003cba:	2300      	movne	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	e00c      	b.n	8003cdc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	43da      	mvns	r2, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	bf0c      	ite	eq
 8003cd4:	2301      	moveq	r3, #1
 8003cd6:	2300      	movne	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d116      	bne.n	8003d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e023      	b.n	8003d58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	0c1b      	lsrs	r3, r3, #16
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d10d      	bne.n	8003d36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	43da      	mvns	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4013      	ands	r3, r2
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	bf0c      	ite	eq
 8003d2c:	2301      	moveq	r3, #1
 8003d2e:	2300      	movne	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	e00c      	b.n	8003d50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	43da      	mvns	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4013      	ands	r3, r2
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d093      	beq.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d6e:	e071      	b.n	8003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7e:	d123      	bne.n	8003dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	f043 0204 	orr.w	r2, r3, #4
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e067      	b.n	8003e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dce:	d041      	beq.n	8003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd0:	f7fe fa80 	bl	80022d4 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d302      	bcc.n	8003de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d136      	bne.n	8003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	0c1b      	lsrs	r3, r3, #16
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d10c      	bne.n	8003e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	43da      	mvns	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bf14      	ite	ne
 8003e02:	2301      	movne	r3, #1
 8003e04:	2300      	moveq	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	e00b      	b.n	8003e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	43da      	mvns	r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	4013      	ands	r3, r2
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf14      	ite	ne
 8003e1c:	2301      	movne	r3, #1
 8003e1e:	2300      	moveq	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d016      	beq.n	8003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	f043 0220 	orr.w	r2, r3, #32
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e021      	b.n	8003e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	0c1b      	lsrs	r3, r3, #16
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d10c      	bne.n	8003e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	43da      	mvns	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bf14      	ite	ne
 8003e70:	2301      	movne	r3, #1
 8003e72:	2300      	moveq	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e00b      	b.n	8003e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	43da      	mvns	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4013      	ands	r3, r2
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bf14      	ite	ne
 8003e8a:	2301      	movne	r3, #1
 8003e8c:	2300      	moveq	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f47f af6d 	bne.w	8003d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eac:	e034      	b.n	8003f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f8e3 	bl	800407a <I2C_IsAcknowledgeFailed>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e034      	b.n	8003f28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ec4:	d028      	beq.n	8003f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec6:	f7fe fa05 	bl	80022d4 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d302      	bcc.n	8003edc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d11d      	bne.n	8003f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee6:	2b80      	cmp	r3, #128	; 0x80
 8003ee8:	d016      	beq.n	8003f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	f043 0220 	orr.w	r2, r3, #32
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e007      	b.n	8003f28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f22:	2b80      	cmp	r3, #128	; 0x80
 8003f24:	d1c3      	bne.n	8003eae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f3c:	e034      	b.n	8003fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 f89b 	bl	800407a <I2C_IsAcknowledgeFailed>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e034      	b.n	8003fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f54:	d028      	beq.n	8003fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f56:	f7fe f9bd 	bl	80022d4 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d302      	bcc.n	8003f6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d11d      	bne.n	8003fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d016      	beq.n	8003fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	f043 0220 	orr.w	r2, r3, #32
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e007      	b.n	8003fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d1c3      	bne.n	8003f3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fcc:	e049      	b.n	8004062 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b10      	cmp	r3, #16
 8003fda:	d119      	bne.n	8004010 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0210 	mvn.w	r2, #16
 8003fe4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e030      	b.n	8004072 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004010:	f7fe f960 	bl	80022d4 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	429a      	cmp	r2, r3
 800401e:	d302      	bcc.n	8004026 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d11d      	bne.n	8004062 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004030:	2b40      	cmp	r3, #64	; 0x40
 8004032:	d016      	beq.n	8004062 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f043 0220 	orr.w	r2, r3, #32
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e007      	b.n	8004072 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d1ae      	bne.n	8003fce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004090:	d11b      	bne.n	80040ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800409a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f043 0204 	orr.w	r2, r3, #4
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	4b20      	ldr	r3, [pc, #128]	; (8004168 <HAL_PWREx_EnableOverDrive+0x90>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	4a1f      	ldr	r2, [pc, #124]	; (8004168 <HAL_PWREx_EnableOverDrive+0x90>)
 80040ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f0:	6413      	str	r3, [r2, #64]	; 0x40
 80040f2:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <HAL_PWREx_EnableOverDrive+0x90>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040fe:	4b1b      	ldr	r3, [pc, #108]	; (800416c <HAL_PWREx_EnableOverDrive+0x94>)
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004104:	f7fe f8e6 	bl	80022d4 <HAL_GetTick>
 8004108:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800410a:	e009      	b.n	8004120 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800410c:	f7fe f8e2 	bl	80022d4 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800411a:	d901      	bls.n	8004120 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e01f      	b.n	8004160 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004120:	4b13      	ldr	r3, [pc, #76]	; (8004170 <HAL_PWREx_EnableOverDrive+0x98>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412c:	d1ee      	bne.n	800410c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800412e:	4b11      	ldr	r3, [pc, #68]	; (8004174 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004130:	2201      	movs	r2, #1
 8004132:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004134:	f7fe f8ce 	bl	80022d4 <HAL_GetTick>
 8004138:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800413a:	e009      	b.n	8004150 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800413c:	f7fe f8ca 	bl	80022d4 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800414a:	d901      	bls.n	8004150 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e007      	b.n	8004160 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <HAL_PWREx_EnableOverDrive+0x98>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800415c:	d1ee      	bne.n	800413c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40023800 	.word	0x40023800
 800416c:	420e0040 	.word	0x420e0040
 8004170:	40007000 	.word	0x40007000
 8004174:	420e0044 	.word	0x420e0044

08004178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0cc      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800418c:	4b68      	ldr	r3, [pc, #416]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d90c      	bls.n	80041b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419a:	4b65      	ldr	r3, [pc, #404]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b63      	ldr	r3, [pc, #396]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0b8      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d020      	beq.n	8004202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041cc:	4b59      	ldr	r3, [pc, #356]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	4a58      	ldr	r2, [pc, #352]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041e4:	4b53      	ldr	r3, [pc, #332]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	4a52      	ldr	r2, [pc, #328]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f0:	4b50      	ldr	r3, [pc, #320]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	494d      	ldr	r1, [pc, #308]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d044      	beq.n	8004298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d107      	bne.n	8004226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004216:	4b47      	ldr	r3, [pc, #284]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d119      	bne.n	8004256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e07f      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d003      	beq.n	8004236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004232:	2b03      	cmp	r3, #3
 8004234:	d107      	bne.n	8004246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004236:	4b3f      	ldr	r3, [pc, #252]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d109      	bne.n	8004256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e06f      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004246:	4b3b      	ldr	r3, [pc, #236]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e067      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004256:	4b37      	ldr	r3, [pc, #220]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f023 0203 	bic.w	r2, r3, #3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4934      	ldr	r1, [pc, #208]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	4313      	orrs	r3, r2
 8004266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004268:	f7fe f834 	bl	80022d4 <HAL_GetTick>
 800426c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426e:	e00a      	b.n	8004286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004270:	f7fe f830 	bl	80022d4 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f241 3288 	movw	r2, #5000	; 0x1388
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e04f      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004286:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 020c 	and.w	r2, r3, #12
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	429a      	cmp	r2, r3
 8004296:	d1eb      	bne.n	8004270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004298:	4b25      	ldr	r3, [pc, #148]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d20c      	bcs.n	80042c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a6:	4b22      	ldr	r3, [pc, #136]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b20      	ldr	r3, [pc, #128]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e032      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042cc:	4b19      	ldr	r3, [pc, #100]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4916      	ldr	r1, [pc, #88]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ea:	4b12      	ldr	r3, [pc, #72]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	490e      	ldr	r1, [pc, #56]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042fe:	f000 fb7f 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 8004302:	4602      	mov	r2, r0
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	490a      	ldr	r1, [pc, #40]	; (8004338 <HAL_RCC_ClockConfig+0x1c0>)
 8004310:	5ccb      	ldrb	r3, [r1, r3]
 8004312:	fa22 f303 	lsr.w	r3, r2, r3
 8004316:	4a09      	ldr	r2, [pc, #36]	; (800433c <HAL_RCC_ClockConfig+0x1c4>)
 8004318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800431a:	4b09      	ldr	r3, [pc, #36]	; (8004340 <HAL_RCC_ClockConfig+0x1c8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7fd ff94 	bl	800224c <HAL_InitTick>

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40023c00 	.word	0x40023c00
 8004334:	40023800 	.word	0x40023800
 8004338:	0800d128 	.word	0x0800d128
 800433c:	20000028 	.word	0x20000028
 8004340:	2000002c 	.word	0x2000002c

08004344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004348:	4b03      	ldr	r3, [pc, #12]	; (8004358 <HAL_RCC_GetHCLKFreq+0x14>)
 800434a:	681b      	ldr	r3, [r3, #0]
}
 800434c:	4618      	mov	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	20000028 	.word	0x20000028

0800435c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004360:	f7ff fff0 	bl	8004344 <HAL_RCC_GetHCLKFreq>
 8004364:	4602      	mov	r2, r0
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	0a9b      	lsrs	r3, r3, #10
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	4903      	ldr	r1, [pc, #12]	; (8004380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004372:	5ccb      	ldrb	r3, [r1, r3]
 8004374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004378:	4618      	mov	r0, r3
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40023800 	.word	0x40023800
 8004380:	0800d138 	.word	0x0800d138

08004384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004388:	f7ff ffdc 	bl	8004344 <HAL_RCC_GetHCLKFreq>
 800438c:	4602      	mov	r2, r0
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	0b5b      	lsrs	r3, r3, #13
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	4903      	ldr	r1, [pc, #12]	; (80043a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800439a:	5ccb      	ldrb	r3, [r1, r3]
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40023800 	.word	0x40023800
 80043a8:	0800d138 	.word	0x0800d138

080043ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08c      	sub	sp, #48	; 0x30
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d010      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80043e4:	4b6f      	ldr	r3, [pc, #444]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ea:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f2:	496c      	ldr	r1, [pc, #432]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004402:	2301      	movs	r3, #1
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d010      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004412:	4b64      	ldr	r3, [pc, #400]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004418:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004420:	4960      	ldr	r1, [pc, #384]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004430:	2301      	movs	r3, #1
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d017      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004440:	4b58      	ldr	r3, [pc, #352]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004446:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	4955      	ldr	r1, [pc, #340]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445e:	d101      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004460:	2301      	movs	r3, #1
 8004462:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800446c:	2301      	movs	r3, #1
 800446e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d017      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800447c:	4b49      	ldr	r3, [pc, #292]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800447e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004482:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448a:	4946      	ldr	r1, [pc, #280]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800449a:	d101      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800449c:	2301      	movs	r3, #1
 800449e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80044a8:	2301      	movs	r3, #1
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 808a 	beq.w	80045ce <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	4b39      	ldr	r3, [pc, #228]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	4a38      	ldr	r2, [pc, #224]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ca:	4b36      	ldr	r3, [pc, #216]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044d6:	4b34      	ldr	r3, [pc, #208]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a33      	ldr	r2, [pc, #204]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80044dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044e2:	f7fd fef7 	bl	80022d4 <HAL_GetTick>
 80044e6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044e8:	e008      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044ea:	f7fd fef3 	bl	80022d4 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e278      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044fc:	4b2a      	ldr	r3, [pc, #168]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f0      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004508:	4b26      	ldr	r3, [pc, #152]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800450a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004510:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d02f      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004520:	6a3a      	ldr	r2, [r7, #32]
 8004522:	429a      	cmp	r2, r3
 8004524:	d028      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004526:	4b1f      	ldr	r3, [pc, #124]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004530:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004532:	2201      	movs	r2, #1
 8004534:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004536:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800453c:	4a19      	ldr	r2, [pc, #100]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004542:	4b18      	ldr	r3, [pc, #96]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b01      	cmp	r3, #1
 800454c:	d114      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800454e:	f7fd fec1 	bl	80022d4 <HAL_GetTick>
 8004552:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004554:	e00a      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004556:	f7fd febd 	bl	80022d4 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	f241 3288 	movw	r2, #5000	; 0x1388
 8004564:	4293      	cmp	r3, r2
 8004566:	d901      	bls.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e240      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456c:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0ee      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004580:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004584:	d114      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004586:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459a:	4902      	ldr	r1, [pc, #8]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800459c:	4313      	orrs	r3, r2
 800459e:	608b      	str	r3, [r1, #8]
 80045a0:	e00c      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80045a2:	bf00      	nop
 80045a4:	40023800 	.word	0x40023800
 80045a8:	40007000 	.word	0x40007000
 80045ac:	42470e40 	.word	0x42470e40
 80045b0:	4b4a      	ldr	r3, [pc, #296]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4a49      	ldr	r2, [pc, #292]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045ba:	6093      	str	r3, [r2, #8]
 80045bc:	4b47      	ldr	r3, [pc, #284]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c8:	4944      	ldr	r1, [pc, #272]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d004      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80045e0:	4b3f      	ldr	r3, [pc, #252]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80045e2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80045f0:	4b3a      	ldr	r3, [pc, #232]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fe:	4937      	ldr	r1, [pc, #220]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004612:	4b32      	ldr	r3, [pc, #200]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004618:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004620:	492e      	ldr	r1, [pc, #184]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d011      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004634:	4b29      	ldr	r3, [pc, #164]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800463a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004642:	4926      	ldr	r1, [pc, #152]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004652:	d101      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004654:	2301      	movs	r3, #1
 8004656:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004664:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800466a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004672:	491a      	ldr	r1, [pc, #104]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004682:	2b00      	cmp	r3, #0
 8004684:	d011      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004686:	4b15      	ldr	r3, [pc, #84]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800468c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004694:	4911      	ldr	r1, [pc, #68]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046a4:	d101      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80046a6:	2301      	movs	r3, #1
 80046a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80046aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d005      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b8:	f040 80ff 	bne.w	80048ba <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046bc:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046c2:	f7fd fe07 	bl	80022d4 <HAL_GetTick>
 80046c6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046c8:	e00e      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046ca:	f7fd fe03 	bl	80022d4 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d907      	bls.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e188      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 80046dc:	40023800 	.word	0x40023800
 80046e0:	424711e0 	.word	0x424711e0
 80046e4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046e8:	4b7e      	ldr	r3, [pc, #504]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1ea      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	2b00      	cmp	r3, #0
 8004706:	d009      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004710:	2b00      	cmp	r3, #0
 8004712:	d028      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004718:	2b00      	cmp	r3, #0
 800471a:	d124      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800471c:	4b71      	ldr	r3, [pc, #452]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800471e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004722:	0c1b      	lsrs	r3, r3, #16
 8004724:	f003 0303 	and.w	r3, r3, #3
 8004728:	3301      	adds	r3, #1
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800472e:	4b6d      	ldr	r3, [pc, #436]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004734:	0e1b      	lsrs	r3, r3, #24
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	019b      	lsls	r3, r3, #6
 8004746:	431a      	orrs	r2, r3
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	085b      	lsrs	r3, r3, #1
 800474c:	3b01      	subs	r3, #1
 800474e:	041b      	lsls	r3, r3, #16
 8004750:	431a      	orrs	r2, r3
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	061b      	lsls	r3, r3, #24
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	071b      	lsls	r3, r3, #28
 800475e:	4961      	ldr	r1, [pc, #388]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	2b00      	cmp	r3, #0
 8004770:	d004      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800477a:	d00a      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004784:	2b00      	cmp	r3, #0
 8004786:	d035      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004790:	d130      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004792:	4b54      	ldr	r3, [pc, #336]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004798:	0c1b      	lsrs	r3, r3, #16
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	3301      	adds	r3, #1
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047a4:	4b4f      	ldr	r3, [pc, #316]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047aa:	0f1b      	lsrs	r3, r3, #28
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	019b      	lsls	r3, r3, #6
 80047bc:	431a      	orrs	r2, r3
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	085b      	lsrs	r3, r3, #1
 80047c2:	3b01      	subs	r3, #1
 80047c4:	041b      	lsls	r3, r3, #16
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	061b      	lsls	r3, r3, #24
 80047ce:	431a      	orrs	r2, r3
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	071b      	lsls	r3, r3, #28
 80047d4:	4943      	ldr	r1, [pc, #268]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047dc:	4b41      	ldr	r3, [pc, #260]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047e2:	f023 021f 	bic.w	r2, r3, #31
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	3b01      	subs	r3, #1
 80047ec:	493d      	ldr	r1, [pc, #244]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d029      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004808:	d124      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800480a:	4b36      	ldr	r3, [pc, #216]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800480c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004810:	0c1b      	lsrs	r3, r3, #16
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	3301      	adds	r3, #1
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800481c:	4b31      	ldr	r3, [pc, #196]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800481e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004822:	0f1b      	lsrs	r3, r3, #28
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	019b      	lsls	r3, r3, #6
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	085b      	lsrs	r3, r3, #1
 800483c:	3b01      	subs	r3, #1
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	431a      	orrs	r2, r3
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	061b      	lsls	r3, r3, #24
 8004846:	431a      	orrs	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	071b      	lsls	r3, r3, #28
 800484c:	4925      	ldr	r1, [pc, #148]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800485c:	2b00      	cmp	r3, #0
 800485e:	d016      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	019b      	lsls	r3, r3, #6
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	085b      	lsrs	r3, r3, #1
 8004872:	3b01      	subs	r3, #1
 8004874:	041b      	lsls	r3, r3, #16
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	061b      	lsls	r3, r3, #24
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	071b      	lsls	r3, r3, #28
 8004886:	4917      	ldr	r1, [pc, #92]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004888:	4313      	orrs	r3, r2
 800488a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800488e:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004890:	2201      	movs	r2, #1
 8004892:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004894:	f7fd fd1e 	bl	80022d4 <HAL_GetTick>
 8004898:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800489c:	f7fd fd1a 	bl	80022d4 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e09f      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048ae:	4b0d      	ldr	r3, [pc, #52]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	2b01      	cmp	r3, #1
 80048be:	f040 8095 	bne.w	80049ec <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048c2:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048c8:	f7fd fd04 	bl	80022d4 <HAL_GetTick>
 80048cc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048ce:	e00f      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80048d0:	f7fd fd00 	bl	80022d4 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d908      	bls.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e085      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 80048e2:	bf00      	nop
 80048e4:	40023800 	.word	0x40023800
 80048e8:	42470068 	.word	0x42470068
 80048ec:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048f0:	4b41      	ldr	r3, [pc, #260]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048fc:	d0e8      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800491a:	2b00      	cmp	r3, #0
 800491c:	d02b      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004922:	2b00      	cmp	r3, #0
 8004924:	d127      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004926:	4b34      	ldr	r3, [pc, #208]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492c:	0c1b      	lsrs	r3, r3, #16
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	3301      	adds	r3, #1
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699a      	ldr	r2, [r3, #24]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	019b      	lsls	r3, r3, #6
 8004942:	431a      	orrs	r2, r3
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	3b01      	subs	r3, #1
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	061b      	lsls	r3, r3, #24
 8004954:	4928      	ldr	r1, [pc, #160]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800495c:	4b26      	ldr	r3, [pc, #152]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800495e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004962:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496a:	3b01      	subs	r3, #1
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	4922      	ldr	r1, [pc, #136]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497e:	2b00      	cmp	r3, #0
 8004980:	d01d      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800498a:	d118      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800498c:	4b1a      	ldr	r3, [pc, #104]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004992:	0e1b      	lsrs	r3, r3, #24
 8004994:	f003 030f 	and.w	r3, r3, #15
 8004998:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	019b      	lsls	r3, r3, #6
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	085b      	lsrs	r3, r3, #1
 80049ac:	3b01      	subs	r3, #1
 80049ae:	041b      	lsls	r3, r3, #16
 80049b0:	431a      	orrs	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	061b      	lsls	r3, r3, #24
 80049b6:	4910      	ldr	r1, [pc, #64]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049be:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049c4:	f7fd fc86 	bl	80022d4 <HAL_GetTick>
 80049c8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80049cc:	f7fd fc82 	bl	80022d4 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e007      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049de:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049ea:	d1ef      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3730      	adds	r7, #48	; 0x30
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40023800 	.word	0x40023800
 80049fc:	42470070 	.word	0x42470070

08004a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a04:	b0ae      	sub	sp, #184	; 0xb8
 8004a06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a26:	4bcb      	ldr	r3, [pc, #812]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	2b0c      	cmp	r3, #12
 8004a30:	f200 8206 	bhi.w	8004e40 <HAL_RCC_GetSysClockFreq+0x440>
 8004a34:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3a:	bf00      	nop
 8004a3c:	08004a71 	.word	0x08004a71
 8004a40:	08004e41 	.word	0x08004e41
 8004a44:	08004e41 	.word	0x08004e41
 8004a48:	08004e41 	.word	0x08004e41
 8004a4c:	08004a79 	.word	0x08004a79
 8004a50:	08004e41 	.word	0x08004e41
 8004a54:	08004e41 	.word	0x08004e41
 8004a58:	08004e41 	.word	0x08004e41
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004e41 	.word	0x08004e41
 8004a64:	08004e41 	.word	0x08004e41
 8004a68:	08004e41 	.word	0x08004e41
 8004a6c:	08004c71 	.word	0x08004c71
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a70:	4bb9      	ldr	r3, [pc, #740]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x358>)
 8004a72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004a76:	e1e7      	b.n	8004e48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a78:	4bb8      	ldr	r3, [pc, #736]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004a7e:	e1e3      	b.n	8004e48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a80:	4bb4      	ldr	r3, [pc, #720]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a8c:	4bb1      	ldr	r3, [pc, #708]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d071      	beq.n	8004b7c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a98:	4bae      	ldr	r3, [pc, #696]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	099b      	lsrs	r3, r3, #6
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004aa4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004aa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004aba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004abe:	4622      	mov	r2, r4
 8004ac0:	462b      	mov	r3, r5
 8004ac2:	f04f 0000 	mov.w	r0, #0
 8004ac6:	f04f 0100 	mov.w	r1, #0
 8004aca:	0159      	lsls	r1, r3, #5
 8004acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ad0:	0150      	lsls	r0, r2, #5
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	1a51      	subs	r1, r2, r1
 8004ada:	6439      	str	r1, [r7, #64]	; 0x40
 8004adc:	4629      	mov	r1, r5
 8004ade:	eb63 0301 	sbc.w	r3, r3, r1
 8004ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004af0:	4649      	mov	r1, r9
 8004af2:	018b      	lsls	r3, r1, #6
 8004af4:	4641      	mov	r1, r8
 8004af6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004afa:	4641      	mov	r1, r8
 8004afc:	018a      	lsls	r2, r1, #6
 8004afe:	4641      	mov	r1, r8
 8004b00:	1a51      	subs	r1, r2, r1
 8004b02:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b04:	4649      	mov	r1, r9
 8004b06:	eb63 0301 	sbc.w	r3, r3, r1
 8004b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004b18:	4649      	mov	r1, r9
 8004b1a:	00cb      	lsls	r3, r1, #3
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b22:	4641      	mov	r1, r8
 8004b24:	00ca      	lsls	r2, r1, #3
 8004b26:	4610      	mov	r0, r2
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4622      	mov	r2, r4
 8004b2e:	189b      	adds	r3, r3, r2
 8004b30:	633b      	str	r3, [r7, #48]	; 0x30
 8004b32:	462b      	mov	r3, r5
 8004b34:	460a      	mov	r2, r1
 8004b36:	eb42 0303 	adc.w	r3, r2, r3
 8004b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b48:	4629      	mov	r1, r5
 8004b4a:	024b      	lsls	r3, r1, #9
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b52:	4621      	mov	r1, r4
 8004b54:	024a      	lsls	r2, r1, #9
 8004b56:	4610      	mov	r0, r2
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b68:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004b6c:	f7fc f8bc 	bl	8000ce8 <__aeabi_uldivmod>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4613      	mov	r3, r2
 8004b76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b7a:	e067      	b.n	8004c4c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b7c:	4b75      	ldr	r3, [pc, #468]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	099b      	lsrs	r3, r3, #6
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b88:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004b8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b94:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b96:	2300      	movs	r3, #0
 8004b98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b9a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	462b      	mov	r3, r5
 8004ba2:	f04f 0000 	mov.w	r0, #0
 8004ba6:	f04f 0100 	mov.w	r1, #0
 8004baa:	0159      	lsls	r1, r3, #5
 8004bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bb0:	0150      	lsls	r0, r2, #5
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	1a51      	subs	r1, r2, r1
 8004bba:	62b9      	str	r1, [r7, #40]	; 0x28
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004bd0:	4649      	mov	r1, r9
 8004bd2:	018b      	lsls	r3, r1, #6
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bda:	4641      	mov	r1, r8
 8004bdc:	018a      	lsls	r2, r1, #6
 8004bde:	4641      	mov	r1, r8
 8004be0:	ebb2 0a01 	subs.w	sl, r2, r1
 8004be4:	4649      	mov	r1, r9
 8004be6:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bf6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bfe:	4692      	mov	sl, r2
 8004c00:	469b      	mov	fp, r3
 8004c02:	4623      	mov	r3, r4
 8004c04:	eb1a 0303 	adds.w	r3, sl, r3
 8004c08:	623b      	str	r3, [r7, #32]
 8004c0a:	462b      	mov	r3, r5
 8004c0c:	eb4b 0303 	adc.w	r3, fp, r3
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004c1e:	4629      	mov	r1, r5
 8004c20:	028b      	lsls	r3, r1, #10
 8004c22:	4621      	mov	r1, r4
 8004c24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c28:	4621      	mov	r1, r4
 8004c2a:	028a      	lsls	r2, r1, #10
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	4619      	mov	r1, r3
 8004c30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c34:	2200      	movs	r2, #0
 8004c36:	673b      	str	r3, [r7, #112]	; 0x70
 8004c38:	677a      	str	r2, [r7, #116]	; 0x74
 8004c3a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004c3e:	f7fc f853 	bl	8000ce8 <__aeabi_uldivmod>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	4613      	mov	r3, r2
 8004c48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c4c:	4b41      	ldr	r3, [pc, #260]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	0c1b      	lsrs	r3, r3, #16
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	3301      	adds	r3, #1
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004c5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004c6e:	e0eb      	b.n	8004e48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c70:	4b38      	ldr	r3, [pc, #224]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c7c:	4b35      	ldr	r3, [pc, #212]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d06b      	beq.n	8004d60 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c88:	4b32      	ldr	r3, [pc, #200]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	099b      	lsrs	r3, r3, #6
 8004c8e:	2200      	movs	r2, #0
 8004c90:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	667b      	str	r3, [r7, #100]	; 0x64
 8004ca0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004ca4:	4622      	mov	r2, r4
 8004ca6:	462b      	mov	r3, r5
 8004ca8:	f04f 0000 	mov.w	r0, #0
 8004cac:	f04f 0100 	mov.w	r1, #0
 8004cb0:	0159      	lsls	r1, r3, #5
 8004cb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cb6:	0150      	lsls	r0, r2, #5
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	1a51      	subs	r1, r2, r1
 8004cc0:	61b9      	str	r1, [r7, #24]
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	eb63 0301 	sbc.w	r3, r3, r1
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004cd6:	4659      	mov	r1, fp
 8004cd8:	018b      	lsls	r3, r1, #6
 8004cda:	4651      	mov	r1, sl
 8004cdc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ce0:	4651      	mov	r1, sl
 8004ce2:	018a      	lsls	r2, r1, #6
 8004ce4:	4651      	mov	r1, sl
 8004ce6:	ebb2 0801 	subs.w	r8, r2, r1
 8004cea:	4659      	mov	r1, fp
 8004cec:	eb63 0901 	sbc.w	r9, r3, r1
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cfc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d04:	4690      	mov	r8, r2
 8004d06:	4699      	mov	r9, r3
 8004d08:	4623      	mov	r3, r4
 8004d0a:	eb18 0303 	adds.w	r3, r8, r3
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	462b      	mov	r3, r5
 8004d12:	eb49 0303 	adc.w	r3, r9, r3
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004d24:	4629      	mov	r1, r5
 8004d26:	024b      	lsls	r3, r1, #9
 8004d28:	4621      	mov	r1, r4
 8004d2a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d2e:	4621      	mov	r1, r4
 8004d30:	024a      	lsls	r2, r1, #9
 8004d32:	4610      	mov	r0, r2
 8004d34:	4619      	mov	r1, r3
 8004d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d3e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004d40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d44:	f7fb ffd0 	bl	8000ce8 <__aeabi_uldivmod>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d52:	e065      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0x420>
 8004d54:	40023800 	.word	0x40023800
 8004d58:	00f42400 	.word	0x00f42400
 8004d5c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d60:	4b3d      	ldr	r3, [pc, #244]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x458>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	099b      	lsrs	r3, r3, #6
 8004d66:	2200      	movs	r2, #0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d70:	653b      	str	r3, [r7, #80]	; 0x50
 8004d72:	2300      	movs	r3, #0
 8004d74:	657b      	str	r3, [r7, #84]	; 0x54
 8004d76:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004d7a:	4642      	mov	r2, r8
 8004d7c:	464b      	mov	r3, r9
 8004d7e:	f04f 0000 	mov.w	r0, #0
 8004d82:	f04f 0100 	mov.w	r1, #0
 8004d86:	0159      	lsls	r1, r3, #5
 8004d88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d8c:	0150      	lsls	r0, r2, #5
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4641      	mov	r1, r8
 8004d94:	1a51      	subs	r1, r2, r1
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	4649      	mov	r1, r9
 8004d9a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004dac:	4659      	mov	r1, fp
 8004dae:	018b      	lsls	r3, r1, #6
 8004db0:	4651      	mov	r1, sl
 8004db2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004db6:	4651      	mov	r1, sl
 8004db8:	018a      	lsls	r2, r1, #6
 8004dba:	4651      	mov	r1, sl
 8004dbc:	1a54      	subs	r4, r2, r1
 8004dbe:	4659      	mov	r1, fp
 8004dc0:	eb63 0501 	sbc.w	r5, r3, r1
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	00eb      	lsls	r3, r5, #3
 8004dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dd2:	00e2      	lsls	r2, r4, #3
 8004dd4:	4614      	mov	r4, r2
 8004dd6:	461d      	mov	r5, r3
 8004dd8:	4643      	mov	r3, r8
 8004dda:	18e3      	adds	r3, r4, r3
 8004ddc:	603b      	str	r3, [r7, #0]
 8004dde:	464b      	mov	r3, r9
 8004de0:	eb45 0303 	adc.w	r3, r5, r3
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004df2:	4629      	mov	r1, r5
 8004df4:	028b      	lsls	r3, r1, #10
 8004df6:	4621      	mov	r1, r4
 8004df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	028a      	lsls	r2, r1, #10
 8004e00:	4610      	mov	r0, r2
 8004e02:	4619      	mov	r1, r3
 8004e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e08:	2200      	movs	r2, #0
 8004e0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e0c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004e0e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e12:	f7fb ff69 	bl	8000ce8 <__aeabi_uldivmod>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e20:	4b0d      	ldr	r3, [pc, #52]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x458>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	0f1b      	lsrs	r3, r3, #28
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004e2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004e3e:	e003      	b.n	8004e48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e40:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004e42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004e46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	37b8      	adds	r7, #184	; 0xb8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e56:	bf00      	nop
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	00f42400 	.word	0x00f42400

08004e60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e28d      	b.n	800538e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 8083 	beq.w	8004f86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e80:	4b94      	ldr	r3, [pc, #592]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 030c 	and.w	r3, r3, #12
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d019      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e8c:	4b91      	ldr	r3, [pc, #580]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d106      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e98:	4b8e      	ldr	r3, [pc, #568]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ea4:	d00c      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ea6:	4b8b      	ldr	r3, [pc, #556]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004eae:	2b0c      	cmp	r3, #12
 8004eb0:	d112      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eb2:	4b88      	ldr	r3, [pc, #544]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ebe:	d10b      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec0:	4b84      	ldr	r3, [pc, #528]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d05b      	beq.n	8004f84 <HAL_RCC_OscConfig+0x124>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d157      	bne.n	8004f84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e25a      	b.n	800538e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee0:	d106      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x90>
 8004ee2:	4b7c      	ldr	r3, [pc, #496]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a7b      	ldr	r2, [pc, #492]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e01d      	b.n	8004f2c <HAL_RCC_OscConfig+0xcc>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCC_OscConfig+0xb4>
 8004efa:	4b76      	ldr	r3, [pc, #472]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a75      	ldr	r2, [pc, #468]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	4b73      	ldr	r3, [pc, #460]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a72      	ldr	r2, [pc, #456]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	e00b      	b.n	8004f2c <HAL_RCC_OscConfig+0xcc>
 8004f14:	4b6f      	ldr	r3, [pc, #444]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a6e      	ldr	r2, [pc, #440]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	4b6c      	ldr	r3, [pc, #432]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a6b      	ldr	r2, [pc, #428]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d013      	beq.n	8004f5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f34:	f7fd f9ce 	bl	80022d4 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f3c:	f7fd f9ca 	bl	80022d4 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b64      	cmp	r3, #100	; 0x64
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e21f      	b.n	800538e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	4b61      	ldr	r3, [pc, #388]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCC_OscConfig+0xdc>
 8004f5a:	e014      	b.n	8004f86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5c:	f7fd f9ba 	bl	80022d4 <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f64:	f7fd f9b6 	bl	80022d4 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b64      	cmp	r3, #100	; 0x64
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e20b      	b.n	800538e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f76:	4b57      	ldr	r3, [pc, #348]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f0      	bne.n	8004f64 <HAL_RCC_OscConfig+0x104>
 8004f82:	e000      	b.n	8004f86 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d06f      	beq.n	8005072 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f92:	4b50      	ldr	r3, [pc, #320]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 030c 	and.w	r3, r3, #12
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d017      	beq.n	8004fce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f9e:	4b4d      	ldr	r3, [pc, #308]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	d105      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004faa:	4b4a      	ldr	r3, [pc, #296]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00b      	beq.n	8004fce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fb6:	4b47      	ldr	r3, [pc, #284]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fbe:	2b0c      	cmp	r3, #12
 8004fc0:	d11c      	bne.n	8004ffc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fc2:	4b44      	ldr	r3, [pc, #272]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d116      	bne.n	8004ffc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fce:	4b41      	ldr	r3, [pc, #260]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x186>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d001      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e1d3      	b.n	800538e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe6:	4b3b      	ldr	r3, [pc, #236]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4937      	ldr	r1, [pc, #220]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffa:	e03a      	b.n	8005072 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d020      	beq.n	8005046 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005004:	4b34      	ldr	r3, [pc, #208]	; (80050d8 <HAL_RCC_OscConfig+0x278>)
 8005006:	2201      	movs	r2, #1
 8005008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500a:	f7fd f963 	bl	80022d4 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005012:	f7fd f95f 	bl	80022d4 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e1b4      	b.n	800538e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005024:	4b2b      	ldr	r3, [pc, #172]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f0      	beq.n	8005012 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005030:	4b28      	ldr	r3, [pc, #160]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	4925      	ldr	r1, [pc, #148]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8005040:	4313      	orrs	r3, r2
 8005042:	600b      	str	r3, [r1, #0]
 8005044:	e015      	b.n	8005072 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005046:	4b24      	ldr	r3, [pc, #144]	; (80050d8 <HAL_RCC_OscConfig+0x278>)
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504c:	f7fd f942 	bl	80022d4 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005054:	f7fd f93e 	bl	80022d4 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e193      	b.n	800538e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005066:	4b1b      	ldr	r3, [pc, #108]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b00      	cmp	r3, #0
 800507c:	d036      	beq.n	80050ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d016      	beq.n	80050b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005086:	4b15      	ldr	r3, [pc, #84]	; (80050dc <HAL_RCC_OscConfig+0x27c>)
 8005088:	2201      	movs	r2, #1
 800508a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508c:	f7fd f922 	bl	80022d4 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005094:	f7fd f91e 	bl	80022d4 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e173      	b.n	800538e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a6:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <HAL_RCC_OscConfig+0x274>)
 80050a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0f0      	beq.n	8005094 <HAL_RCC_OscConfig+0x234>
 80050b2:	e01b      	b.n	80050ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b4:	4b09      	ldr	r3, [pc, #36]	; (80050dc <HAL_RCC_OscConfig+0x27c>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ba:	f7fd f90b 	bl	80022d4 <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c0:	e00e      	b.n	80050e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050c2:	f7fd f907 	bl	80022d4 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d907      	bls.n	80050e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e15c      	b.n	800538e <HAL_RCC_OscConfig+0x52e>
 80050d4:	40023800 	.word	0x40023800
 80050d8:	42470000 	.word	0x42470000
 80050dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e0:	4b8a      	ldr	r3, [pc, #552]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 80050e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1ea      	bne.n	80050c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 8097 	beq.w	8005228 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050fa:	2300      	movs	r3, #0
 80050fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050fe:	4b83      	ldr	r3, [pc, #524]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10f      	bne.n	800512a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800510a:	2300      	movs	r3, #0
 800510c:	60bb      	str	r3, [r7, #8]
 800510e:	4b7f      	ldr	r3, [pc, #508]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	4a7e      	ldr	r2, [pc, #504]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 8005114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005118:	6413      	str	r3, [r2, #64]	; 0x40
 800511a:	4b7c      	ldr	r3, [pc, #496]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005122:	60bb      	str	r3, [r7, #8]
 8005124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005126:	2301      	movs	r3, #1
 8005128:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512a:	4b79      	ldr	r3, [pc, #484]	; (8005310 <HAL_RCC_OscConfig+0x4b0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005132:	2b00      	cmp	r3, #0
 8005134:	d118      	bne.n	8005168 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005136:	4b76      	ldr	r3, [pc, #472]	; (8005310 <HAL_RCC_OscConfig+0x4b0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a75      	ldr	r2, [pc, #468]	; (8005310 <HAL_RCC_OscConfig+0x4b0>)
 800513c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005142:	f7fd f8c7 	bl	80022d4 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005148:	e008      	b.n	800515c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800514a:	f7fd f8c3 	bl	80022d4 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e118      	b.n	800538e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515c:	4b6c      	ldr	r3, [pc, #432]	; (8005310 <HAL_RCC_OscConfig+0x4b0>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0f0      	beq.n	800514a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d106      	bne.n	800517e <HAL_RCC_OscConfig+0x31e>
 8005170:	4b66      	ldr	r3, [pc, #408]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 8005172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005174:	4a65      	ldr	r2, [pc, #404]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 8005176:	f043 0301 	orr.w	r3, r3, #1
 800517a:	6713      	str	r3, [r2, #112]	; 0x70
 800517c:	e01c      	b.n	80051b8 <HAL_RCC_OscConfig+0x358>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	2b05      	cmp	r3, #5
 8005184:	d10c      	bne.n	80051a0 <HAL_RCC_OscConfig+0x340>
 8005186:	4b61      	ldr	r3, [pc, #388]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 8005188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518a:	4a60      	ldr	r2, [pc, #384]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 800518c:	f043 0304 	orr.w	r3, r3, #4
 8005190:	6713      	str	r3, [r2, #112]	; 0x70
 8005192:	4b5e      	ldr	r3, [pc, #376]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 8005194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005196:	4a5d      	ldr	r2, [pc, #372]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 8005198:	f043 0301 	orr.w	r3, r3, #1
 800519c:	6713      	str	r3, [r2, #112]	; 0x70
 800519e:	e00b      	b.n	80051b8 <HAL_RCC_OscConfig+0x358>
 80051a0:	4b5a      	ldr	r3, [pc, #360]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 80051a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a4:	4a59      	ldr	r2, [pc, #356]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 80051a6:	f023 0301 	bic.w	r3, r3, #1
 80051aa:	6713      	str	r3, [r2, #112]	; 0x70
 80051ac:	4b57      	ldr	r3, [pc, #348]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 80051ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b0:	4a56      	ldr	r2, [pc, #344]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 80051b2:	f023 0304 	bic.w	r3, r3, #4
 80051b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d015      	beq.n	80051ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c0:	f7fd f888 	bl	80022d4 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c6:	e00a      	b.n	80051de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c8:	f7fd f884 	bl	80022d4 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e0d7      	b.n	800538e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051de:	4b4b      	ldr	r3, [pc, #300]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 80051e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0ee      	beq.n	80051c8 <HAL_RCC_OscConfig+0x368>
 80051ea:	e014      	b.n	8005216 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ec:	f7fd f872 	bl	80022d4 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f2:	e00a      	b.n	800520a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051f4:	f7fd f86e 	bl	80022d4 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005202:	4293      	cmp	r3, r2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e0c1      	b.n	800538e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800520a:	4b40      	ldr	r3, [pc, #256]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 800520c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1ee      	bne.n	80051f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005216:	7dfb      	ldrb	r3, [r7, #23]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d105      	bne.n	8005228 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800521c:	4b3b      	ldr	r3, [pc, #236]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	4a3a      	ldr	r2, [pc, #232]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 8005222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005226:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 80ad 	beq.w	800538c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005232:	4b36      	ldr	r3, [pc, #216]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 030c 	and.w	r3, r3, #12
 800523a:	2b08      	cmp	r3, #8
 800523c:	d060      	beq.n	8005300 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d145      	bne.n	80052d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005246:	4b33      	ldr	r3, [pc, #204]	; (8005314 <HAL_RCC_OscConfig+0x4b4>)
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524c:	f7fd f842 	bl	80022d4 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005254:	f7fd f83e 	bl	80022d4 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e093      	b.n	800538e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005266:	4b29      	ldr	r3, [pc, #164]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f0      	bne.n	8005254 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69da      	ldr	r2, [r3, #28]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	019b      	lsls	r3, r3, #6
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005288:	085b      	lsrs	r3, r3, #1
 800528a:	3b01      	subs	r3, #1
 800528c:	041b      	lsls	r3, r3, #16
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	061b      	lsls	r3, r3, #24
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529c:	071b      	lsls	r3, r3, #28
 800529e:	491b      	ldr	r1, [pc, #108]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052a4:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <HAL_RCC_OscConfig+0x4b4>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052aa:	f7fd f813 	bl	80022d4 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052b2:	f7fd f80f 	bl	80022d4 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e064      	b.n	800538e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c4:	4b11      	ldr	r3, [pc, #68]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0f0      	beq.n	80052b2 <HAL_RCC_OscConfig+0x452>
 80052d0:	e05c      	b.n	800538c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d2:	4b10      	ldr	r3, [pc, #64]	; (8005314 <HAL_RCC_OscConfig+0x4b4>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7fc fffc 	bl	80022d4 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052e0:	f7fc fff8 	bl	80022d4 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e04d      	b.n	800538e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f2:	4b06      	ldr	r3, [pc, #24]	; (800530c <HAL_RCC_OscConfig+0x4ac>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f0      	bne.n	80052e0 <HAL_RCC_OscConfig+0x480>
 80052fe:	e045      	b.n	800538c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d107      	bne.n	8005318 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e040      	b.n	800538e <HAL_RCC_OscConfig+0x52e>
 800530c:	40023800 	.word	0x40023800
 8005310:	40007000 	.word	0x40007000
 8005314:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005318:	4b1f      	ldr	r3, [pc, #124]	; (8005398 <HAL_RCC_OscConfig+0x538>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d030      	beq.n	8005388 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005330:	429a      	cmp	r2, r3
 8005332:	d129      	bne.n	8005388 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533e:	429a      	cmp	r2, r3
 8005340:	d122      	bne.n	8005388 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005348:	4013      	ands	r3, r2
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800534e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005350:	4293      	cmp	r3, r2
 8005352:	d119      	bne.n	8005388 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535e:	085b      	lsrs	r3, r3, #1
 8005360:	3b01      	subs	r3, #1
 8005362:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005364:	429a      	cmp	r2, r3
 8005366:	d10f      	bne.n	8005388 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005374:	429a      	cmp	r2, r3
 8005376:	d107      	bne.n	8005388 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005384:	429a      	cmp	r2, r3
 8005386:	d001      	beq.n	800538c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40023800 	.word	0x40023800

0800539c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e073      	b.n	800549a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	7f5b      	ldrb	r3, [r3, #29]
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d105      	bne.n	80053c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fc faa4 	bl	8001910 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b10      	cmp	r3, #16
 80053da:	d055      	beq.n	8005488 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	22ca      	movs	r2, #202	; 0xca
 80053e2:	625a      	str	r2, [r3, #36]	; 0x24
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2253      	movs	r2, #83	; 0x53
 80053ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f99d 	bl	800572c <RTC_EnterInitMode>
 80053f2:	4603      	mov	r3, r0
 80053f4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d12c      	bne.n	8005456 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800540a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800540e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6899      	ldr	r1, [r3, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	68d2      	ldr	r2, [r2, #12]
 8005436:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6919      	ldr	r1, [r3, #16]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	041a      	lsls	r2, r3, #16
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f9a4 	bl	800579a <RTC_ExitInitMode>
 8005452:	4603      	mov	r3, r0
 8005454:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005456:	7bfb      	ldrb	r3, [r7, #15]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d110      	bne.n	800547e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800546a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	22ff      	movs	r2, #255	; 0xff
 8005484:	625a      	str	r2, [r3, #36]	; 0x24
 8005486:	e001      	b.n	800548c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005498:	7bfb      	ldrb	r3, [r7, #15]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80054a2:	b590      	push	{r4, r7, lr}
 80054a4:	b087      	sub	sp, #28
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	7f1b      	ldrb	r3, [r3, #28]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d101      	bne.n	80054be <HAL_RTC_SetTime+0x1c>
 80054ba:	2302      	movs	r3, #2
 80054bc:	e087      	b.n	80055ce <HAL_RTC_SetTime+0x12c>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2202      	movs	r2, #2
 80054c8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d126      	bne.n	800551e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d102      	bne.n	80054e4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2200      	movs	r2, #0
 80054e2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 f97b 	bl	80057e4 <RTC_ByteToBcd2>
 80054ee:	4603      	mov	r3, r0
 80054f0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	785b      	ldrb	r3, [r3, #1]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 f974 	bl	80057e4 <RTC_ByteToBcd2>
 80054fc:	4603      	mov	r3, r0
 80054fe:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005500:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	789b      	ldrb	r3, [r3, #2]
 8005506:	4618      	mov	r0, r3
 8005508:	f000 f96c 	bl	80057e4 <RTC_ByteToBcd2>
 800550c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800550e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	78db      	ldrb	r3, [r3, #3]
 8005516:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	e018      	b.n	8005550 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d102      	bne.n	8005532 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2200      	movs	r2, #0
 8005530:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	785b      	ldrb	r3, [r3, #1]
 800553c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800553e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005544:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	78db      	ldrb	r3, [r3, #3]
 800554a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	22ca      	movs	r2, #202	; 0xca
 8005556:	625a      	str	r2, [r3, #36]	; 0x24
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2253      	movs	r2, #83	; 0x53
 800555e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f8e3 	bl	800572c <RTC_EnterInitMode>
 8005566:	4603      	mov	r3, r0
 8005568:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800556a:	7cfb      	ldrb	r3, [r7, #19]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d120      	bne.n	80055b2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800557a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800557e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800558e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6899      	ldr	r1, [r3, #8]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	431a      	orrs	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 f8f6 	bl	800579a <RTC_ExitInitMode>
 80055ae:	4603      	mov	r3, r0
 80055b0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80055b2:	7cfb      	ldrb	r3, [r7, #19]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2201      	movs	r2, #1
 80055bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	22ff      	movs	r2, #255	; 0xff
 80055c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	771a      	strb	r2, [r3, #28]

  return status;
 80055cc:	7cfb      	ldrb	r3, [r7, #19]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd90      	pop	{r4, r7, pc}

080055d6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80055d6:	b590      	push	{r4, r7, lr}
 80055d8:	b087      	sub	sp, #28
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	7f1b      	ldrb	r3, [r3, #28]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_RTC_SetDate+0x1c>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e071      	b.n	80056d6 <HAL_RTC_SetDate+0x100>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2202      	movs	r2, #2
 80055fc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10e      	bne.n	8005622 <HAL_RTC_SetDate+0x4c>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	785b      	ldrb	r3, [r3, #1]
 8005608:	f003 0310 	and.w	r3, r3, #16
 800560c:	2b00      	cmp	r3, #0
 800560e:	d008      	beq.n	8005622 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	785b      	ldrb	r3, [r3, #1]
 8005614:	f023 0310 	bic.w	r3, r3, #16
 8005618:	b2db      	uxtb	r3, r3
 800561a:	330a      	adds	r3, #10
 800561c:	b2da      	uxtb	r2, r3
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d11c      	bne.n	8005662 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	78db      	ldrb	r3, [r3, #3]
 800562c:	4618      	mov	r0, r3
 800562e:	f000 f8d9 	bl	80057e4 <RTC_ByteToBcd2>
 8005632:	4603      	mov	r3, r0
 8005634:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	785b      	ldrb	r3, [r3, #1]
 800563a:	4618      	mov	r0, r3
 800563c:	f000 f8d2 	bl	80057e4 <RTC_ByteToBcd2>
 8005640:	4603      	mov	r3, r0
 8005642:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005644:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	789b      	ldrb	r3, [r3, #2]
 800564a:	4618      	mov	r0, r3
 800564c:	f000 f8ca 	bl	80057e4 <RTC_ByteToBcd2>
 8005650:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005652:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	e00e      	b.n	8005680 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	78db      	ldrb	r3, [r3, #3]
 8005666:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800566e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005674:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	22ca      	movs	r2, #202	; 0xca
 8005686:	625a      	str	r2, [r3, #36]	; 0x24
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2253      	movs	r2, #83	; 0x53
 800568e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 f84b 	bl	800572c <RTC_EnterInitMode>
 8005696:	4603      	mov	r3, r0
 8005698:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800569a:	7cfb      	ldrb	r3, [r7, #19]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10c      	bne.n	80056ba <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80056aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056ae:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f872 	bl	800579a <RTC_ExitInitMode>
 80056b6:	4603      	mov	r3, r0
 80056b8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80056ba:	7cfb      	ldrb	r3, [r7, #19]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d102      	bne.n	80056c6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2201      	movs	r2, #1
 80056c4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	22ff      	movs	r2, #255	; 0xff
 80056cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	771a      	strb	r2, [r3, #28]

  return status;
 80056d4:	7cfb      	ldrb	r3, [r7, #19]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	371c      	adds	r7, #28
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd90      	pop	{r4, r7, pc}
	...

080056e0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a0d      	ldr	r2, [pc, #52]	; (8005728 <HAL_RTC_WaitForSynchro+0x48>)
 80056f2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056f4:	f7fc fdee 	bl	80022d4 <HAL_GetTick>
 80056f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056fa:	e009      	b.n	8005710 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056fc:	f7fc fdea 	bl	80022d4 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800570a:	d901      	bls.n	8005710 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e007      	b.n	8005720 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0ee      	beq.n	80056fc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	00017f5f 	.word	0x00017f5f

0800572c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005746:	2b00      	cmp	r3, #0
 8005748:	d122      	bne.n	8005790 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005758:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800575a:	f7fc fdbb 	bl	80022d4 <HAL_GetTick>
 800575e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005760:	e00c      	b.n	800577c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005762:	f7fc fdb7 	bl	80022d4 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005770:	d904      	bls.n	800577c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2204      	movs	r2, #4
 8005776:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d102      	bne.n	8005790 <RTC_EnterInitMode+0x64>
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d1e8      	bne.n	8005762 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005790:	7bfb      	ldrb	r3, [r7, #15]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b084      	sub	sp, #16
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68da      	ldr	r2, [r3, #12]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057b4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 0320 	and.w	r3, r3, #32
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff ff8b 	bl	80056e0 <HAL_RTC_WaitForSynchro>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d004      	beq.n	80057da <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2204      	movs	r2, #4
 80057d4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80057da:	7bfb      	ldrb	r3, [r7, #15]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80057f2:	e005      	b.n	8005800 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3301      	adds	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	3b0a      	subs	r3, #10
 80057fe:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	2b09      	cmp	r3, #9
 8005804:	d8f6      	bhi.n	80057f4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	b2db      	uxtb	r3, r3
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	b2da      	uxtb	r2, r3
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	4313      	orrs	r3, r2
 8005812:	b2db      	uxtb	r3, r3
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3350      	adds	r3, #80	; 0x50
 8005836:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4413      	add	r3, r2
 8005840:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	601a      	str	r2, [r3, #0]
}
 8005848:	bf00      	nop
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3350      	adds	r3, #80	; 0x50
 8005868:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4413      	add	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e07b      	b.n	800598e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	2b00      	cmp	r3, #0
 800589c:	d108      	bne.n	80058b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058a6:	d009      	beq.n	80058bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	61da      	str	r2, [r3, #28]
 80058ae:	e005      	b.n	80058bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7fc f8ba 	bl	8001a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005940:	ea42 0103 	orr.w	r1, r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005948:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	0c1b      	lsrs	r3, r3, #16
 800595a:	f003 0104 	and.w	r1, r3, #4
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	f003 0210 	and.w	r2, r3, #16
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69da      	ldr	r2, [r3, #28]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800597c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b088      	sub	sp, #32
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	603b      	str	r3, [r7, #0]
 80059a2:	4613      	mov	r3, r2
 80059a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_SPI_Transmit+0x22>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e12d      	b.n	8005c14 <HAL_SPI_Transmit+0x27e>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059c0:	f7fc fc88 	bl	80022d4 <HAL_GetTick>
 80059c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d002      	beq.n	80059dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80059d6:	2302      	movs	r3, #2
 80059d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059da:	e116      	b.n	8005c0a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d002      	beq.n	80059e8 <HAL_SPI_Transmit+0x52>
 80059e2:	88fb      	ldrh	r3, [r7, #6]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d102      	bne.n	80059ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059ec:	e10d      	b.n	8005c0a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2203      	movs	r2, #3
 80059f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	88fa      	ldrh	r2, [r7, #6]
 8005a06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	88fa      	ldrh	r2, [r7, #6]
 8005a0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a34:	d10f      	bne.n	8005a56 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a60:	2b40      	cmp	r3, #64	; 0x40
 8005a62:	d007      	beq.n	8005a74 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a7c:	d14f      	bne.n	8005b1e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_SPI_Transmit+0xf6>
 8005a86:	8afb      	ldrh	r3, [r7, #22]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d142      	bne.n	8005b12 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a90:	881a      	ldrh	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9c:	1c9a      	adds	r2, r3, #2
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ab0:	e02f      	b.n	8005b12 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d112      	bne.n	8005ae6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac4:	881a      	ldrh	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad0:	1c9a      	adds	r2, r3, #2
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ae4:	e015      	b.n	8005b12 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ae6:	f7fc fbf5 	bl	80022d4 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d803      	bhi.n	8005afe <HAL_SPI_Transmit+0x168>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005afc:	d102      	bne.n	8005b04 <HAL_SPI_Transmit+0x16e>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d106      	bne.n	8005b12 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005b10:	e07b      	b.n	8005c0a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1ca      	bne.n	8005ab2 <HAL_SPI_Transmit+0x11c>
 8005b1c:	e050      	b.n	8005bc0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <HAL_SPI_Transmit+0x196>
 8005b26:	8afb      	ldrh	r3, [r7, #22]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d144      	bne.n	8005bb6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	330c      	adds	r3, #12
 8005b36:	7812      	ldrb	r2, [r2, #0]
 8005b38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b52:	e030      	b.n	8005bb6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d113      	bne.n	8005b8a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	330c      	adds	r3, #12
 8005b6c:	7812      	ldrb	r2, [r2, #0]
 8005b6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b88:	e015      	b.n	8005bb6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b8a:	f7fc fba3 	bl	80022d4 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d803      	bhi.n	8005ba2 <HAL_SPI_Transmit+0x20c>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ba0:	d102      	bne.n	8005ba8 <HAL_SPI_Transmit+0x212>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d106      	bne.n	8005bb6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005bb4:	e029      	b.n	8005c0a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1c9      	bne.n	8005b54 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 fbdf 	bl	8006388 <SPI_EndRxTxTransaction>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10a      	bne.n	8005bf4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bde:	2300      	movs	r3, #0
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	613b      	str	r3, [r7, #16]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	613b      	str	r3, [r7, #16]
 8005bf2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	77fb      	strb	r3, [r7, #31]
 8005c00:	e003      	b.n	8005c0a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c12:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3720      	adds	r7, #32
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af02      	add	r7, sp, #8
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d002      	beq.n	8005c42 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c40:	e0fb      	b.n	8005e3a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c4a:	d112      	bne.n	8005c72 <HAL_SPI_Receive+0x56>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10e      	bne.n	8005c72 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2204      	movs	r2, #4
 8005c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c5c:	88fa      	ldrh	r2, [r7, #6]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	4613      	mov	r3, r2
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	68b9      	ldr	r1, [r7, #8]
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 f8ef 	bl	8005e4c <HAL_SPI_TransmitReceive>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	e0e8      	b.n	8005e44 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_SPI_Receive+0x64>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e0e1      	b.n	8005e44 <HAL_SPI_Receive+0x228>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c88:	f7fc fb24 	bl	80022d4 <HAL_GetTick>
 8005c8c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <HAL_SPI_Receive+0x7e>
 8005c94:	88fb      	ldrh	r3, [r7, #6]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d102      	bne.n	8005ca0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c9e:	e0cc      	b.n	8005e3a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2204      	movs	r2, #4
 8005ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	88fa      	ldrh	r2, [r7, #6]
 8005cb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	88fa      	ldrh	r2, [r7, #6]
 8005cbe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ce6:	d10f      	bne.n	8005d08 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cf6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d06:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d12:	2b40      	cmp	r3, #64	; 0x40
 8005d14:	d007      	beq.n	8005d26 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d16a      	bne.n	8005e04 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d2e:	e032      	b.n	8005d96 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d115      	bne.n	8005d6a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f103 020c 	add.w	r2, r3, #12
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	7812      	ldrb	r2, [r2, #0]
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d68:	e015      	b.n	8005d96 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d6a:	f7fc fab3 	bl	80022d4 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d803      	bhi.n	8005d82 <HAL_SPI_Receive+0x166>
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d80:	d102      	bne.n	8005d88 <HAL_SPI_Receive+0x16c>
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d106      	bne.n	8005d96 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005d94:	e051      	b.n	8005e3a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1c7      	bne.n	8005d30 <HAL_SPI_Receive+0x114>
 8005da0:	e035      	b.n	8005e0e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d113      	bne.n	8005dd8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dba:	b292      	uxth	r2, r2
 8005dbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	1c9a      	adds	r2, r3, #2
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dd6:	e015      	b.n	8005e04 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dd8:	f7fc fa7c 	bl	80022d4 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d803      	bhi.n	8005df0 <HAL_SPI_Receive+0x1d4>
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dee:	d102      	bne.n	8005df6 <HAL_SPI_Receive+0x1da>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005e02:	e01a      	b.n	8005e3a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1c9      	bne.n	8005da2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	6839      	ldr	r1, [r7, #0]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 fa52 	bl	80062bc <SPI_EndRxTransaction>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2220      	movs	r2, #32
 8005e22:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	75fb      	strb	r3, [r7, #23]
 8005e30:	e003      	b.n	8005e3a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08c      	sub	sp, #48	; 0x30
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d101      	bne.n	8005e72 <HAL_SPI_TransmitReceive+0x26>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e198      	b.n	80061a4 <HAL_SPI_TransmitReceive+0x358>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e7a:	f7fc fa2b 	bl	80022d4 <HAL_GetTick>
 8005e7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e90:	887b      	ldrh	r3, [r7, #2]
 8005e92:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d00f      	beq.n	8005ebc <HAL_SPI_TransmitReceive+0x70>
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ea2:	d107      	bne.n	8005eb4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d103      	bne.n	8005eb4 <HAL_SPI_TransmitReceive+0x68>
 8005eac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	d003      	beq.n	8005ebc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005eba:	e16d      	b.n	8006198 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <HAL_SPI_TransmitReceive+0x82>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <HAL_SPI_TransmitReceive+0x82>
 8005ec8:	887b      	ldrh	r3, [r7, #2]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d103      	bne.n	8005ed6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ed4:	e160      	b.n	8006198 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d003      	beq.n	8005eea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2205      	movs	r2, #5
 8005ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	887a      	ldrh	r2, [r7, #2]
 8005efa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	887a      	ldrh	r2, [r7, #2]
 8005f00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	887a      	ldrh	r2, [r7, #2]
 8005f0c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	887a      	ldrh	r2, [r7, #2]
 8005f12:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2a:	2b40      	cmp	r3, #64	; 0x40
 8005f2c:	d007      	beq.n	8005f3e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f46:	d17c      	bne.n	8006042 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <HAL_SPI_TransmitReceive+0x10a>
 8005f50:	8b7b      	ldrh	r3, [r7, #26]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d16a      	bne.n	800602c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	881a      	ldrh	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	1c9a      	adds	r2, r3, #2
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f7a:	e057      	b.n	800602c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d11b      	bne.n	8005fc2 <HAL_SPI_TransmitReceive+0x176>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d016      	beq.n	8005fc2 <HAL_SPI_TransmitReceive+0x176>
 8005f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d113      	bne.n	8005fc2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9e:	881a      	ldrh	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	1c9a      	adds	r2, r3, #2
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d119      	bne.n	8006004 <HAL_SPI_TransmitReceive+0x1b8>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d014      	beq.n	8006004 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	b292      	uxth	r2, r2
 8005fe6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fec:	1c9a      	adds	r2, r3, #2
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006000:	2301      	movs	r3, #1
 8006002:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006004:	f7fc f966 	bl	80022d4 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006010:	429a      	cmp	r2, r3
 8006012:	d80b      	bhi.n	800602c <HAL_SPI_TransmitReceive+0x1e0>
 8006014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800601a:	d007      	beq.n	800602c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800602a:	e0b5      	b.n	8006198 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006030:	b29b      	uxth	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1a2      	bne.n	8005f7c <HAL_SPI_TransmitReceive+0x130>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800603a:	b29b      	uxth	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d19d      	bne.n	8005f7c <HAL_SPI_TransmitReceive+0x130>
 8006040:	e080      	b.n	8006144 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_SPI_TransmitReceive+0x204>
 800604a:	8b7b      	ldrh	r3, [r7, #26]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d16f      	bne.n	8006130 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	330c      	adds	r3, #12
 800605a:	7812      	ldrb	r2, [r2, #0]
 800605c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800606c:	b29b      	uxth	r3, r3
 800606e:	3b01      	subs	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006076:	e05b      	b.n	8006130 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b02      	cmp	r3, #2
 8006084:	d11c      	bne.n	80060c0 <HAL_SPI_TransmitReceive+0x274>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800608a:	b29b      	uxth	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d017      	beq.n	80060c0 <HAL_SPI_TransmitReceive+0x274>
 8006090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006092:	2b01      	cmp	r3, #1
 8006094:	d114      	bne.n	80060c0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	330c      	adds	r3, #12
 80060a0:	7812      	ldrb	r2, [r2, #0]
 80060a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d119      	bne.n	8006102 <HAL_SPI_TransmitReceive+0x2b6>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d014      	beq.n	8006102 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060fe:	2301      	movs	r3, #1
 8006100:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006102:	f7fc f8e7 	bl	80022d4 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800610e:	429a      	cmp	r2, r3
 8006110:	d803      	bhi.n	800611a <HAL_SPI_TransmitReceive+0x2ce>
 8006112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006118:	d102      	bne.n	8006120 <HAL_SPI_TransmitReceive+0x2d4>
 800611a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611c:	2b00      	cmp	r3, #0
 800611e:	d107      	bne.n	8006130 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800612e:	e033      	b.n	8006198 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d19e      	bne.n	8006078 <HAL_SPI_TransmitReceive+0x22c>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613e:	b29b      	uxth	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d199      	bne.n	8006078 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006146:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 f91d 	bl	8006388 <SPI_EndRxTxTransaction>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d006      	beq.n	8006162 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2220      	movs	r2, #32
 800615e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006160:	e01a      	b.n	8006198 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10a      	bne.n	8006180 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	617b      	str	r3, [r7, #20]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800618e:	e003      	b.n	8006198 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3730      	adds	r7, #48	; 0x30
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	603b      	str	r3, [r7, #0]
 80061b8:	4613      	mov	r3, r2
 80061ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061bc:	f7fc f88a 	bl	80022d4 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	1a9b      	subs	r3, r3, r2
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	4413      	add	r3, r2
 80061ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061cc:	f7fc f882 	bl	80022d4 <HAL_GetTick>
 80061d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061d2:	4b39      	ldr	r3, [pc, #228]	; (80062b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	015b      	lsls	r3, r3, #5
 80061d8:	0d1b      	lsrs	r3, r3, #20
 80061da:	69fa      	ldr	r2, [r7, #28]
 80061dc:	fb02 f303 	mul.w	r3, r2, r3
 80061e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061e2:	e054      	b.n	800628e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061ea:	d050      	beq.n	800628e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061ec:	f7fc f872 	bl	80022d4 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	69fa      	ldr	r2, [r7, #28]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d902      	bls.n	8006202 <SPI_WaitFlagStateUntilTimeout+0x56>
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d13d      	bne.n	800627e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006210:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800621a:	d111      	bne.n	8006240 <SPI_WaitFlagStateUntilTimeout+0x94>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006224:	d004      	beq.n	8006230 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800622e:	d107      	bne.n	8006240 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800623e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006248:	d10f      	bne.n	800626a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006268:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e017      	b.n	80062ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006284:	2300      	movs	r3, #0
 8006286:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	3b01      	subs	r3, #1
 800628c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	4013      	ands	r3, r2
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	429a      	cmp	r2, r3
 800629c:	bf0c      	ite	eq
 800629e:	2301      	moveq	r3, #1
 80062a0:	2300      	movne	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	461a      	mov	r2, r3
 80062a6:	79fb      	ldrb	r3, [r7, #7]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d19b      	bne.n	80061e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3720      	adds	r7, #32
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20000028 	.word	0x20000028

080062bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af02      	add	r7, sp, #8
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062d0:	d111      	bne.n	80062f6 <SPI_EndRxTransaction+0x3a>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062da:	d004      	beq.n	80062e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e4:	d107      	bne.n	80062f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062f4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062fe:	d12a      	bne.n	8006356 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006308:	d012      	beq.n	8006330 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2200      	movs	r2, #0
 8006312:	2180      	movs	r1, #128	; 0x80
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f7ff ff49 	bl	80061ac <SPI_WaitFlagStateUntilTimeout>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d02d      	beq.n	800637c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006324:	f043 0220 	orr.w	r2, r3, #32
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e026      	b.n	800637e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2200      	movs	r2, #0
 8006338:	2101      	movs	r1, #1
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f7ff ff36 	bl	80061ac <SPI_WaitFlagStateUntilTimeout>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d01a      	beq.n	800637c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634a:	f043 0220 	orr.w	r2, r3, #32
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e013      	b.n	800637e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2200      	movs	r2, #0
 800635e:	2101      	movs	r1, #1
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f7ff ff23 	bl	80061ac <SPI_WaitFlagStateUntilTimeout>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d007      	beq.n	800637c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006370:	f043 0220 	orr.w	r2, r3, #32
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e000      	b.n	800637e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
	...

08006388 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af02      	add	r7, sp, #8
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2201      	movs	r2, #1
 800639c:	2102      	movs	r1, #2
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f7ff ff04 	bl	80061ac <SPI_WaitFlagStateUntilTimeout>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d007      	beq.n	80063ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ae:	f043 0220 	orr.w	r2, r3, #32
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e032      	b.n	8006420 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063ba:	4b1b      	ldr	r3, [pc, #108]	; (8006428 <SPI_EndRxTxTransaction+0xa0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a1b      	ldr	r2, [pc, #108]	; (800642c <SPI_EndRxTxTransaction+0xa4>)
 80063c0:	fba2 2303 	umull	r2, r3, r2, r3
 80063c4:	0d5b      	lsrs	r3, r3, #21
 80063c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063ca:	fb02 f303 	mul.w	r3, r2, r3
 80063ce:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063d8:	d112      	bne.n	8006400 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2200      	movs	r2, #0
 80063e2:	2180      	movs	r1, #128	; 0x80
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f7ff fee1 	bl	80061ac <SPI_WaitFlagStateUntilTimeout>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d016      	beq.n	800641e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f4:	f043 0220 	orr.w	r2, r3, #32
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e00f      	b.n	8006420 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	3b01      	subs	r3, #1
 800640a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006416:	2b80      	cmp	r3, #128	; 0x80
 8006418:	d0f2      	beq.n	8006400 <SPI_EndRxTxTransaction+0x78>
 800641a:	e000      	b.n	800641e <SPI_EndRxTxTransaction+0x96>
        break;
 800641c:	bf00      	nop
  }

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20000028 	.word	0x20000028
 800642c:	165e9f81 	.word	0x165e9f81

08006430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e041      	b.n	80064c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d106      	bne.n	800645c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7fb fcae 	bl	8001db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2202      	movs	r2, #2
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3304      	adds	r3, #4
 800646c:	4619      	mov	r1, r3
 800646e:	4610      	mov	r0, r2
 8006470:	f000 f896 	bl	80065a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d001      	beq.n	80064e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e046      	b.n	8006576 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a23      	ldr	r2, [pc, #140]	; (8006584 <HAL_TIM_Base_Start+0xb4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d022      	beq.n	8006540 <HAL_TIM_Base_Start+0x70>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006502:	d01d      	beq.n	8006540 <HAL_TIM_Base_Start+0x70>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a1f      	ldr	r2, [pc, #124]	; (8006588 <HAL_TIM_Base_Start+0xb8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d018      	beq.n	8006540 <HAL_TIM_Base_Start+0x70>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a1e      	ldr	r2, [pc, #120]	; (800658c <HAL_TIM_Base_Start+0xbc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d013      	beq.n	8006540 <HAL_TIM_Base_Start+0x70>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a1c      	ldr	r2, [pc, #112]	; (8006590 <HAL_TIM_Base_Start+0xc0>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d00e      	beq.n	8006540 <HAL_TIM_Base_Start+0x70>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a1b      	ldr	r2, [pc, #108]	; (8006594 <HAL_TIM_Base_Start+0xc4>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d009      	beq.n	8006540 <HAL_TIM_Base_Start+0x70>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a19      	ldr	r2, [pc, #100]	; (8006598 <HAL_TIM_Base_Start+0xc8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d004      	beq.n	8006540 <HAL_TIM_Base_Start+0x70>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a18      	ldr	r2, [pc, #96]	; (800659c <HAL_TIM_Base_Start+0xcc>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d111      	bne.n	8006564 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2b06      	cmp	r3, #6
 8006550:	d010      	beq.n	8006574 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f042 0201 	orr.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006562:	e007      	b.n	8006574 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0201 	orr.w	r2, r2, #1
 8006572:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	40010000 	.word	0x40010000
 8006588:	40000400 	.word	0x40000400
 800658c:	40000800 	.word	0x40000800
 8006590:	40000c00 	.word	0x40000c00
 8006594:	40010400 	.word	0x40010400
 8006598:	40014000 	.word	0x40014000
 800659c:	40001800 	.word	0x40001800

080065a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a46      	ldr	r2, [pc, #280]	; (80066cc <TIM_Base_SetConfig+0x12c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d013      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065be:	d00f      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a43      	ldr	r2, [pc, #268]	; (80066d0 <TIM_Base_SetConfig+0x130>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d00b      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a42      	ldr	r2, [pc, #264]	; (80066d4 <TIM_Base_SetConfig+0x134>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d007      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a41      	ldr	r2, [pc, #260]	; (80066d8 <TIM_Base_SetConfig+0x138>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d003      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a40      	ldr	r2, [pc, #256]	; (80066dc <TIM_Base_SetConfig+0x13c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d108      	bne.n	80065f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a35      	ldr	r2, [pc, #212]	; (80066cc <TIM_Base_SetConfig+0x12c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d02b      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006600:	d027      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a32      	ldr	r2, [pc, #200]	; (80066d0 <TIM_Base_SetConfig+0x130>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d023      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a31      	ldr	r2, [pc, #196]	; (80066d4 <TIM_Base_SetConfig+0x134>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d01f      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a30      	ldr	r2, [pc, #192]	; (80066d8 <TIM_Base_SetConfig+0x138>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d01b      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a2f      	ldr	r2, [pc, #188]	; (80066dc <TIM_Base_SetConfig+0x13c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d017      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a2e      	ldr	r2, [pc, #184]	; (80066e0 <TIM_Base_SetConfig+0x140>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d013      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a2d      	ldr	r2, [pc, #180]	; (80066e4 <TIM_Base_SetConfig+0x144>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d00f      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a2c      	ldr	r2, [pc, #176]	; (80066e8 <TIM_Base_SetConfig+0x148>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d00b      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a2b      	ldr	r2, [pc, #172]	; (80066ec <TIM_Base_SetConfig+0x14c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d007      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a2a      	ldr	r2, [pc, #168]	; (80066f0 <TIM_Base_SetConfig+0x150>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d003      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a29      	ldr	r2, [pc, #164]	; (80066f4 <TIM_Base_SetConfig+0x154>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d108      	bne.n	8006664 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	4313      	orrs	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a10      	ldr	r2, [pc, #64]	; (80066cc <TIM_Base_SetConfig+0x12c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d003      	beq.n	8006698 <TIM_Base_SetConfig+0xf8>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a12      	ldr	r2, [pc, #72]	; (80066dc <TIM_Base_SetConfig+0x13c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d103      	bne.n	80066a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d105      	bne.n	80066be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f023 0201 	bic.w	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	611a      	str	r2, [r3, #16]
  }
}
 80066be:	bf00      	nop
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40010000 	.word	0x40010000
 80066d0:	40000400 	.word	0x40000400
 80066d4:	40000800 	.word	0x40000800
 80066d8:	40000c00 	.word	0x40000c00
 80066dc:	40010400 	.word	0x40010400
 80066e0:	40014000 	.word	0x40014000
 80066e4:	40014400 	.word	0x40014400
 80066e8:	40014800 	.word	0x40014800
 80066ec:	40001800 	.word	0x40001800
 80066f0:	40001c00 	.word	0x40001c00
 80066f4:	40002000 	.word	0x40002000

080066f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006708:	2b01      	cmp	r3, #1
 800670a:	d101      	bne.n	8006710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800670c:	2302      	movs	r3, #2
 800670e:	e05a      	b.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a21      	ldr	r2, [pc, #132]	; (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d022      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800675c:	d01d      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a1d      	ldr	r2, [pc, #116]	; (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d018      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a1b      	ldr	r2, [pc, #108]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d013      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a1a      	ldr	r2, [pc, #104]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d00e      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a18      	ldr	r2, [pc, #96]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d009      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d004      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a15      	ldr	r2, [pc, #84]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d10c      	bne.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	40010000 	.word	0x40010000
 80067d8:	40000400 	.word	0x40000400
 80067dc:	40000800 	.word	0x40000800
 80067e0:	40000c00 	.word	0x40000c00
 80067e4:	40010400 	.word	0x40010400
 80067e8:	40014000 	.word	0x40014000
 80067ec:	40001800 	.word	0x40001800

080067f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e042      	b.n	8006888 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d106      	bne.n	800681c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7fb fb1a 	bl	8001e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2224      	movs	r2, #36	; 0x24
 8006820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006832:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f973 	bl	8006b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	691a      	ldr	r2, [r3, #16]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006848:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	695a      	ldr	r2, [r3, #20]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006858:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68da      	ldr	r2, [r3, #12]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006868:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2220      	movs	r2, #32
 8006874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2220      	movs	r2, #32
 800687c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08a      	sub	sp, #40	; 0x28
 8006894:	af02      	add	r7, sp, #8
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	603b      	str	r3, [r7, #0]
 800689c:	4613      	mov	r3, r2
 800689e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b20      	cmp	r3, #32
 80068ae:	d175      	bne.n	800699c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <HAL_UART_Transmit+0x2c>
 80068b6:	88fb      	ldrh	r3, [r7, #6]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e06e      	b.n	800699e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2221      	movs	r2, #33	; 0x21
 80068ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068ce:	f7fb fd01 	bl	80022d4 <HAL_GetTick>
 80068d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	88fa      	ldrh	r2, [r7, #6]
 80068d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	88fa      	ldrh	r2, [r7, #6]
 80068de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e8:	d108      	bne.n	80068fc <HAL_UART_Transmit+0x6c>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d104      	bne.n	80068fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	61bb      	str	r3, [r7, #24]
 80068fa:	e003      	b.n	8006904 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006900:	2300      	movs	r3, #0
 8006902:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006904:	e02e      	b.n	8006964 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2200      	movs	r2, #0
 800690e:	2180      	movs	r1, #128	; 0x80
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 f848 	bl	80069a6 <UART_WaitOnFlagUntilTimeout>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d005      	beq.n	8006928 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2220      	movs	r2, #32
 8006920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e03a      	b.n	800699e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10b      	bne.n	8006946 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800693c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	3302      	adds	r3, #2
 8006942:	61bb      	str	r3, [r7, #24]
 8006944:	e007      	b.n	8006956 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	781a      	ldrb	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	3301      	adds	r3, #1
 8006954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800695a:	b29b      	uxth	r3, r3
 800695c:	3b01      	subs	r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1cb      	bne.n	8006906 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2200      	movs	r2, #0
 8006976:	2140      	movs	r1, #64	; 0x40
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 f814 	bl	80069a6 <UART_WaitOnFlagUntilTimeout>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d005      	beq.n	8006990 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2220      	movs	r2, #32
 8006988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e006      	b.n	800699e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2220      	movs	r2, #32
 8006994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	e000      	b.n	800699e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800699c:	2302      	movs	r3, #2
  }
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3720      	adds	r7, #32
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b086      	sub	sp, #24
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	60b9      	str	r1, [r7, #8]
 80069b0:	603b      	str	r3, [r7, #0]
 80069b2:	4613      	mov	r3, r2
 80069b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069b6:	e03b      	b.n	8006a30 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069be:	d037      	beq.n	8006a30 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c0:	f7fb fc88 	bl	80022d4 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	6a3a      	ldr	r2, [r7, #32]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d302      	bcc.n	80069d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e03a      	b.n	8006a50 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f003 0304 	and.w	r3, r3, #4
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d023      	beq.n	8006a30 <UART_WaitOnFlagUntilTimeout+0x8a>
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b80      	cmp	r3, #128	; 0x80
 80069ec:	d020      	beq.n	8006a30 <UART_WaitOnFlagUntilTimeout+0x8a>
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b40      	cmp	r3, #64	; 0x40
 80069f2:	d01d      	beq.n	8006a30 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b08      	cmp	r3, #8
 8006a00:	d116      	bne.n	8006a30 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006a02:	2300      	movs	r3, #0
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 f81d 	bl	8006a58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2208      	movs	r2, #8
 8006a22:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e00f      	b.n	8006a50 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	bf0c      	ite	eq
 8006a40:	2301      	moveq	r3, #1
 8006a42:	2300      	movne	r3, #0
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	461a      	mov	r2, r3
 8006a48:	79fb      	ldrb	r3, [r7, #7]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d0b4      	beq.n	80069b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b095      	sub	sp, #84	; 0x54
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	330c      	adds	r3, #12
 8006a66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6a:	e853 3f00 	ldrex	r3, [r3]
 8006a6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	330c      	adds	r3, #12
 8006a7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a80:	643a      	str	r2, [r7, #64]	; 0x40
 8006a82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a88:	e841 2300 	strex	r3, r2, [r1]
 8006a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e5      	bne.n	8006a60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3314      	adds	r3, #20
 8006a9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	f023 0301 	bic.w	r3, r3, #1
 8006aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3314      	adds	r3, #20
 8006ab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ab4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e5      	bne.n	8006a94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d119      	bne.n	8006b04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	330c      	adds	r3, #12
 8006ad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f023 0310 	bic.w	r3, r3, #16
 8006ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	330c      	adds	r3, #12
 8006aee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006af0:	61ba      	str	r2, [r7, #24]
 8006af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	6979      	ldr	r1, [r7, #20]
 8006af6:	69ba      	ldr	r2, [r7, #24]
 8006af8:	e841 2300 	strex	r3, r2, [r1]
 8006afc:	613b      	str	r3, [r7, #16]
   return(result);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e5      	bne.n	8006ad0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2220      	movs	r2, #32
 8006b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b12:	bf00      	nop
 8006b14:	3754      	adds	r7, #84	; 0x54
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
	...

08006b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b24:	b0c0      	sub	sp, #256	; 0x100
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b3c:	68d9      	ldr	r1, [r3, #12]
 8006b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	ea40 0301 	orr.w	r3, r0, r1
 8006b48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b4e:	689a      	ldr	r2, [r3, #8]
 8006b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	431a      	orrs	r2, r3
 8006b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b78:	f021 010c 	bic.w	r1, r1, #12
 8006b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b86:	430b      	orrs	r3, r1
 8006b88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b9a:	6999      	ldr	r1, [r3, #24]
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	ea40 0301 	orr.w	r3, r0, r1
 8006ba6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	4b8f      	ldr	r3, [pc, #572]	; (8006dec <UART_SetConfig+0x2cc>)
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d005      	beq.n	8006bc0 <UART_SetConfig+0xa0>
 8006bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	4b8d      	ldr	r3, [pc, #564]	; (8006df0 <UART_SetConfig+0x2d0>)
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d104      	bne.n	8006bca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bc0:	f7fd fbe0 	bl	8004384 <HAL_RCC_GetPCLK2Freq>
 8006bc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006bc8:	e003      	b.n	8006bd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bca:	f7fd fbc7 	bl	800435c <HAL_RCC_GetPCLK1Freq>
 8006bce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bdc:	f040 810c 	bne.w	8006df8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006be4:	2200      	movs	r2, #0
 8006be6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006bee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006bf2:	4622      	mov	r2, r4
 8006bf4:	462b      	mov	r3, r5
 8006bf6:	1891      	adds	r1, r2, r2
 8006bf8:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bfa:	415b      	adcs	r3, r3
 8006bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c02:	4621      	mov	r1, r4
 8006c04:	eb12 0801 	adds.w	r8, r2, r1
 8006c08:	4629      	mov	r1, r5
 8006c0a:	eb43 0901 	adc.w	r9, r3, r1
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c22:	4690      	mov	r8, r2
 8006c24:	4699      	mov	r9, r3
 8006c26:	4623      	mov	r3, r4
 8006c28:	eb18 0303 	adds.w	r3, r8, r3
 8006c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c30:	462b      	mov	r3, r5
 8006c32:	eb49 0303 	adc.w	r3, r9, r3
 8006c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c4e:	460b      	mov	r3, r1
 8006c50:	18db      	adds	r3, r3, r3
 8006c52:	653b      	str	r3, [r7, #80]	; 0x50
 8006c54:	4613      	mov	r3, r2
 8006c56:	eb42 0303 	adc.w	r3, r2, r3
 8006c5a:	657b      	str	r3, [r7, #84]	; 0x54
 8006c5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c64:	f7fa f840 	bl	8000ce8 <__aeabi_uldivmod>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4b61      	ldr	r3, [pc, #388]	; (8006df4 <UART_SetConfig+0x2d4>)
 8006c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	011c      	lsls	r4, r3, #4
 8006c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c88:	4642      	mov	r2, r8
 8006c8a:	464b      	mov	r3, r9
 8006c8c:	1891      	adds	r1, r2, r2
 8006c8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c90:	415b      	adcs	r3, r3
 8006c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c98:	4641      	mov	r1, r8
 8006c9a:	eb12 0a01 	adds.w	sl, r2, r1
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	eb43 0b01 	adc.w	fp, r3, r1
 8006ca4:	f04f 0200 	mov.w	r2, #0
 8006ca8:	f04f 0300 	mov.w	r3, #0
 8006cac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006cb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006cb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cb8:	4692      	mov	sl, r2
 8006cba:	469b      	mov	fp, r3
 8006cbc:	4643      	mov	r3, r8
 8006cbe:	eb1a 0303 	adds.w	r3, sl, r3
 8006cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cc6:	464b      	mov	r3, r9
 8006cc8:	eb4b 0303 	adc.w	r3, fp, r3
 8006ccc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cdc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ce0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	18db      	adds	r3, r3, r3
 8006ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8006cea:	4613      	mov	r3, r2
 8006cec:	eb42 0303 	adc.w	r3, r2, r3
 8006cf0:	647b      	str	r3, [r7, #68]	; 0x44
 8006cf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006cfa:	f7f9 fff5 	bl	8000ce8 <__aeabi_uldivmod>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4611      	mov	r1, r2
 8006d04:	4b3b      	ldr	r3, [pc, #236]	; (8006df4 <UART_SetConfig+0x2d4>)
 8006d06:	fba3 2301 	umull	r2, r3, r3, r1
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	2264      	movs	r2, #100	; 0x64
 8006d0e:	fb02 f303 	mul.w	r3, r2, r3
 8006d12:	1acb      	subs	r3, r1, r3
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d1a:	4b36      	ldr	r3, [pc, #216]	; (8006df4 <UART_SetConfig+0x2d4>)
 8006d1c:	fba3 2302 	umull	r2, r3, r3, r2
 8006d20:	095b      	lsrs	r3, r3, #5
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d28:	441c      	add	r4, r3
 8006d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d3c:	4642      	mov	r2, r8
 8006d3e:	464b      	mov	r3, r9
 8006d40:	1891      	adds	r1, r2, r2
 8006d42:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d44:	415b      	adcs	r3, r3
 8006d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d4c:	4641      	mov	r1, r8
 8006d4e:	1851      	adds	r1, r2, r1
 8006d50:	6339      	str	r1, [r7, #48]	; 0x30
 8006d52:	4649      	mov	r1, r9
 8006d54:	414b      	adcs	r3, r1
 8006d56:	637b      	str	r3, [r7, #52]	; 0x34
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	f04f 0300 	mov.w	r3, #0
 8006d60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d64:	4659      	mov	r1, fp
 8006d66:	00cb      	lsls	r3, r1, #3
 8006d68:	4651      	mov	r1, sl
 8006d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d6e:	4651      	mov	r1, sl
 8006d70:	00ca      	lsls	r2, r1, #3
 8006d72:	4610      	mov	r0, r2
 8006d74:	4619      	mov	r1, r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	4642      	mov	r2, r8
 8006d7a:	189b      	adds	r3, r3, r2
 8006d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d80:	464b      	mov	r3, r9
 8006d82:	460a      	mov	r2, r1
 8006d84:	eb42 0303 	adc.w	r3, r2, r3
 8006d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006da0:	460b      	mov	r3, r1
 8006da2:	18db      	adds	r3, r3, r3
 8006da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006da6:	4613      	mov	r3, r2
 8006da8:	eb42 0303 	adc.w	r3, r2, r3
 8006dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006db2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006db6:	f7f9 ff97 	bl	8000ce8 <__aeabi_uldivmod>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	; (8006df4 <UART_SetConfig+0x2d4>)
 8006dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8006dc4:	095b      	lsrs	r3, r3, #5
 8006dc6:	2164      	movs	r1, #100	; 0x64
 8006dc8:	fb01 f303 	mul.w	r3, r1, r3
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	3332      	adds	r3, #50	; 0x32
 8006dd2:	4a08      	ldr	r2, [pc, #32]	; (8006df4 <UART_SetConfig+0x2d4>)
 8006dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd8:	095b      	lsrs	r3, r3, #5
 8006dda:	f003 0207 	and.w	r2, r3, #7
 8006dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4422      	add	r2, r4
 8006de6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006de8:	e106      	b.n	8006ff8 <UART_SetConfig+0x4d8>
 8006dea:	bf00      	nop
 8006dec:	40011000 	.word	0x40011000
 8006df0:	40011400 	.word	0x40011400
 8006df4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006e0a:	4642      	mov	r2, r8
 8006e0c:	464b      	mov	r3, r9
 8006e0e:	1891      	adds	r1, r2, r2
 8006e10:	6239      	str	r1, [r7, #32]
 8006e12:	415b      	adcs	r3, r3
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
 8006e16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e1a:	4641      	mov	r1, r8
 8006e1c:	1854      	adds	r4, r2, r1
 8006e1e:	4649      	mov	r1, r9
 8006e20:	eb43 0501 	adc.w	r5, r3, r1
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	f04f 0300 	mov.w	r3, #0
 8006e2c:	00eb      	lsls	r3, r5, #3
 8006e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e32:	00e2      	lsls	r2, r4, #3
 8006e34:	4614      	mov	r4, r2
 8006e36:	461d      	mov	r5, r3
 8006e38:	4643      	mov	r3, r8
 8006e3a:	18e3      	adds	r3, r4, r3
 8006e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e40:	464b      	mov	r3, r9
 8006e42:	eb45 0303 	adc.w	r3, r5, r3
 8006e46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e5a:	f04f 0200 	mov.w	r2, #0
 8006e5e:	f04f 0300 	mov.w	r3, #0
 8006e62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e66:	4629      	mov	r1, r5
 8006e68:	008b      	lsls	r3, r1, #2
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e70:	4621      	mov	r1, r4
 8006e72:	008a      	lsls	r2, r1, #2
 8006e74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e78:	f7f9 ff36 	bl	8000ce8 <__aeabi_uldivmod>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4b60      	ldr	r3, [pc, #384]	; (8007004 <UART_SetConfig+0x4e4>)
 8006e82:	fba3 2302 	umull	r2, r3, r3, r2
 8006e86:	095b      	lsrs	r3, r3, #5
 8006e88:	011c      	lsls	r4, r3, #4
 8006e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e9c:	4642      	mov	r2, r8
 8006e9e:	464b      	mov	r3, r9
 8006ea0:	1891      	adds	r1, r2, r2
 8006ea2:	61b9      	str	r1, [r7, #24]
 8006ea4:	415b      	adcs	r3, r3
 8006ea6:	61fb      	str	r3, [r7, #28]
 8006ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006eac:	4641      	mov	r1, r8
 8006eae:	1851      	adds	r1, r2, r1
 8006eb0:	6139      	str	r1, [r7, #16]
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	414b      	adcs	r3, r1
 8006eb6:	617b      	str	r3, [r7, #20]
 8006eb8:	f04f 0200 	mov.w	r2, #0
 8006ebc:	f04f 0300 	mov.w	r3, #0
 8006ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ec4:	4659      	mov	r1, fp
 8006ec6:	00cb      	lsls	r3, r1, #3
 8006ec8:	4651      	mov	r1, sl
 8006eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ece:	4651      	mov	r1, sl
 8006ed0:	00ca      	lsls	r2, r1, #3
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	4642      	mov	r2, r8
 8006eda:	189b      	adds	r3, r3, r2
 8006edc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ee0:	464b      	mov	r3, r9
 8006ee2:	460a      	mov	r2, r1
 8006ee4:	eb42 0303 	adc.w	r3, r2, r3
 8006ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ef6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ef8:	f04f 0200 	mov.w	r2, #0
 8006efc:	f04f 0300 	mov.w	r3, #0
 8006f00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f04:	4649      	mov	r1, r9
 8006f06:	008b      	lsls	r3, r1, #2
 8006f08:	4641      	mov	r1, r8
 8006f0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f0e:	4641      	mov	r1, r8
 8006f10:	008a      	lsls	r2, r1, #2
 8006f12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f16:	f7f9 fee7 	bl	8000ce8 <__aeabi_uldivmod>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	4b38      	ldr	r3, [pc, #224]	; (8007004 <UART_SetConfig+0x4e4>)
 8006f22:	fba3 2301 	umull	r2, r3, r3, r1
 8006f26:	095b      	lsrs	r3, r3, #5
 8006f28:	2264      	movs	r2, #100	; 0x64
 8006f2a:	fb02 f303 	mul.w	r3, r2, r3
 8006f2e:	1acb      	subs	r3, r1, r3
 8006f30:	011b      	lsls	r3, r3, #4
 8006f32:	3332      	adds	r3, #50	; 0x32
 8006f34:	4a33      	ldr	r2, [pc, #204]	; (8007004 <UART_SetConfig+0x4e4>)
 8006f36:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3a:	095b      	lsrs	r3, r3, #5
 8006f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f40:	441c      	add	r4, r3
 8006f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f46:	2200      	movs	r2, #0
 8006f48:	673b      	str	r3, [r7, #112]	; 0x70
 8006f4a:	677a      	str	r2, [r7, #116]	; 0x74
 8006f4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f50:	4642      	mov	r2, r8
 8006f52:	464b      	mov	r3, r9
 8006f54:	1891      	adds	r1, r2, r2
 8006f56:	60b9      	str	r1, [r7, #8]
 8006f58:	415b      	adcs	r3, r3
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f60:	4641      	mov	r1, r8
 8006f62:	1851      	adds	r1, r2, r1
 8006f64:	6039      	str	r1, [r7, #0]
 8006f66:	4649      	mov	r1, r9
 8006f68:	414b      	adcs	r3, r1
 8006f6a:	607b      	str	r3, [r7, #4]
 8006f6c:	f04f 0200 	mov.w	r2, #0
 8006f70:	f04f 0300 	mov.w	r3, #0
 8006f74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f78:	4659      	mov	r1, fp
 8006f7a:	00cb      	lsls	r3, r1, #3
 8006f7c:	4651      	mov	r1, sl
 8006f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f82:	4651      	mov	r1, sl
 8006f84:	00ca      	lsls	r2, r1, #3
 8006f86:	4610      	mov	r0, r2
 8006f88:	4619      	mov	r1, r3
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	4642      	mov	r2, r8
 8006f8e:	189b      	adds	r3, r3, r2
 8006f90:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f92:	464b      	mov	r3, r9
 8006f94:	460a      	mov	r2, r1
 8006f96:	eb42 0303 	adc.w	r3, r2, r3
 8006f9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	663b      	str	r3, [r7, #96]	; 0x60
 8006fa6:	667a      	str	r2, [r7, #100]	; 0x64
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	f04f 0300 	mov.w	r3, #0
 8006fb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	008b      	lsls	r3, r1, #2
 8006fb8:	4641      	mov	r1, r8
 8006fba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fbe:	4641      	mov	r1, r8
 8006fc0:	008a      	lsls	r2, r1, #2
 8006fc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006fc6:	f7f9 fe8f 	bl	8000ce8 <__aeabi_uldivmod>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <UART_SetConfig+0x4e4>)
 8006fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8006fd4:	095b      	lsrs	r3, r3, #5
 8006fd6:	2164      	movs	r1, #100	; 0x64
 8006fd8:	fb01 f303 	mul.w	r3, r1, r3
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	3332      	adds	r3, #50	; 0x32
 8006fe2:	4a08      	ldr	r2, [pc, #32]	; (8007004 <UART_SetConfig+0x4e4>)
 8006fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe8:	095b      	lsrs	r3, r3, #5
 8006fea:	f003 020f 	and.w	r2, r3, #15
 8006fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4422      	add	r2, r4
 8006ff6:	609a      	str	r2, [r3, #8]
}
 8006ff8:	bf00      	nop
 8006ffa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ffe:	46bd      	mov	sp, r7
 8007000:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007004:	51eb851f 	.word	0x51eb851f

08007008 <NRF24_DelayMicroSeconds>:
//static SPI_HandleTypeDef nrf24_hspi;
//Debugging UART handle

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec) {
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar * ((SystemCoreClock / 1000000) / 3);
 8007014:	4b0b      	ldr	r3, [pc, #44]	; (8007044 <NRF24_DelayMicroSeconds+0x3c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a0b      	ldr	r2, [pc, #44]	; (8007048 <NRF24_DelayMicroSeconds+0x40>)
 800701a:	fba2 2303 	umull	r2, r3, r2, r3
 800701e:	0c9a      	lsrs	r2, r3, #18
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	fb02 f303 	mul.w	r3, r2, r3
 8007026:	60fb      	str	r3, [r7, #12]
	while (uSecVar--)
 8007028:	bf00      	nop
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	1e5a      	subs	r2, r3, #1
 800702e:	60fa      	str	r2, [r7, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1fa      	bne.n	800702a <NRF24_DelayMicroSeconds+0x22>
		;
}
 8007034:	bf00      	nop
 8007036:	bf00      	nop
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	20000028 	.word	0x20000028
 8007048:	165e9f81 	.word	0x165e9f81

0800704c <NRF24_CSN>:

//1. Chip Select function
void NRF24_CSN(int state) {
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
	if (state)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d005      	beq.n	8007066 <NRF24_CSN+0x1a>
		HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 800705a:	2201      	movs	r2, #1
 800705c:	2120      	movs	r1, #32
 800705e:	4806      	ldr	r0, [pc, #24]	; (8007078 <NRF24_CSN+0x2c>)
 8007060:	f7fc f802 	bl	8003068 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
}
 8007064:	e004      	b.n	8007070 <NRF24_CSN+0x24>
		HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8007066:	2200      	movs	r2, #0
 8007068:	2120      	movs	r1, #32
 800706a:	4803      	ldr	r0, [pc, #12]	; (8007078 <NRF24_CSN+0x2c>)
 800706c:	f7fb fffc 	bl	8003068 <HAL_GPIO_WritePin>
}
 8007070:	bf00      	nop
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	40020400 	.word	0x40020400

0800707c <NRF24_CE>:
//2. Chip Enable
void NRF24_CE(int state) {
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
	if (state)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <NRF24_CE+0x1a>

		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 800708a:	2201      	movs	r2, #1
 800708c:	2110      	movs	r1, #16
 800708e:	4806      	ldr	r0, [pc, #24]	; (80070a8 <NRF24_CE+0x2c>)
 8007090:	f7fb ffea 	bl	8003068 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
}
 8007094:	e004      	b.n	80070a0 <NRF24_CE+0x24>
		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8007096:	2200      	movs	r2, #0
 8007098:	2110      	movs	r1, #16
 800709a:	4803      	ldr	r0, [pc, #12]	; (80070a8 <NRF24_CE+0x2c>)
 800709c:	f7fb ffe4 	bl	8003068 <HAL_GPIO_WritePin>
}
 80070a0:	bf00      	nop
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	40020400 	.word	0x40020400

080070ac <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg) {
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	4603      	mov	r3, r0
 80070b4:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_CSN(0);
 80070b6:	2000      	movs	r0, #0
 80070b8:	f7ff ffc8 	bl	800704c <NRF24_CSN>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 80070bc:	79fb      	ldrb	r3, [r7, #7]
 80070be:	f003 031f 	and.w	r3, r3, #31
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi2, spiBuf, 1, 100);
 80070c6:	f107 010c 	add.w	r1, r7, #12
 80070ca:	2364      	movs	r3, #100	; 0x64
 80070cc:	2201      	movs	r2, #1
 80070ce:	480a      	ldr	r0, [pc, #40]	; (80070f8 <NRF24_read_register+0x4c>)
 80070d0:	f7fe fc61 	bl	8005996 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspi2, &spiBuf[1], 1, 100);
 80070d4:	f107 030c 	add.w	r3, r7, #12
 80070d8:	1c59      	adds	r1, r3, #1
 80070da:	2364      	movs	r3, #100	; 0x64
 80070dc:	2201      	movs	r2, #1
 80070de:	4806      	ldr	r0, [pc, #24]	; (80070f8 <NRF24_read_register+0x4c>)
 80070e0:	f7fe fd9c 	bl	8005c1c <HAL_SPI_Receive>
	retData = spiBuf[1];
 80070e4:	7b7b      	ldrb	r3, [r7, #13]
 80070e6:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_CSN(1);
 80070e8:	2001      	movs	r0, #1
 80070ea:	f7ff ffaf 	bl	800704c <NRF24_CSN>
	return retData;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	2000034c 	.word	0x2000034c

080070fc <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len) {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	6039      	str	r1, [r7, #0]
 8007106:	71fb      	strb	r3, [r7, #7]
 8007108:	4613      	mov	r3, r2
 800710a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_CSN(0);
 800710c:	2000      	movs	r0, #0
 800710e:	f7ff ff9d 	bl	800704c <NRF24_CSN>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 8007112:	79fb      	ldrb	r3, [r7, #7]
 8007114:	f003 031f 	and.w	r3, r3, #31
 8007118:	b2db      	uxtb	r3, r3
 800711a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&hspi2, spiBuf, 1, 100);
 800711c:	f107 010c 	add.w	r1, r7, #12
 8007120:	2364      	movs	r3, #100	; 0x64
 8007122:	2201      	movs	r2, #1
 8007124:	4808      	ldr	r0, [pc, #32]	; (8007148 <NRF24_read_registerN+0x4c>)
 8007126:	f7fe fc36 	bl	8005996 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspi2, buf, len, 100);
 800712a:	79bb      	ldrb	r3, [r7, #6]
 800712c:	b29a      	uxth	r2, r3
 800712e:	2364      	movs	r3, #100	; 0x64
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	4805      	ldr	r0, [pc, #20]	; (8007148 <NRF24_read_registerN+0x4c>)
 8007134:	f7fe fd72 	bl	8005c1c <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_CSN(1);
 8007138:	2001      	movs	r0, #1
 800713a:	f7ff ff87 	bl	800704c <NRF24_CSN>
}
 800713e:	bf00      	nop
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	2000034c 	.word	0x2000034c

0800714c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value) {
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	460a      	mov	r2, r1
 8007156:	71fb      	strb	r3, [r7, #7]
 8007158:	4613      	mov	r3, r2
 800715a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_CSN(0);
 800715c:	2000      	movs	r0, #0
 800715e:	f7ff ff75 	bl	800704c <NRF24_CSN>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 8007162:	79fb      	ldrb	r3, [r7, #7]
 8007164:	f043 0320 	orr.w	r3, r3, #32
 8007168:	b2db      	uxtb	r3, r3
 800716a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800716c:	79bb      	ldrb	r3, [r7, #6]
 800716e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi2, spiBuf, 2, 100);
 8007170:	f107 010c 	add.w	r1, r7, #12
 8007174:	2364      	movs	r3, #100	; 0x64
 8007176:	2202      	movs	r2, #2
 8007178:	4804      	ldr	r0, [pc, #16]	; (800718c <NRF24_write_register+0x40>)
 800717a:	f7fe fc0c 	bl	8005996 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_CSN(1);
 800717e:	2001      	movs	r0, #1
 8007180:	f7ff ff64 	bl	800704c <NRF24_CSN>
}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	2000034c 	.word	0x2000034c

08007190 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t *buf, uint8_t len) {
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	4603      	mov	r3, r0
 8007198:	6039      	str	r1, [r7, #0]
 800719a:	71fb      	strb	r3, [r7, #7]
 800719c:	4613      	mov	r3, r2
 800719e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_CSN(0);
 80071a0:	2000      	movs	r0, #0
 80071a2:	f7ff ff53 	bl	800704c <NRF24_CSN>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 80071a6:	79fb      	ldrb	r3, [r7, #7]
 80071a8:	f043 0320 	orr.w	r3, r3, #32
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi2, spiBuf, 1, 100);
 80071b0:	f107 010c 	add.w	r1, r7, #12
 80071b4:	2364      	movs	r3, #100	; 0x64
 80071b6:	2201      	movs	r2, #1
 80071b8:	4808      	ldr	r0, [pc, #32]	; (80071dc <NRF24_write_registerN+0x4c>)
 80071ba:	f7fe fbec 	bl	8005996 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) buf, len, 100);
 80071be:	79bb      	ldrb	r3, [r7, #6]
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	2364      	movs	r3, #100	; 0x64
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	4805      	ldr	r0, [pc, #20]	; (80071dc <NRF24_write_registerN+0x4c>)
 80071c8:	f7fe fbe5 	bl	8005996 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_CSN(1);
 80071cc:	2001      	movs	r0, #1
 80071ce:	f7ff ff3d 	bl	800704c <NRF24_CSN>
}
 80071d2:	bf00      	nop
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	2000034c 	.word	0x2000034c

080071e0 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void *buf, uint8_t len) {
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_CSN(0);
 80071ec:	2000      	movs	r0, #0
 80071ee:	f7ff ff2d 	bl	800704c <NRF24_CSN>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80071f2:	23a0      	movs	r3, #160	; 0xa0
 80071f4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &wrPayloadCmd, 1, 100);
 80071f6:	f107 010f 	add.w	r1, r7, #15
 80071fa:	2364      	movs	r3, #100	; 0x64
 80071fc:	2201      	movs	r2, #1
 80071fe:	4808      	ldr	r0, [pc, #32]	; (8007220 <NRF24_write_payload+0x40>)
 8007200:	f7fe fbc9 	bl	8005996 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) buf, len, 100);
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	b29a      	uxth	r2, r3
 8007208:	2364      	movs	r3, #100	; 0x64
 800720a:	6879      	ldr	r1, [r7, #4]
 800720c:	4804      	ldr	r0, [pc, #16]	; (8007220 <NRF24_write_payload+0x40>)
 800720e:	f7fe fbc2 	bl	8005996 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_CSN(1);
 8007212:	2001      	movs	r0, #1
 8007214:	f7ff ff1a 	bl	800704c <NRF24_CSN>
}
 8007218:	bf00      	nop
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	2000034c 	.word	0x2000034c

08007224 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void *buf, uint8_t len) {
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8007230:	f000 f9c8 	bl	80075c4 <NRF24_getPayloadSize>
 8007234:	4603      	mov	r3, r0
 8007236:	461a      	mov	r2, r3
 8007238:	78fb      	ldrb	r3, [r7, #3]
 800723a:	4293      	cmp	r3, r2
 800723c:	d303      	bcc.n	8007246 <NRF24_read_payload+0x22>
 800723e:	f000 f9c1 	bl	80075c4 <NRF24_getPayloadSize>
 8007242:	4603      	mov	r3, r0
 8007244:	e000      	b.n	8007248 <NRF24_read_payload+0x24>
 8007246:	78fb      	ldrb	r3, [r7, #3]
 8007248:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_CSN(0);
 800724a:	2000      	movs	r0, #0
 800724c:	f7ff fefe 	bl	800704c <NRF24_CSN>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8007250:	2361      	movs	r3, #97	; 0x61
 8007252:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi2, &cmdRxBuf, 1, 100);
 8007254:	f107 010e 	add.w	r1, r7, #14
 8007258:	2364      	movs	r3, #100	; 0x64
 800725a:	2201      	movs	r2, #1
 800725c:	4808      	ldr	r0, [pc, #32]	; (8007280 <NRF24_read_payload+0x5c>)
 800725e:	f7fe fb9a 	bl	8005996 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, buf, data_len, 100);
 8007262:	7bfb      	ldrb	r3, [r7, #15]
 8007264:	b29a      	uxth	r2, r3
 8007266:	2364      	movs	r3, #100	; 0x64
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	4805      	ldr	r0, [pc, #20]	; (8007280 <NRF24_read_payload+0x5c>)
 800726c:	f7fe fcd6 	bl	8005c1c <HAL_SPI_Receive>
	NRF24_CSN(1);
 8007270:	2001      	movs	r0, #1
 8007272:	f7ff feeb 	bl	800704c <NRF24_CSN>
}
 8007276:	bf00      	nop
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	2000034c 	.word	0x2000034c

08007284 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void) {
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8007288:	21ff      	movs	r1, #255	; 0xff
 800728a:	20e1      	movs	r0, #225	; 0xe1
 800728c:	f7ff ff5e 	bl	800714c <NRF24_write_register>
}
 8007290:	bf00      	nop
 8007292:	bd80      	pop	{r7, pc}

08007294 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void) {
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8007298:	21ff      	movs	r1, #255	; 0xff
 800729a:	20e2      	movs	r0, #226	; 0xe2
 800729c:	f7ff ff56 	bl	800714c <NRF24_write_register>
}
 80072a0:	bf00      	nop
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void) {
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80072aa:	2007      	movs	r0, #7
 80072ac:	f7ff fefe 	bl	80070ac <NRF24_read_register>
 80072b0:	4603      	mov	r3, r0
 80072b2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80072b4:	79fb      	ldrb	r3, [r7, #7]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <NRF24_Init>:
	NRF24_powerDown();
	//printRadioSettings();
}

//12. Begin function
void NRF24_Init(void) {
 80072be:	b580      	push	{r7, lr}
 80072c0:	af00      	add	r7, sp, #0

	NRF24_SoftwareReset();
 80072c2:	f000 fe15 	bl	8007ef0 <NRF24_SoftwareReset>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80072c6:	210f      	movs	r1, #15
 80072c8:	200f      	movs	r0, #15
 80072ca:	f000 f933 	bl	8007534 <NRF24_setRetries>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_250KBPS);	//RF24_250KBPS RF24_1MBPS RF24_2MBPS
 80072ce:	2002      	movs	r0, #2
 80072d0:	f000 fa52 	bl	8007778 <NRF24_setDataRate>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_m18dB); //RF24_PA_m18dB  RF24_PA_m18dB RF24_PA_m12dB
 80072d4:	2000      	movs	r0, #0
 80072d6:	f000 fa16 	bl	8007706 <NRF24_setPALevel>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80072da:	2002      	movs	r0, #2
 80072dc:	f000 fa92 	bl	8007804 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80072e0:	f000 f9e4 	bl	80076ac <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80072e4:	2020      	movs	r0, #32
 80072e6:	f000 f955 	bl	8007594 <NRF24_setPayloadSize>
	//Reset status register
	NRF24_resetStatus();
 80072ea:	f000 fb7e 	bl	80079ea <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80072ee:	204c      	movs	r0, #76	; 0x4c
 80072f0:	f000 f93b 	bl	800756a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80072f4:	f7ff ffc6 	bl	8007284 <NRF24_flush_tx>
	NRF24_flush_rx();
 80072f8:	f7ff ffcc 	bl	8007294 <NRF24_flush_rx>
	NRF24_powerDown();
 80072fc:	f000 faaa 	bl	8007854 <NRF24_powerDown>
	//printRadioSettings();
}
 8007300:	bf00      	nop
 8007302:	bd80      	pop	{r7, pc}

08007304 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void) {
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) | (1UL << 1) | (1UL << 0));
 8007308:	2000      	movs	r0, #0
 800730a:	f7ff fecf 	bl	80070ac <NRF24_read_register>
 800730e:	4603      	mov	r3, r0
	NRF24_write_register(REG_CONFIG,
 8007310:	f043 0303 	orr.w	r3, r3, #3
 8007314:	b2db      	uxtb	r3, r3
 8007316:	4619      	mov	r1, r3
 8007318:	2000      	movs	r0, #0
 800731a:	f7ff ff17 	bl	800714c <NRF24_write_register>
	//Restore pipe 0 address if exists
	if (pipe0_reading_address)
 800731e:	4b0b      	ldr	r3, [pc, #44]	; (800734c <NRF24_startListening+0x48>)
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	4313      	orrs	r3, r2
 8007326:	d004      	beq.n	8007332 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0,
 8007328:	2205      	movs	r2, #5
 800732a:	4908      	ldr	r1, [pc, #32]	; (800734c <NRF24_startListening+0x48>)
 800732c:	200a      	movs	r0, #10
 800732e:	f7ff ff2f 	bl	8007190 <NRF24_write_registerN>
				(uint8_t*) (&pipe0_reading_address), 5);

	//Flush buffers
	NRF24_flush_tx();
 8007332:	f7ff ffa7 	bl	8007284 <NRF24_flush_tx>
	NRF24_flush_rx();
 8007336:	f7ff ffad 	bl	8007294 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_CE(1);
 800733a:	2001      	movs	r0, #1
 800733c:	f7ff fe9e 	bl	800707c <NRF24_CE>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8007340:	2096      	movs	r0, #150	; 0x96
 8007342:	f7ff fe61 	bl	8007008 <NRF24_DelayMicroSeconds>
}
 8007346:	bf00      	nop
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	20000448 	.word	0x20000448

08007350 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void) {
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0
	NRF24_CE(0);
 8007354:	2000      	movs	r0, #0
 8007356:	f7ff fe91 	bl	800707c <NRF24_CE>
	NRF24_flush_tx();
 800735a:	f7ff ff93 	bl	8007284 <NRF24_flush_tx>
	NRF24_flush_rx();
 800735e:	f7ff ff99 	bl	8007294 <NRF24_flush_rx>
}
 8007362:	bf00      	nop
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write(const void *buf, uint8_t len) {
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8007374:	f000 fb39 	bl	80079ea <NRF24_resetStatus>
	NRF24_startWrite(buf, len);
 8007378:	78fb      	ldrb	r3, [r7, #3]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 faa8 	bl	80078d2 <NRF24_startWrite>
	//Data monitor
	uint8_t observe_tx;
	uint8_t status;
	uint32_t sent_at = HAL_GetTick();
 8007382:	f7fa ffa7 	bl	80022d4 <HAL_GetTick>
 8007386:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8007388:	230a      	movs	r3, #10
 800738a:	613b      	str	r3, [r7, #16]
	do {
		NRF24_read_registerN(REG_OBSERVE_TX, &observe_tx, 1);
 800738c:	f107 030d 	add.w	r3, r7, #13
 8007390:	2201      	movs	r2, #1
 8007392:	4619      	mov	r1, r3
 8007394:	2008      	movs	r0, #8
 8007396:	f7ff feb1 	bl	80070fc <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800739a:	f7ff ff83 	bl	80072a4 <NRF24_get_status>
 800739e:	4603      	mov	r3, r0
 80073a0:	73fb      	strb	r3, [r7, #15]
	} while (!(status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT)))
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
 80073a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
			&& (HAL_GetTick() - sent_at < timeout));
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d107      	bne.n	80073bc <NRF24_write+0x54>
 80073ac:	f7fa ff92 	bl	80022d4 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d8e7      	bhi.n	800738c <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
	NRF24_whatHappened(&tx_ok, &tx_fail, &ack_payload_available);
 80073bc:	f107 010b 	add.w	r1, r7, #11
 80073c0:	f107 030c 	add.w	r3, r7, #12
 80073c4:	4a0c      	ldr	r2, [pc, #48]	; (80073f8 <NRF24_write+0x90>)
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 fadc 	bl	8007984 <NRF24_whatHappened>
	retStatus = tx_ok;
 80073cc:	7b3b      	ldrb	r3, [r7, #12]
 80073ce:	73bb      	strb	r3, [r7, #14]
	if (ack_payload_available) {
 80073d0:	4b09      	ldr	r3, [pc, #36]	; (80073f8 <NRF24_write+0x90>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d005      	beq.n	80073e4 <NRF24_write+0x7c>
		ack_payload_length = NRF24_getDynamicPayloadSize();
 80073d8:	f000 f900 	bl	80075dc <NRF24_getDynamicPayloadSize>
 80073dc:	4603      	mov	r3, r0
 80073de:	461a      	mov	r2, r3
 80073e0:	4b06      	ldr	r3, [pc, #24]	; (80073fc <NRF24_write+0x94>)
 80073e2:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 80073e4:	f000 f80c 	bl	8007400 <NRF24_available>
	NRF24_flush_tx();
 80073e8:	f7ff ff4c 	bl	8007284 <NRF24_flush_tx>
	return retStatus;
 80073ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20000450 	.word	0x20000450
 80073fc:	20000451 	.word	0x20000451

08007400 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void) {
 8007400:	b580      	push	{r7, lr}
 8007402:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8007404:	2000      	movs	r0, #0
 8007406:	f000 fa34 	bl	8007872 <NRF24_availablePipe>
 800740a:	4603      	mov	r3, r0
}
 800740c:	4618      	mov	r0, r3
 800740e:	bd80      	pop	{r7, pc}

08007410 <NRF24_read>:
//17. Read received data
bool NRF24_read(void *buf, uint8_t len) {
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload(buf, len);
 800741c:	78fb      	ldrb	r3, [r7, #3]
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff feff 	bl	8007224 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8007426:	2017      	movs	r0, #23
 8007428:	f7ff fe40 	bl	80070ac <NRF24_read_register>
 800742c:	4603      	mov	r3, r0
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8007434:	f7ff ff2e 	bl	8007294 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8007438:	f000 f8d0 	bl	80075dc <NRF24_getDynamicPayloadSize>
	return rxStatus;
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	2b00      	cmp	r3, #0
 8007440:	bf14      	ite	ne
 8007442:	2301      	movne	r3, #1
 8007444:	2300      	moveq	r3, #0
 8007446:	b2db      	uxtb	r3, r3
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address) {
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t*) (&address), 5);
 800745a:	463b      	mov	r3, r7
 800745c:	2205      	movs	r2, #5
 800745e:	4619      	mov	r1, r3
 8007460:	200a      	movs	r0, #10
 8007462:	f7ff fe95 	bl	8007190 <NRF24_write_registerN>
	NRF24_write_registerN(REG_TX_ADDR, (uint8_t*) (&address), 5);
 8007466:	463b      	mov	r3, r7
 8007468:	2205      	movs	r2, #5
 800746a:	4619      	mov	r1, r3
 800746c:	2010      	movs	r0, #16
 800746e:	f7ff fe8f 	bl	8007190 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8007472:	2320      	movs	r3, #32
 8007474:	73fb      	strb	r3, [r7, #15]
	NRF24_write_register(REG_RX_PW_P0, MIN(payload_size, max_payload_size));
 8007476:	4b07      	ldr	r3, [pc, #28]	; (8007494 <NRF24_openWritingPipe+0x44>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	7bfa      	ldrb	r2, [r7, #15]
 800747c:	4293      	cmp	r3, r2
 800747e:	bf28      	it	cs
 8007480:	4613      	movcs	r3, r2
 8007482:	b2db      	uxtb	r3, r3
 8007484:	4619      	mov	r1, r3
 8007486:	2011      	movs	r0, #17
 8007488:	f7ff fe60 	bl	800714c <NRF24_write_register>
}
 800748c:	bf00      	nop
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20000452 	.word	0x20000452

08007498 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address) {
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	4601      	mov	r1, r0
 80074a0:	e9c7 2300 	strd	r2, r3, [r7]
 80074a4:	460b      	mov	r3, r1
 80074a6:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d104      	bne.n	80074b8 <NRF24_openReadingPipe+0x20>
		pipe0_reading_address = address;
 80074ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074b2:	491c      	ldr	r1, [pc, #112]	; (8007524 <NRF24_openReadingPipe+0x8c>)
 80074b4:	e9c1 2300 	strd	r2, r3, [r1]

	if (number <= 6) {
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
 80074ba:	2b06      	cmp	r3, #6
 80074bc:	d82d      	bhi.n	800751a <NRF24_openReadingPipe+0x82>
		if (number < 2) {
 80074be:	7bfb      	ldrb	r3, [r7, #15]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d808      	bhi.n	80074d6 <NRF24_openReadingPipe+0x3e>
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number],
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	4a18      	ldr	r2, [pc, #96]	; (8007528 <NRF24_openReadingPipe+0x90>)
 80074c8:	5cd3      	ldrb	r3, [r2, r3]
 80074ca:	4639      	mov	r1, r7
 80074cc:	2205      	movs	r2, #5
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff fe5e 	bl	8007190 <NRF24_write_registerN>
 80074d4:	e007      	b.n	80074e6 <NRF24_openReadingPipe+0x4e>
					(uint8_t*) (&address), 5);
		} else {
			NRF24_write_registerN(NRF24_ADDR_REGS[number],
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
 80074d8:	4a13      	ldr	r2, [pc, #76]	; (8007528 <NRF24_openReadingPipe+0x90>)
 80074da:	5cd3      	ldrb	r3, [r2, r3]
 80074dc:	4639      	mov	r1, r7
 80074de:	2201      	movs	r2, #1
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff fe55 	bl	8007190 <NRF24_write_registerN>
					(uint8_t*) (&address), 1);
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number], payload_size);
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	4a10      	ldr	r2, [pc, #64]	; (800752c <NRF24_openReadingPipe+0x94>)
 80074ea:	5cd3      	ldrb	r3, [r2, r3]
 80074ec:	4a10      	ldr	r2, [pc, #64]	; (8007530 <NRF24_openReadingPipe+0x98>)
 80074ee:	7812      	ldrb	r2, [r2, #0]
 80074f0:	4611      	mov	r1, r2
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7ff fe2a 	bl	800714c <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR,
				NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80074f8:	2002      	movs	r0, #2
 80074fa:	f7ff fdd7 	bl	80070ac <NRF24_read_register>
 80074fe:	4603      	mov	r3, r0
 8007500:	b25a      	sxtb	r2, r3
 8007502:	7bfb      	ldrb	r3, [r7, #15]
 8007504:	2101      	movs	r1, #1
 8007506:	fa01 f303 	lsl.w	r3, r1, r3
 800750a:	b25b      	sxtb	r3, r3
 800750c:	4313      	orrs	r3, r2
 800750e:	b25b      	sxtb	r3, r3
		NRF24_write_register(REG_EN_RXADDR,
 8007510:	b2db      	uxtb	r3, r3
 8007512:	4619      	mov	r1, r3
 8007514:	2002      	movs	r0, #2
 8007516:	f7ff fe19 	bl	800714c <NRF24_write_register>
	}

}
 800751a:	bf00      	nop
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20000448 	.word	0x20000448
 8007528:	0800d140 	.word	0x0800d140
 800752c:	0800d148 	.word	0x0800d148
 8007530:	20000452 	.word	0x20000452

08007534 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count) {
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	4603      	mov	r3, r0
 800753c:	460a      	mov	r2, r1
 800753e:	71fb      	strb	r3, [r7, #7]
 8007540:	4613      	mov	r3, r2
 8007542:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,
			(delay & 0xf) << BIT_ARD | (count & 0xf) << BIT_ARC);
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	011b      	lsls	r3, r3, #4
 8007548:	b25a      	sxtb	r2, r3
 800754a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800754e:	f003 030f 	and.w	r3, r3, #15
 8007552:	b25b      	sxtb	r3, r3
 8007554:	4313      	orrs	r3, r2
 8007556:	b25b      	sxtb	r3, r3
	NRF24_write_register(REG_SETUP_RETR,
 8007558:	b2db      	uxtb	r3, r3
 800755a:	4619      	mov	r1, r3
 800755c:	2004      	movs	r0, #4
 800755e:	f7ff fdf5 	bl	800714c <NRF24_write_register>
}
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel) {
 800756a:	b580      	push	{r7, lr}
 800756c:	b084      	sub	sp, #16
 800756e:	af00      	add	r7, sp, #0
 8007570:	4603      	mov	r3, r0
 8007572:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8007574:	237f      	movs	r3, #127	; 0x7f
 8007576:	73fb      	strb	r3, [r7, #15]
	NRF24_write_register(REG_RF_CH, MIN(channel, max_channel));
 8007578:	7bfa      	ldrb	r2, [r7, #15]
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	4293      	cmp	r3, r2
 800757e:	bf28      	it	cs
 8007580:	4613      	movcs	r3, r2
 8007582:	b2db      	uxtb	r3, r3
 8007584:	4619      	mov	r1, r3
 8007586:	2005      	movs	r0, #5
 8007588:	f7ff fde0 	bl	800714c <NRF24_write_register>
}
 800758c:	bf00      	nop
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size) {
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	4603      	mov	r3, r0
 800759c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800759e:	2320      	movs	r3, #32
 80075a0:	73fb      	strb	r3, [r7, #15]
	payload_size = MIN(size, max_payload_size);
 80075a2:	7bfa      	ldrb	r2, [r7, #15]
 80075a4:	79fb      	ldrb	r3, [r7, #7]
 80075a6:	4293      	cmp	r3, r2
 80075a8:	bf28      	it	cs
 80075aa:	4613      	movcs	r3, r2
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <NRF24_setPayloadSize+0x2c>)
 80075b0:	701a      	strb	r2, [r3, #0]
}
 80075b2:	bf00      	nop
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	20000452 	.word	0x20000452

080075c4 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void) {
 80075c4:	b480      	push	{r7}
 80075c6:	af00      	add	r7, sp, #0
	return payload_size;
 80075c8:	4b03      	ldr	r3, [pc, #12]	; (80075d8 <NRF24_getPayloadSize+0x14>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	20000452 	.word	0x20000452

080075dc <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void) {
 80075dc:	b580      	push	{r7, lr}
 80075de:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80075e0:	2060      	movs	r0, #96	; 0x60
 80075e2:	f7ff fd63 	bl	80070ac <NRF24_read_register>
 80075e6:	4603      	mov	r3, r0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	bd80      	pop	{r7, pc}

080075ec <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void) {
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	NRF24_write_register(REG_FEATURE, NRF24_read_register(
 80075f0:	201d      	movs	r0, #29
 80075f2:	f7ff fd5b 	bl	80070ac <NRF24_read_register>
 80075f6:	4603      	mov	r3, r0
 80075f8:	f043 0306 	orr.w	r3, r3, #6
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	4619      	mov	r1, r3
 8007600:	201d      	movs	r0, #29
 8007602:	f7ff fda3 	bl	800714c <NRF24_write_register>
	REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL));
	if (!NRF24_read_register(REG_FEATURE)) {
 8007606:	201d      	movs	r0, #29
 8007608:	f7ff fd50 	bl	80070ac <NRF24_read_register>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10c      	bne.n	800762c <NRF24_enableAckPayload+0x40>
		NRF24_ACTIVATE_cmd();
 8007612:	f000 f9f3 	bl	80079fc <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE, NRF24_read_register(
 8007616:	201d      	movs	r0, #29
 8007618:	f7ff fd48 	bl	80070ac <NRF24_read_register>
 800761c:	4603      	mov	r3, r0
 800761e:	f043 0306 	orr.w	r3, r3, #6
 8007622:	b2db      	uxtb	r3, r3
 8007624:	4619      	mov	r1, r3
 8007626:	201d      	movs	r0, #29
 8007628:	f7ff fd90 	bl	800714c <NRF24_write_register>
		REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL));
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,
			NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 800762c:	201c      	movs	r0, #28
 800762e:	f7ff fd3d 	bl	80070ac <NRF24_read_register>
 8007632:	4603      	mov	r3, r0
	NRF24_write_register(REG_DYNPD,
 8007634:	f043 0303 	orr.w	r3, r3, #3
 8007638:	b2db      	uxtb	r3, r3
 800763a:	4619      	mov	r1, r3
 800763c:	201c      	movs	r0, #28
 800763e:	f7ff fd85 	bl	800714c <NRF24_write_register>
}
 8007642:	bf00      	nop
 8007644:	bd80      	pop	{r7, pc}
	...

08007648 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void) {
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,
			NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_DPL));
 800764c:	201d      	movs	r0, #29
 800764e:	f7ff fd2d 	bl	80070ac <NRF24_read_register>
 8007652:	4603      	mov	r3, r0
	NRF24_write_register(REG_FEATURE,
 8007654:	f043 0304 	orr.w	r3, r3, #4
 8007658:	b2db      	uxtb	r3, r3
 800765a:	4619      	mov	r1, r3
 800765c:	201d      	movs	r0, #29
 800765e:	f7ff fd75 	bl	800714c <NRF24_write_register>
	if (!NRF24_read_register(REG_FEATURE)) {
 8007662:	201d      	movs	r0, #29
 8007664:	f7ff fd22 	bl	80070ac <NRF24_read_register>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10c      	bne.n	8007688 <NRF24_enableDynamicPayloads+0x40>
		NRF24_ACTIVATE_cmd();
 800766e:	f000 f9c5 	bl	80079fc <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,
				NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_DPL));
 8007672:	201d      	movs	r0, #29
 8007674:	f7ff fd1a 	bl	80070ac <NRF24_read_register>
 8007678:	4603      	mov	r3, r0
		NRF24_write_register(REG_FEATURE,
 800767a:	f043 0304 	orr.w	r3, r3, #4
 800767e:	b2db      	uxtb	r3, r3
 8007680:	4619      	mov	r1, r3
 8007682:	201d      	movs	r0, #29
 8007684:	f7ff fd62 	bl	800714c <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,
			NRF24_read_register(
 8007688:	201c      	movs	r0, #28
 800768a:	f7ff fd0f 	bl	80070ac <NRF24_read_register>
 800768e:	4603      	mov	r3, r0
	NRF24_write_register(REG_DYNPD,
 8007690:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8007694:	b2db      	uxtb	r3, r3
 8007696:	4619      	mov	r1, r3
 8007698:	201c      	movs	r0, #28
 800769a:	f7ff fd57 	bl	800714c <NRF24_write_register>
					REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;
 800769e:	4b02      	ldr	r3, [pc, #8]	; (80076a8 <NRF24_enableDynamicPayloads+0x60>)
 80076a0:	2201      	movs	r2, #1
 80076a2:	701a      	strb	r2, [r3, #0]

}
 80076a4:	bf00      	nop
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20000453 	.word	0x20000453

080076ac <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void) {
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,
			NRF24_read_register(REG_FEATURE) & ~(_BV(BIT_EN_DPL)));
 80076b0:	201d      	movs	r0, #29
 80076b2:	f7ff fcfb 	bl	80070ac <NRF24_read_register>
 80076b6:	4603      	mov	r3, r0
	NRF24_write_register(REG_FEATURE,
 80076b8:	f023 0304 	bic.w	r3, r3, #4
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	4619      	mov	r1, r3
 80076c0:	201d      	movs	r0, #29
 80076c2:	f7ff fd43 	bl	800714c <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD, 0);
 80076c6:	2100      	movs	r1, #0
 80076c8:	201c      	movs	r0, #28
 80076ca:	f7ff fd3f 	bl	800714c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80076ce:	4b02      	ldr	r3, [pc, #8]	; (80076d8 <NRF24_disableDynamicPayloads+0x2c>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	701a      	strb	r2, [r3, #0]
}
 80076d4:	bf00      	nop
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20000453 	.word	0x20000453

080076dc <NRF24_setAutoAck>:
//27. Check if module is NRF24L01+ or normal module
bool NRF24_isNRF_Plus(void) {
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable) {
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	71fb      	strb	r3, [r7, #7]
	if (enable)
 80076e6:	79fb      	ldrb	r3, [r7, #7]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d004      	beq.n	80076f6 <NRF24_setAutoAck+0x1a>
		NRF24_write_register(REG_EN_AA, 0x3F);
 80076ec:	213f      	movs	r1, #63	; 0x3f
 80076ee:	2001      	movs	r0, #1
 80076f0:	f7ff fd2c 	bl	800714c <NRF24_write_register>
	else
		NRF24_write_register(REG_EN_AA, 0x00);
}
 80076f4:	e003      	b.n	80076fe <NRF24_setAutoAck+0x22>
		NRF24_write_register(REG_EN_AA, 0x00);
 80076f6:	2100      	movs	r1, #0
 80076f8:	2001      	movs	r0, #1
 80076fa:	f7ff fd27 	bl	800714c <NRF24_write_register>
}
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <NRF24_setPALevel>:
		}
		NRF24_write_register( REG_EN_AA, en_aa);
	}
}
//30. Set transmit power level
void NRF24_setPALevel(rf24_pa_dbm_e level) {
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	4603      	mov	r3, r0
 800770e:	71fb      	strb	r3, [r7, #7]

	uint8_t setup = NRF24_read_register(REG_RF_SETUP);
 8007710:	2006      	movs	r0, #6
 8007712:	f7ff fccb 	bl	80070ac <NRF24_read_register>
 8007716:	4603      	mov	r3, r0
 8007718:	73fb      	strb	r3, [r7, #15]
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 800771a:	7bfb      	ldrb	r3, [r7, #15]
 800771c:	f023 0306 	bic.w	r3, r3, #6
 8007720:	73fb      	strb	r3, [r7, #15]

	// switch uses RAM (evil!)
	if (level == RF24_PA_0dB) {
 8007722:	79fb      	ldrb	r3, [r7, #7]
 8007724:	2b03      	cmp	r3, #3
 8007726:	d104      	bne.n	8007732 <NRF24_setPALevel+0x2c>
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 8007728:	7bfb      	ldrb	r3, [r7, #15]
 800772a:	f043 0306 	orr.w	r3, r3, #6
 800772e:	73fb      	strb	r3, [r7, #15]
 8007730:	e019      	b.n	8007766 <NRF24_setPALevel+0x60>
	} else if (level == RF24_PA_m6dB) {
 8007732:	79fb      	ldrb	r3, [r7, #7]
 8007734:	2b02      	cmp	r3, #2
 8007736:	d104      	bne.n	8007742 <NRF24_setPALevel+0x3c>
		setup |= _BV(RF_PWR_HIGH);
 8007738:	7bfb      	ldrb	r3, [r7, #15]
 800773a:	f043 0304 	orr.w	r3, r3, #4
 800773e:	73fb      	strb	r3, [r7, #15]
 8007740:	e011      	b.n	8007766 <NRF24_setPALevel+0x60>
	} else if (level == RF24_PA_m12dB) {
 8007742:	79fb      	ldrb	r3, [r7, #7]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d104      	bne.n	8007752 <NRF24_setPALevel+0x4c>
		setup |= _BV(RF_PWR_LOW);
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	f043 0302 	orr.w	r3, r3, #2
 800774e:	73fb      	strb	r3, [r7, #15]
 8007750:	e009      	b.n	8007766 <NRF24_setPALevel+0x60>
	} else if (level == RF24_PA_m18dB) {
 8007752:	79fb      	ldrb	r3, [r7, #7]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d006      	beq.n	8007766 <NRF24_setPALevel+0x60>
		// nothing
	} else if (level == RF24_PA_ERROR) {
 8007758:	79fb      	ldrb	r3, [r7, #7]
 800775a:	2b04      	cmp	r3, #4
 800775c:	d103      	bne.n	8007766 <NRF24_setPALevel+0x60>
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	f043 0306 	orr.w	r3, r3, #6
 8007764:	73fb      	strb	r3, [r7, #15]
	}

	NRF24_write_register( REG_RF_SETUP, setup);
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	4619      	mov	r1, r3
 800776a:	2006      	movs	r0, #6
 800776c:	f7ff fcee 	bl	800714c <NRF24_write_register>
}
 8007770:	bf00      	nop
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <NRF24_setDataRate>:
 return result;
 }

 */
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed) {
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	4603      	mov	r3, r0
 8007780:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8007782:	2300      	movs	r3, #0
 8007784:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP);
 8007786:	2006      	movs	r0, #6
 8007788:	f7ff fc90 	bl	80070ac <NRF24_read_register>
 800778c:	4603      	mov	r3, r0
 800778e:	73bb      	strb	r3, [r7, #14]

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false;
 8007790:	4b1b      	ldr	r3, [pc, #108]	; (8007800 <NRF24_setDataRate+0x88>)
 8007792:	2200      	movs	r2, #0
 8007794:	701a      	strb	r2, [r3, #0]
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 8007796:	7bbb      	ldrb	r3, [r7, #14]
 8007798:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800779c:	73bb      	strb	r3, [r7, #14]

	if (speed == RF24_250KBPS) {
 800779e:	79fb      	ldrb	r3, [r7, #7]
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d107      	bne.n	80077b4 <NRF24_setDataRate+0x3c>
		// Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
		// Making it '10'.
		wide_band = false;
 80077a4:	4b16      	ldr	r3, [pc, #88]	; (8007800 <NRF24_setDataRate+0x88>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	701a      	strb	r2, [r3, #0]
		setup |= _BV(RF_DR_LOW);
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	f043 0320 	orr.w	r3, r3, #32
 80077b0:	73bb      	strb	r3, [r7, #14]
 80077b2:	e00d      	b.n	80077d0 <NRF24_setDataRate+0x58>
	} else {
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if (speed == RF24_2MBPS) {
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d107      	bne.n	80077ca <NRF24_setDataRate+0x52>
			wide_band = true;
 80077ba:	4b11      	ldr	r3, [pc, #68]	; (8007800 <NRF24_setDataRate+0x88>)
 80077bc:	2201      	movs	r2, #1
 80077be:	701a      	strb	r2, [r3, #0]
			setup |= _BV(RF_DR_HIGH);
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	f043 0308 	orr.w	r3, r3, #8
 80077c6:	73bb      	strb	r3, [r7, #14]
 80077c8:	e002      	b.n	80077d0 <NRF24_setDataRate+0x58>
		} else {
			// 1Mbs
			wide_band = false;
 80077ca:	4b0d      	ldr	r3, [pc, #52]	; (8007800 <NRF24_setDataRate+0x88>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	701a      	strb	r2, [r3, #0]
		}
	}
	NRF24_write_register(REG_RF_SETUP, setup);
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	4619      	mov	r1, r3
 80077d4:	2006      	movs	r0, #6
 80077d6:	f7ff fcb9 	bl	800714c <NRF24_write_register>

	// Verify our result
	if (NRF24_read_register(REG_RF_SETUP) == setup) {
 80077da:	2006      	movs	r0, #6
 80077dc:	f7ff fc66 	bl	80070ac <NRF24_read_register>
 80077e0:	4603      	mov	r3, r0
 80077e2:	461a      	mov	r2, r3
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d102      	bne.n	80077f0 <NRF24_setDataRate+0x78>
		result = true;
 80077ea:	2301      	movs	r3, #1
 80077ec:	73fb      	strb	r3, [r7, #15]
 80077ee:	e002      	b.n	80077f6 <NRF24_setDataRate+0x7e>
	} else {
		wide_band = false;
 80077f0:	4b03      	ldr	r3, [pc, #12]	; (8007800 <NRF24_setDataRate+0x88>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	701a      	strb	r2, [r3, #0]
	}

	return result;
 80077f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	20000454 	.word	0x20000454

08007804 <NRF24_setCRCLength>:
		result = RF24_1MBPS;
	}
	return result;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length) {
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	4603      	mov	r3, r0
 800780c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG)
 800780e:	2000      	movs	r0, #0
 8007810:	f7ff fc4c 	bl	80070ac <NRF24_read_register>
 8007814:	4603      	mov	r3, r0
 8007816:	f023 030c 	bic.w	r3, r3, #12
 800781a:	73fb      	strb	r3, [r7, #15]
			& ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC));

	// switch uses RAM
	if (length == RF24_CRC_DISABLED) {
 800781c:	79fb      	ldrb	r3, [r7, #7]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00f      	beq.n	8007842 <NRF24_setCRCLength+0x3e>
		// Do nothing, we turned it off above.
	} else if (length == RF24_CRC_8) {
 8007822:	79fb      	ldrb	r3, [r7, #7]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d104      	bne.n	8007832 <NRF24_setCRCLength+0x2e>
		config |= _BV(BIT_EN_CRC);
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	f043 0308 	orr.w	r3, r3, #8
 800782e:	73fb      	strb	r3, [r7, #15]
 8007830:	e007      	b.n	8007842 <NRF24_setCRCLength+0x3e>
	} else {
		config |= _BV(BIT_EN_CRC);
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	f043 0308 	orr.w	r3, r3, #8
 8007838:	73fb      	strb	r3, [r7, #15]
		config |= _BV(BIT_CRCO);
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	f043 0304 	orr.w	r3, r3, #4
 8007840:	73fb      	strb	r3, [r7, #15]
	}
	NRF24_write_register( REG_CONFIG, config);
 8007842:	7bfb      	ldrb	r3, [r7, #15]
 8007844:	4619      	mov	r1, r3
 8007846:	2000      	movs	r0, #0
 8007848:	f7ff fc80 	bl	800714c <NRF24_write_register>
}
 800784c:	bf00      	nop
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <NRF24_powerDown>:
void NRF24_powerUp(void) {
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void) {
 8007854:	b580      	push	{r7, lr}
 8007856:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8007858:	2000      	movs	r0, #0
 800785a:	f7ff fc27 	bl	80070ac <NRF24_read_register>
 800785e:	4603      	mov	r3, r0
	NRF24_write_register(REG_CONFIG,
 8007860:	f023 0302 	bic.w	r3, r3, #2
 8007864:	b2db      	uxtb	r3, r3
 8007866:	4619      	mov	r1, r3
 8007868:	2000      	movs	r0, #0
 800786a:	f7ff fc6f 	bl	800714c <NRF24_write_register>
}
 800786e:	bf00      	nop
 8007870:	bd80      	pop	{r7, pc}

08007872 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t *pipe_num) {
 8007872:	b580      	push	{r7, lr}
 8007874:	b084      	sub	sp, #16
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800787a:	f7ff fd13 	bl	80072a4 <NRF24_get_status>
 800787e:	4603      	mov	r3, r0
 8007880:	73fb      	strb	r3, [r7, #15]
	bool result = (status & _BV(BIT_RX_DR));
 8007882:	7bfb      	ldrb	r3, [r7, #15]
 8007884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007888:	2b00      	cmp	r3, #0
 800788a:	bf14      	ite	ne
 800788c:	2301      	movne	r3, #1
 800788e:	2300      	moveq	r3, #0
 8007890:	73bb      	strb	r3, [r7, #14]

	if (result) {
 8007892:	7bbb      	ldrb	r3, [r7, #14]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d017      	beq.n	80078c8 <NRF24_availablePipe+0x56>
		// If the caller wants the pipe number, include that
		if (pipe_num)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d007      	beq.n	80078ae <NRF24_availablePipe+0x3c>
			*pipe_num = (status >> BIT_RX_P_NO) & 0x7;
 800789e:	7bfb      	ldrb	r3, [r7, #15]
 80078a0:	085b      	lsrs	r3, r3, #1
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	f003 0307 	and.w	r3, r3, #7
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	701a      	strb	r2, [r3, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS, _BV(BIT_RX_DR));
 80078ae:	2140      	movs	r1, #64	; 0x40
 80078b0:	2007      	movs	r0, #7
 80078b2:	f7ff fc4b 	bl	800714c <NRF24_write_register>

		// Handle ack payload receipt
		if (status & _BV(BIT_TX_DS)) {
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
 80078b8:	f003 0320 	and.w	r3, r3, #32
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <NRF24_availablePipe+0x56>
			NRF24_write_register(REG_STATUS, _BV(BIT_TX_DS));
 80078c0:	2120      	movs	r1, #32
 80078c2:	2007      	movs	r0, #7
 80078c4:	f7ff fc42 	bl	800714c <NRF24_write_register>
		}
	}
	return result;
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite(const void *buf, uint8_t len) {
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b082      	sub	sp, #8
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
	NRF24_CE(0);
 80078de:	2000      	movs	r0, #0
 80078e0:	f7ff fbcc 	bl	800707c <NRF24_CE>
	NRF24_write_register(REG_CONFIG,
			(NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP))
 80078e4:	2000      	movs	r0, #0
 80078e6:	f7ff fbe1 	bl	80070ac <NRF24_read_register>
 80078ea:	4603      	mov	r3, r0
					& ~_BV(BIT_PRIM_RX));
 80078ec:	f043 0302 	orr.w	r3, r3, #2
 80078f0:	b2db      	uxtb	r3, r3
	NRF24_write_register(REG_CONFIG,
 80078f2:	f023 0301 	bic.w	r3, r3, #1
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	4619      	mov	r1, r3
 80078fa:	2000      	movs	r0, #0
 80078fc:	f7ff fc26 	bl	800714c <NRF24_write_register>
	NRF24_CE(1);
 8007900:	2001      	movs	r0, #1
 8007902:	f7ff fbbb 	bl	800707c <NRF24_CE>
	NRF24_DelayMicroSeconds(150);
 8007906:	2096      	movs	r0, #150	; 0x96
 8007908:	f7ff fb7e 	bl	8007008 <NRF24_DelayMicroSeconds>
	// Send the payload
	NRF24_write_payload(buf, len);
 800790c:	78fb      	ldrb	r3, [r7, #3]
 800790e:	4619      	mov	r1, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7ff fc65 	bl	80071e0 <NRF24_write_payload>
	// Enable Tx for 15usec
	NRF24_CE(1);
 8007916:	2001      	movs	r0, #1
 8007918:	f7ff fbb0 	bl	800707c <NRF24_CE>
	NRF24_DelayMicroSeconds(15);
 800791c:	200f      	movs	r0, #15
 800791e:	f7ff fb73 	bl	8007008 <NRF24_DelayMicroSeconds>
	NRF24_CE(0);
 8007922:	2000      	movs	r0, #0
 8007924:	f7ff fbaa 	bl	800707c <NRF24_CE>
}
 8007928:	bf00      	nop
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <NRF24_writeAckPayload>:
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void *buf, uint8_t len) {
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	4603      	mov	r3, r0
 8007938:	6039      	str	r1, [r7, #0]
 800793a:	71fb      	strb	r3, [r7, #7]
 800793c:	4613      	mov	r3, r2
 800793e:	71bb      	strb	r3, [r7, #6]
	const uint8_t *current = (uint8_t*) buf;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 8007944:	2320      	movs	r3, #32
 8007946:	72fb      	strb	r3, [r7, #11]
	uint8_t data_len = MIN(len, max_payload_size);
 8007948:	7afa      	ldrb	r2, [r7, #11]
 800794a:	79bb      	ldrb	r3, [r7, #6]
 800794c:	4293      	cmp	r3, r2
 800794e:	bf28      	it	cs
 8007950:	4613      	movcs	r3, r2
 8007952:	72bb      	strb	r3, [r7, #10]
	NRF24_CSN(0);
 8007954:	2000      	movs	r0, #0
 8007956:	f7ff fb79 	bl	800704c <NRF24_CSN>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | (pipe & 0x7), current, data_len);
 800795a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800795e:	f003 0307 	and.w	r3, r3, #7
 8007962:	b25b      	sxtb	r3, r3
 8007964:	f063 0357 	orn	r3, r3, #87	; 0x57
 8007968:	b25b      	sxtb	r3, r3
 800796a:	b2db      	uxtb	r3, r3
 800796c:	7aba      	ldrb	r2, [r7, #10]
 800796e:	68f9      	ldr	r1, [r7, #12]
 8007970:	4618      	mov	r0, r3
 8007972:	f7ff fc0d 	bl	8007190 <NRF24_write_registerN>
	NRF24_CSN(1);
 8007976:	2001      	movs	r0, #1
 8007978:	f7ff fb68 	bl	800704c <NRF24_CSN>
}
 800797c:	bf00      	nop
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <NRF24_whatHappened>:
	bool result = ack_payload_available;
	ack_payload_available = false;
	return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok, bool *tx_fail, bool *rx_ready) {
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8007990:	f7ff fc88 	bl	80072a4 <NRF24_get_status>
 8007994:	4603      	mov	r3, r0
 8007996:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,
 800799e:	2170      	movs	r1, #112	; 0x70
 80079a0:	2007      	movs	r0, #7
 80079a2:	f7ff fbd3 	bl	800714c <NRF24_write_register>
	_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
	// Report to the user what happened
	*tx_ok = status & _BV(BIT_TX_DS);
 80079a6:	7dfb      	ldrb	r3, [r7, #23]
 80079a8:	f003 0320 	and.w	r3, r3, #32
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bf14      	ite	ne
 80079b0:	2301      	movne	r3, #1
 80079b2:	2300      	moveq	r3, #0
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	701a      	strb	r2, [r3, #0]
	*tx_fail = status & _BV(BIT_MAX_RT);
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
 80079bc:	f003 0310 	and.w	r3, r3, #16
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	bf14      	ite	ne
 80079c4:	2301      	movne	r3, #1
 80079c6:	2300      	moveq	r3, #0
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	701a      	strb	r2, [r3, #0]
	*rx_ready = status & _BV(BIT_RX_DR);
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
 80079d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	bf14      	ite	ne
 80079d8:	2301      	movne	r3, #1
 80079da:	2300      	moveq	r3, #0
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	701a      	strb	r2, [r3, #0]
}
 80079e2:	bf00      	nop
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <NRF24_resetStatus>:
bool NRF24_testRPD(void) {
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void) {
 80079ea:	b580      	push	{r7, lr}
 80079ec:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,
 80079ee:	2170      	movs	r1, #112	; 0x70
 80079f0:	2007      	movs	r0, #7
 80079f2:	f7ff fbab 	bl	800714c <NRF24_write_register>
	_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
}
 80079f6:	bf00      	nop
 80079f8:	bd80      	pop	{r7, pc}
	...

080079fc <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void) {
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_CSN(0);
 8007a02:	2000      	movs	r0, #0
 8007a04:	f7ff fb22 	bl	800704c <NRF24_CSN>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8007a08:	2350      	movs	r3, #80	; 0x50
 8007a0a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8007a0c:	2373      	movs	r3, #115	; 0x73
 8007a0e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&hspi2, cmdRxBuf, 2, 100);
 8007a10:	1d39      	adds	r1, r7, #4
 8007a12:	2364      	movs	r3, #100	; 0x64
 8007a14:	2202      	movs	r2, #2
 8007a16:	4805      	ldr	r0, [pc, #20]	; (8007a2c <NRF24_ACTIVATE_cmd+0x30>)
 8007a18:	f7fd ffbd 	bl	8005996 <HAL_SPI_Transmit>
	NRF24_CSN(1);
 8007a1c:	2001      	movs	r0, #1
 8007a1e:	f7ff fb15 	bl	800704c <NRF24_CSN>
}
 8007a22:	bf00      	nop
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	2000034c 	.word	0x2000034c

08007a30 <printRadioSettings>:
//48. Get AckPayload Size
uint8_t NRF24_GetAckPayloadSize(void) {
	return ack_payload_length;
}

void printRadioSettings(void) {
 8007a30:	b5b0      	push	{r4, r5, r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	printf("\t****************************************************\r\n");
 8007a36:	487c      	ldr	r0, [pc, #496]	; (8007c28 <printRadioSettings+0x1f8>)
 8007a38:	f001 fbd4 	bl	80091e4 <puts>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	f7ff fb35 	bl	80070ac <NRF24_read_register>
 8007a42:	4603      	mov	r3, r0
 8007a44:	71fb      	strb	r3, [r7, #7]
	if (reg8Val & (1 << 3)) {
 8007a46:	79fb      	ldrb	r3, [r7, #7]
 8007a48:	f003 0308 	and.w	r3, r3, #8
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00c      	beq.n	8007a6a <printRadioSettings+0x3a>
		if (reg8Val & (1 << 2))
 8007a50:	79fb      	ldrb	r3, [r7, #7]
 8007a52:	f003 0304 	and.w	r3, r3, #4
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <printRadioSettings+0x32>
			printf("\tCRC:\tEnabled, 2 Bytes\r\n");
 8007a5a:	4874      	ldr	r0, [pc, #464]	; (8007c2c <printRadioSettings+0x1fc>)
 8007a5c:	f001 fbc2 	bl	80091e4 <puts>
 8007a60:	e006      	b.n	8007a70 <printRadioSettings+0x40>
		else
			printf("\tCRC:\tEnabled, 1 Byte\r\n");
 8007a62:	4873      	ldr	r0, [pc, #460]	; (8007c30 <printRadioSettings+0x200>)
 8007a64:	f001 fbbe 	bl	80091e4 <puts>
 8007a68:	e002      	b.n	8007a70 <printRadioSettings+0x40>
	} else {
		printf("\tCRC:\tDisabled\r\n");
 8007a6a:	4872      	ldr	r0, [pc, #456]	; (8007c34 <printRadioSettings+0x204>)
 8007a6c:	f001 fbba 	bl	80091e4 <puts>
	}

	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8007a70:	2001      	movs	r0, #1
 8007a72:	f7ff fb1b 	bl	80070ac <NRF24_read_register>
 8007a76:	4603      	mov	r3, r0
 8007a78:	71fb      	strb	r3, [r7, #7]
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	bfcc      	ite	gt
 8007a84:	2301      	movgt	r3, #1
 8007a86:	2300      	movle	r3, #0
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	4618      	mov	r0, r3
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8007a8c:	79fb      	ldrb	r3, [r7, #7]
 8007a8e:	f003 0302 	and.w	r3, r3, #2
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	bfcc      	ite	gt
 8007a96:	2301      	movgt	r3, #1
 8007a98:	2300      	movle	r3, #0
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	461c      	mov	r4, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	f003 0304 	and.w	r3, r3, #4
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	bfcc      	ite	gt
 8007aa8:	2301      	movgt	r3, #1
 8007aaa:	2300      	movle	r3, #0
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	461d      	mov	r5, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 8007ab0:	79fb      	ldrb	r3, [r7, #7]
 8007ab2:	f003 0308 	and.w	r3, r3, #8
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	bfcc      	ite	gt
 8007aba:	2301      	movgt	r3, #1
 8007abc:	2300      	movle	r3, #0
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	461a      	mov	r2, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8007ac2:	79fb      	ldrb	r3, [r7, #7]
 8007ac4:	f003 0310 	and.w	r3, r3, #16
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	bfcc      	ite	gt
 8007acc:	2301      	movgt	r3, #1
 8007ace:	2300      	movle	r3, #0
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	4619      	mov	r1, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8007ad4:	79fb      	ldrb	r3, [r7, #7]
 8007ad6:	f003 0320 	and.w	r3, r3, #32
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	bfcc      	ite	gt
 8007ade:	2301      	movgt	r3, #1
 8007ae0:	2300      	movle	r3, #0
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	9302      	str	r3, [sp, #8]
 8007ae6:	9101      	str	r1, [sp, #4]
 8007ae8:	9200      	str	r2, [sp, #0]
 8007aea:	462b      	mov	r3, r5
 8007aec:	4622      	mov	r2, r4
 8007aee:	4601      	mov	r1, r0
 8007af0:	4851      	ldr	r0, [pc, #324]	; (8007c38 <printRadioSettings+0x208>)
 8007af2:	f001 fb11 	bl	8009118 <iprintf>

	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8007af6:	2002      	movs	r0, #2
 8007af8:	f7ff fad8 	bl	80070ac <NRF24_read_register>
 8007afc:	4603      	mov	r3, r0
 8007afe:	71fb      	strb	r3, [r7, #7]
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	f003 0301 	and.w	r3, r3, #1
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bfcc      	ite	gt
 8007b0a:	2301      	movgt	r3, #1
 8007b0c:	2300      	movle	r3, #0
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	4618      	mov	r0, r3
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8007b12:	79fb      	ldrb	r3, [r7, #7]
 8007b14:	f003 0302 	and.w	r3, r3, #2
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	bfcc      	ite	gt
 8007b1c:	2301      	movgt	r3, #1
 8007b1e:	2300      	movle	r3, #0
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	461c      	mov	r4, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 8007b24:	79fb      	ldrb	r3, [r7, #7]
 8007b26:	f003 0304 	and.w	r3, r3, #4
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	bfcc      	ite	gt
 8007b2e:	2301      	movgt	r3, #1
 8007b30:	2300      	movle	r3, #0
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	461d      	mov	r5, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 8007b36:	79fb      	ldrb	r3, [r7, #7]
 8007b38:	f003 0308 	and.w	r3, r3, #8
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	bfcc      	ite	gt
 8007b40:	2301      	movgt	r3, #1
 8007b42:	2300      	movle	r3, #0
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	461a      	mov	r2, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8007b48:	79fb      	ldrb	r3, [r7, #7]
 8007b4a:	f003 0310 	and.w	r3, r3, #16
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	bfcc      	ite	gt
 8007b52:	2301      	movgt	r3, #1
 8007b54:	2300      	movle	r3, #0
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	4619      	mov	r1, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8007b5a:	79fb      	ldrb	r3, [r7, #7]
 8007b5c:	f003 0320 	and.w	r3, r3, #32
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	bfcc      	ite	gt
 8007b64:	2301      	movgt	r3, #1
 8007b66:	2300      	movle	r3, #0
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	9302      	str	r3, [sp, #8]
 8007b6c:	9101      	str	r1, [sp, #4]
 8007b6e:	9200      	str	r2, [sp, #0]
 8007b70:	462b      	mov	r3, r5
 8007b72:	4622      	mov	r2, r4
 8007b74:	4601      	mov	r1, r0
 8007b76:	4831      	ldr	r0, [pc, #196]	; (8007c3c <printRadioSettings+0x20c>)
 8007b78:	f001 face 	bl	8009118 <iprintf>

	//d) Address width
	reg8Val = NRF24_read_register(0x03) & 0x03;
 8007b7c:	2003      	movs	r0, #3
 8007b7e:	f7ff fa95 	bl	80070ac <NRF24_read_register>
 8007b82:	4603      	mov	r3, r0
 8007b84:	f003 0303 	and.w	r3, r3, #3
 8007b88:	71fb      	strb	r3, [r7, #7]
	reg8Val += 2;
 8007b8a:	79fb      	ldrb	r3, [r7, #7]
 8007b8c:	3302      	adds	r3, #2
 8007b8e:	71fb      	strb	r3, [r7, #7]
	printf("\tSETUP_AW:\t%d bytes \r\n", reg8Val);
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	4619      	mov	r1, r3
 8007b94:	482a      	ldr	r0, [pc, #168]	; (8007c40 <printRadioSettings+0x210>)
 8007b96:	f001 fabf 	bl	8009118 <iprintf>

	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8007b9a:	2005      	movs	r0, #5
 8007b9c:	f7ff fa86 	bl	80070ac <NRF24_read_register>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	71fb      	strb	r3, [r7, #7]
	printf("\tRF_CH:\t%d CH\r\n", reg8Val & 0x7F);
 8007ba4:	79fb      	ldrb	r3, [r7, #7]
 8007ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007baa:	4619      	mov	r1, r3
 8007bac:	4825      	ldr	r0, [pc, #148]	; (8007c44 <printRadioSettings+0x214>)
 8007bae:	f001 fab3 	bl	8009118 <iprintf>

	//f1) Data rate
	reg8Val = NRF24_read_register(0x06) & (_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 8007bb2:	2006      	movs	r0, #6
 8007bb4:	f7ff fa7a 	bl	80070ac <NRF24_read_register>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007bbe:	71fb      	strb	r3, [r7, #7]
	if (reg8Val == _BV(RF_DR_LOW))
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	2b20      	cmp	r3, #32
 8007bc4:	d103      	bne.n	8007bce <printRadioSettings+0x19e>
		printf("\tData Rate:\t250Kbps\r\n");	// '10' = 250KBPS
 8007bc6:	4820      	ldr	r0, [pc, #128]	; (8007c48 <printRadioSettings+0x218>)
 8007bc8:	f001 fb0c 	bl	80091e4 <puts>
 8007bcc:	e00b      	b.n	8007be6 <printRadioSettings+0x1b6>
	else if (reg8Val & _BV(RF_DR_HIGH))
 8007bce:	79fb      	ldrb	r3, [r7, #7]
 8007bd0:	f003 0308 	and.w	r3, r3, #8
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d003      	beq.n	8007be0 <printRadioSettings+0x1b0>
		printf("\tData Rate:\t2Mbps\r\n");
 8007bd8:	481c      	ldr	r0, [pc, #112]	; (8007c4c <printRadioSettings+0x21c>)
 8007bda:	f001 fb03 	bl	80091e4 <puts>
 8007bde:	e002      	b.n	8007be6 <printRadioSettings+0x1b6>
	else {
		printf("\tData Rate:\t1Mbps\r\n");
 8007be0:	481b      	ldr	r0, [pc, #108]	; (8007c50 <printRadioSettings+0x220>)
 8007be2:	f001 faff 	bl	80091e4 <puts>
	}

	//f2) Data rate
	reg8Val = NRF24_read_register(0x06);
 8007be6:	2006      	movs	r0, #6
 8007be8:	f7ff fa60 	bl	80070ac <NRF24_read_register>
 8007bec:	4603      	mov	r3, r0
 8007bee:	71fb      	strb	r3, [r7, #7]

	reg8Val &= (3 << 1);
 8007bf0:	79fb      	ldrb	r3, [r7, #7]
 8007bf2:	f003 0306 	and.w	r3, r3, #6
 8007bf6:	71fb      	strb	r3, [r7, #7]
	reg8Val = (reg8Val >> 1);
 8007bf8:	79fb      	ldrb	r3, [r7, #7]
 8007bfa:	085b      	lsrs	r3, r3, #1
 8007bfc:	71fb      	strb	r3, [r7, #7]
	if (reg8Val == 0)
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d103      	bne.n	8007c0c <printRadioSettings+0x1dc>
		printf("\tRF_PWR:\t-18dB\r\n");
 8007c04:	4813      	ldr	r0, [pc, #76]	; (8007c54 <printRadioSettings+0x224>)
 8007c06:	f001 faed 	bl	80091e4 <puts>
 8007c0a:	e02f      	b.n	8007c6c <printRadioSettings+0x23c>
	else if (reg8Val == 1)
 8007c0c:	79fb      	ldrb	r3, [r7, #7]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d103      	bne.n	8007c1a <printRadioSettings+0x1ea>
		printf("\tRF_PWR:\t-12dB\r\n");
 8007c12:	4811      	ldr	r0, [pc, #68]	; (8007c58 <printRadioSettings+0x228>)
 8007c14:	f001 fae6 	bl	80091e4 <puts>
 8007c18:	e028      	b.n	8007c6c <printRadioSettings+0x23c>
	else if (reg8Val == 2)
 8007c1a:	79fb      	ldrb	r3, [r7, #7]
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d11f      	bne.n	8007c60 <printRadioSettings+0x230>
		printf("\tRF_PWR:\t-6dB\r\n");
 8007c20:	480e      	ldr	r0, [pc, #56]	; (8007c5c <printRadioSettings+0x22c>)
 8007c22:	f001 fadf 	bl	80091e4 <puts>
 8007c26:	e021      	b.n	8007c6c <printRadioSettings+0x23c>
 8007c28:	0800cc64 	.word	0x0800cc64
 8007c2c:	0800cc9c 	.word	0x0800cc9c
 8007c30:	0800ccb4 	.word	0x0800ccb4
 8007c34:	0800cccc 	.word	0x0800cccc
 8007c38:	0800ccdc 	.word	0x0800ccdc
 8007c3c:	0800cd10 	.word	0x0800cd10
 8007c40:	0800cd48 	.word	0x0800cd48
 8007c44:	0800cd60 	.word	0x0800cd60
 8007c48:	0800cd70 	.word	0x0800cd70
 8007c4c:	0800cd88 	.word	0x0800cd88
 8007c50:	0800cd9c 	.word	0x0800cd9c
 8007c54:	0800cdb0 	.word	0x0800cdb0
 8007c58:	0800cdc0 	.word	0x0800cdc0
 8007c5c:	0800cdd0 	.word	0x0800cdd0
	else if (reg8Val == 3)
 8007c60:	79fb      	ldrb	r3, [r7, #7]
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d102      	bne.n	8007c6c <printRadioSettings+0x23c>
		printf("\tRF_PWR:\t0dB\r\n");
 8007c66:	488e      	ldr	r0, [pc, #568]	; (8007ea0 <printRadioSettings+0x470>)
 8007c68:	f001 fabc 	bl	80091e4 <puts>

	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8007c6c:	463b      	mov	r3, r7
 8007c6e:	2205      	movs	r2, #5
 8007c70:	4619      	mov	r1, r3
 8007c72:	200a      	movs	r0, #10
 8007c74:	f7ff fa42 	bl	80070fc <NRF24_read_registerN>
	printf("\tRX_Pipe0 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8007c78:	793b      	ldrb	r3, [r7, #4]
 8007c7a:	4619      	mov	r1, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
	printf("\tRX_Pipe0 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8007c7e:	4618      	mov	r0, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8007c80:	78bb      	ldrb	r3, [r7, #2]
	printf("\tRX_Pipe0 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8007c82:	461c      	mov	r4, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8007c84:	787b      	ldrb	r3, [r7, #1]
 8007c86:	783a      	ldrb	r2, [r7, #0]
	printf("\tRX_Pipe0 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8007c88:	9201      	str	r2, [sp, #4]
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	4623      	mov	r3, r4
 8007c8e:	4602      	mov	r2, r0
 8007c90:	4884      	ldr	r0, [pc, #528]	; (8007ea4 <printRadioSettings+0x474>)
 8007c92:	f001 fa41 	bl	8009118 <iprintf>

	NRF24_read_registerN(0x0A + 1, pipeAddrs, 5);
 8007c96:	463b      	mov	r3, r7
 8007c98:	2205      	movs	r2, #5
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	200b      	movs	r0, #11
 8007c9e:	f7ff fa2d 	bl	80070fc <NRF24_read_registerN>
	printf("\tRX_Pipe1 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8007ca2:	793b      	ldrb	r3, [r7, #4]
 8007ca4:	4619      	mov	r1, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8007ca6:	78fb      	ldrb	r3, [r7, #3]
	printf("\tRX_Pipe1 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8007ca8:	4618      	mov	r0, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8007caa:	78bb      	ldrb	r3, [r7, #2]
	printf("\tRX_Pipe1 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8007cac:	461c      	mov	r4, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8007cae:	787b      	ldrb	r3, [r7, #1]
 8007cb0:	783a      	ldrb	r2, [r7, #0]
	printf("\tRX_Pipe1 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8007cb2:	9201      	str	r2, [sp, #4]
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	4623      	mov	r3, r4
 8007cb8:	4602      	mov	r2, r0
 8007cba:	487b      	ldr	r0, [pc, #492]	; (8007ea8 <printRadioSettings+0x478>)
 8007cbc:	f001 fa2c 	bl	8009118 <iprintf>

	NRF24_read_registerN(0x0A + 2, pipeAddrs, 1);
 8007cc0:	463b      	mov	r3, r7
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	200c      	movs	r0, #12
 8007cc8:	f7ff fa18 	bl	80070fc <NRF24_read_registerN>
	printf("\tRX_Pipe2 Addrs:\txx,xx,xx,xx,%02X\r\n", pipeAddrs[0]);
 8007ccc:	783b      	ldrb	r3, [r7, #0]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4876      	ldr	r0, [pc, #472]	; (8007eac <printRadioSettings+0x47c>)
 8007cd2:	f001 fa21 	bl	8009118 <iprintf>

	NRF24_read_registerN(0x0A + 3, pipeAddrs, 1);
 8007cd6:	463b      	mov	r3, r7
 8007cd8:	2201      	movs	r2, #1
 8007cda:	4619      	mov	r1, r3
 8007cdc:	200d      	movs	r0, #13
 8007cde:	f7ff fa0d 	bl	80070fc <NRF24_read_registerN>
	printf("\tRX_Pipe3 Addrs:\txx,xx,xx,xx,%02X\r\n", pipeAddrs[0]);
 8007ce2:	783b      	ldrb	r3, [r7, #0]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	4872      	ldr	r0, [pc, #456]	; (8007eb0 <printRadioSettings+0x480>)
 8007ce8:	f001 fa16 	bl	8009118 <iprintf>

	NRF24_read_registerN(0x0A + 4, pipeAddrs, 1);
 8007cec:	463b      	mov	r3, r7
 8007cee:	2201      	movs	r2, #1
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	200e      	movs	r0, #14
 8007cf4:	f7ff fa02 	bl	80070fc <NRF24_read_registerN>
	printf("\tRX_Pipe4 Addrs:\txx,xx,xx,xx,%02X\r\n", pipeAddrs[0]);
 8007cf8:	783b      	ldrb	r3, [r7, #0]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	486d      	ldr	r0, [pc, #436]	; (8007eb4 <printRadioSettings+0x484>)
 8007cfe:	f001 fa0b 	bl	8009118 <iprintf>

	NRF24_read_registerN(0x0A + 5, pipeAddrs, 1);
 8007d02:	463b      	mov	r3, r7
 8007d04:	2201      	movs	r2, #1
 8007d06:	4619      	mov	r1, r3
 8007d08:	200f      	movs	r0, #15
 8007d0a:	f7ff f9f7 	bl	80070fc <NRF24_read_registerN>
	printf("\tRX_Pipe5 Addrs:\txx,xx,xx,xx,%02X\r\n", pipeAddrs[0]);
 8007d0e:	783b      	ldrb	r3, [r7, #0]
 8007d10:	4619      	mov	r1, r3
 8007d12:	4869      	ldr	r0, [pc, #420]	; (8007eb8 <printRadioSettings+0x488>)
 8007d14:	f001 fa00 	bl	8009118 <iprintf>

	NRF24_read_registerN(0x0A + 6, pipeAddrs, 5);
 8007d18:	463b      	mov	r3, r7
 8007d1a:	2205      	movs	r2, #5
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	2010      	movs	r0, #16
 8007d20:	f7ff f9ec 	bl	80070fc <NRF24_read_registerN>
	printf("\tTX Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8007d24:	793b      	ldrb	r3, [r7, #4]
 8007d26:	4619      	mov	r1, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8007d28:	78fb      	ldrb	r3, [r7, #3]
	printf("\tTX Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8007d2a:	4618      	mov	r0, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8007d2c:	78bb      	ldrb	r3, [r7, #2]
	printf("\tTX Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8007d2e:	461c      	mov	r4, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8007d30:	787b      	ldrb	r3, [r7, #1]
 8007d32:	783a      	ldrb	r2, [r7, #0]
	printf("\tTX Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8007d34:	9201      	str	r2, [sp, #4]
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	4623      	mov	r3, r4
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	485f      	ldr	r0, [pc, #380]	; (8007ebc <printRadioSettings+0x48c>)
 8007d3e:	f001 f9eb 	bl	8009118 <iprintf>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8007d42:	2011      	movs	r0, #17
 8007d44:	f7ff f9b2 	bl	80070ac <NRF24_read_register>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	71fb      	strb	r3, [r7, #7]
	printf("\tRX_PW_P0:\t%d bytes \r\n", reg8Val & 0x3F);
 8007d4c:	79fb      	ldrb	r3, [r7, #7]
 8007d4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d52:	4619      	mov	r1, r3
 8007d54:	485a      	ldr	r0, [pc, #360]	; (8007ec0 <printRadioSettings+0x490>)
 8007d56:	f001 f9df 	bl	8009118 <iprintf>

	reg8Val = NRF24_read_register(0x11 + 1);
 8007d5a:	2012      	movs	r0, #18
 8007d5c:	f7ff f9a6 	bl	80070ac <NRF24_read_register>
 8007d60:	4603      	mov	r3, r0
 8007d62:	71fb      	strb	r3, [r7, #7]
	printf("\tRX_PW_P1:\t%d bytes \r\n", reg8Val & 0x3F);
 8007d64:	79fb      	ldrb	r3, [r7, #7]
 8007d66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4855      	ldr	r0, [pc, #340]	; (8007ec4 <printRadioSettings+0x494>)
 8007d6e:	f001 f9d3 	bl	8009118 <iprintf>

	reg8Val = NRF24_read_register(0x11 + 2);
 8007d72:	2013      	movs	r0, #19
 8007d74:	f7ff f99a 	bl	80070ac <NRF24_read_register>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	71fb      	strb	r3, [r7, #7]
	printf("\tRX_PW_P2:\t%d bytes \r\n", reg8Val & 0x3F);
 8007d7c:	79fb      	ldrb	r3, [r7, #7]
 8007d7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d82:	4619      	mov	r1, r3
 8007d84:	4850      	ldr	r0, [pc, #320]	; (8007ec8 <printRadioSettings+0x498>)
 8007d86:	f001 f9c7 	bl	8009118 <iprintf>

	//(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	reg8Val = NRF24_read_register(0x11 + 3);
 8007d8a:	2014      	movs	r0, #20
 8007d8c:	f7ff f98e 	bl	80070ac <NRF24_read_register>
 8007d90:	4603      	mov	r3, r0
 8007d92:	71fb      	strb	r3, [r7, #7]
	printf("\tRX_PW_P3:\t%d bytes \r\n", reg8Val & 0x3F);
 8007d94:	79fb      	ldrb	r3, [r7, #7]
 8007d96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	484b      	ldr	r0, [pc, #300]	; (8007ecc <printRadioSettings+0x49c>)
 8007d9e:	f001 f9bb 	bl	8009118 <iprintf>

	reg8Val = NRF24_read_register(0x11 + 4);
 8007da2:	2015      	movs	r0, #21
 8007da4:	f7ff f982 	bl	80070ac <NRF24_read_register>
 8007da8:	4603      	mov	r3, r0
 8007daa:	71fb      	strb	r3, [r7, #7]
	printf("\tRX_PW_P4:\t%d bytes \r\n", reg8Val & 0x3F);
 8007dac:	79fb      	ldrb	r3, [r7, #7]
 8007dae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007db2:	4619      	mov	r1, r3
 8007db4:	4846      	ldr	r0, [pc, #280]	; (8007ed0 <printRadioSettings+0x4a0>)
 8007db6:	f001 f9af 	bl	8009118 <iprintf>

	reg8Val = NRF24_read_register(0x11 + 5);
 8007dba:	2016      	movs	r0, #22
 8007dbc:	f7ff f976 	bl	80070ac <NRF24_read_register>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	71fb      	strb	r3, [r7, #7]
	printf("\tRX_PW_P5:\t%d bytes \r\n", reg8Val & 0x3F);
 8007dc4:	79fb      	ldrb	r3, [r7, #7]
 8007dc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dca:	4619      	mov	r1, r3
 8007dcc:	4841      	ldr	r0, [pc, #260]	; (8007ed4 <printRadioSettings+0x4a4>)
 8007dce:	f001 f9a3 	bl	8009118 <iprintf>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8007dd2:	201c      	movs	r0, #28
 8007dd4:	f7ff f96a 	bl	80070ac <NRF24_read_register>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	71fb      	strb	r3, [r7, #7]
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8007ddc:	79fb      	ldrb	r3, [r7, #7]
 8007dde:	f003 0301 	and.w	r3, r3, #1
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	bfcc      	ite	gt
 8007de6:	2301      	movgt	r3, #1
 8007de8:	2300      	movle	r3, #0
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	4618      	mov	r0, r3
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8007dee:	79fb      	ldrb	r3, [r7, #7]
 8007df0:	f003 0302 	and.w	r3, r3, #2
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bfcc      	ite	gt
 8007df8:	2301      	movgt	r3, #1
 8007dfa:	2300      	movle	r3, #0
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	461c      	mov	r4, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 8007e00:	79fb      	ldrb	r3, [r7, #7]
 8007e02:	f003 0304 	and.w	r3, r3, #4
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	bfcc      	ite	gt
 8007e0a:	2301      	movgt	r3, #1
 8007e0c:	2300      	movle	r3, #0
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	461d      	mov	r5, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 8007e12:	79fb      	ldrb	r3, [r7, #7]
 8007e14:	f003 0308 	and.w	r3, r3, #8
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	bfcc      	ite	gt
 8007e1c:	2301      	movgt	r3, #1
 8007e1e:	2300      	movle	r3, #0
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	461a      	mov	r2, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8007e24:	79fb      	ldrb	r3, [r7, #7]
 8007e26:	f003 0310 	and.w	r3, r3, #16
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	bfcc      	ite	gt
 8007e2e:	2301      	movgt	r3, #1
 8007e30:	2300      	movle	r3, #0
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	4619      	mov	r1, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8007e36:	79fb      	ldrb	r3, [r7, #7]
 8007e38:	f003 0320 	and.w	r3, r3, #32
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	bfcc      	ite	gt
 8007e40:	2301      	movgt	r3, #1
 8007e42:	2300      	movle	r3, #0
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	9302      	str	r3, [sp, #8]
 8007e48:	9101      	str	r1, [sp, #4]
 8007e4a:	9200      	str	r2, [sp, #0]
 8007e4c:	462b      	mov	r3, r5
 8007e4e:	4622      	mov	r2, r4
 8007e50:	4601      	mov	r1, r0
 8007e52:	4821      	ldr	r0, [pc, #132]	; (8007ed8 <printRadioSettings+0x4a8>)
 8007e54:	f001 f960 	bl	8009118 <iprintf>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8007e58:	201d      	movs	r0, #29
 8007e5a:	f7ff f927 	bl	80070ac <NRF24_read_register>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	71fb      	strb	r3, [r7, #7]
	if (reg8Val & (1 << 2))
 8007e62:	79fb      	ldrb	r3, [r7, #7]
 8007e64:	f003 0304 	and.w	r3, r3, #4
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d003      	beq.n	8007e74 <printRadioSettings+0x444>
		printf("\tEN_DPL:\tEnabled \r\n");
 8007e6c:	481b      	ldr	r0, [pc, #108]	; (8007edc <printRadioSettings+0x4ac>)
 8007e6e:	f001 f9b9 	bl	80091e4 <puts>
 8007e72:	e002      	b.n	8007e7a <printRadioSettings+0x44a>
	else
		printf("\tEN_DPL:\tDisabled \r\n");
 8007e74:	481a      	ldr	r0, [pc, #104]	; (8007ee0 <printRadioSettings+0x4b0>)
 8007e76:	f001 f9b5 	bl	80091e4 <puts>

	//k) EN_ACK_PAY
	if (reg8Val & (1 << 1))
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	f003 0302 	and.w	r3, r3, #2
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d003      	beq.n	8007e8c <printRadioSettings+0x45c>
		printf("\tEN_ACK_PAY:\tEnabled \r\n");
 8007e84:	4817      	ldr	r0, [pc, #92]	; (8007ee4 <printRadioSettings+0x4b4>)
 8007e86:	f001 f9ad 	bl	80091e4 <puts>
 8007e8a:	e002      	b.n	8007e92 <printRadioSettings+0x462>
	else
		printf("\tEN_ACK_PAY:\tDisabled \r\n");
 8007e8c:	4816      	ldr	r0, [pc, #88]	; (8007ee8 <printRadioSettings+0x4b8>)
 8007e8e:	f001 f9a9 	bl	80091e4 <puts>
	printf("\t****************************************************\r\n");
 8007e92:	4816      	ldr	r0, [pc, #88]	; (8007eec <printRadioSettings+0x4bc>)
 8007e94:	f001 f9a6 	bl	80091e4 <puts>
}
 8007e98:	bf00      	nop
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8007ea0:	0800cde0 	.word	0x0800cde0
 8007ea4:	0800cdf0 	.word	0x0800cdf0
 8007ea8:	0800ce1c 	.word	0x0800ce1c
 8007eac:	0800ce48 	.word	0x0800ce48
 8007eb0:	0800ce6c 	.word	0x0800ce6c
 8007eb4:	0800ce90 	.word	0x0800ce90
 8007eb8:	0800ceb4 	.word	0x0800ceb4
 8007ebc:	0800ced8 	.word	0x0800ced8
 8007ec0:	0800cf00 	.word	0x0800cf00
 8007ec4:	0800cf18 	.word	0x0800cf18
 8007ec8:	0800cf30 	.word	0x0800cf30
 8007ecc:	0800cf48 	.word	0x0800cf48
 8007ed0:	0800cf60 	.word	0x0800cf60
 8007ed4:	0800cf78 	.word	0x0800cf78
 8007ed8:	0800cf90 	.word	0x0800cf90
 8007edc:	0800cfcc 	.word	0x0800cfcc
 8007ee0:	0800cfe0 	.word	0x0800cfe0
 8007ee4:	0800cff4 	.word	0x0800cff4
 8007ee8:	0800d00c 	.word	0x0800d00c
 8007eec:	0800cc64 	.word	0x0800cc64

08007ef0 <NRF24_SoftwareReset>:
			_BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 0)));
	printf("\t\r\n-------------------------\r\n");

}

void NRF24_SoftwareReset(void) {
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
	//Put pins to idle state
	NRF24_CSN(1);
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	f7ff f8a8 	bl	800704c <NRF24_CSN>
	NRF24_CE(0);
 8007efc:	2000      	movs	r0, #0
 8007efe:	f7ff f8bd 	bl	800707c <NRF24_CE>
	//5 ms initial delay
	HAL_Delay(5);
 8007f02:	2005      	movs	r0, #5
 8007f04:	f7fa f9f2 	bl	80022ec <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8007f08:	2108      	movs	r1, #8
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	f7ff f91e 	bl	800714c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8007f10:	213f      	movs	r1, #63	; 0x3f
 8007f12:	2001      	movs	r0, #1
 8007f14:	f7ff f91a 	bl	800714c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8007f18:	2103      	movs	r1, #3
 8007f1a:	2002      	movs	r0, #2
 8007f1c:	f7ff f916 	bl	800714c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8007f20:	2103      	movs	r1, #3
 8007f22:	2003      	movs	r0, #3
 8007f24:	f7ff f912 	bl	800714c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8007f28:	2103      	movs	r1, #3
 8007f2a:	2004      	movs	r0, #4
 8007f2c:	f7ff f90e 	bl	800714c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8007f30:	2102      	movs	r1, #2
 8007f32:	2005      	movs	r0, #5
 8007f34:	f7ff f90a 	bl	800714c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0F);
 8007f38:	210f      	movs	r1, #15
 8007f3a:	2006      	movs	r0, #6
 8007f3c:	f7ff f906 	bl	800714c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8007f40:	210e      	movs	r1, #14
 8007f42:	2007      	movs	r0, #7
 8007f44:	f7ff f902 	bl	800714c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8007f48:	2100      	movs	r1, #0
 8007f4a:	2008      	movs	r0, #8
 8007f4c:	f7ff f8fe 	bl	800714c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8007f50:	2100      	movs	r1, #0
 8007f52:	2009      	movs	r0, #9
 8007f54:	f7ff f8fa 	bl	800714c <NRF24_write_register>
	uint8_t pipeAddrVar[5];
	pipeAddrVar[4] = 0xE7;
 8007f58:	23e7      	movs	r3, #231	; 0xe7
 8007f5a:	713b      	strb	r3, [r7, #4]
	pipeAddrVar[3] = 0xE7;
 8007f5c:	23e7      	movs	r3, #231	; 0xe7
 8007f5e:	70fb      	strb	r3, [r7, #3]
	pipeAddrVar[2] = 0xE7;
 8007f60:	23e7      	movs	r3, #231	; 0xe7
 8007f62:	70bb      	strb	r3, [r7, #2]
	pipeAddrVar[1] = 0xE7;
 8007f64:	23e7      	movs	r3, #231	; 0xe7
 8007f66:	707b      	strb	r3, [r7, #1]
	pipeAddrVar[0] = 0xE7;
 8007f68:	23e7      	movs	r3, #231	; 0xe7
 8007f6a:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8007f6c:	463b      	mov	r3, r7
 8007f6e:	2205      	movs	r2, #5
 8007f70:	4619      	mov	r1, r3
 8007f72:	200a      	movs	r0, #10
 8007f74:	f7ff f90c 	bl	8007190 <NRF24_write_registerN>
	pipeAddrVar[4] = 0xC2;
 8007f78:	23c2      	movs	r3, #194	; 0xc2
 8007f7a:	713b      	strb	r3, [r7, #4]
	pipeAddrVar[3] = 0xC2;
 8007f7c:	23c2      	movs	r3, #194	; 0xc2
 8007f7e:	70fb      	strb	r3, [r7, #3]
	pipeAddrVar[2] = 0xC2;
 8007f80:	23c2      	movs	r3, #194	; 0xc2
 8007f82:	70bb      	strb	r3, [r7, #2]
	pipeAddrVar[1] = 0xC2;
 8007f84:	23c2      	movs	r3, #194	; 0xc2
 8007f86:	707b      	strb	r3, [r7, #1]
	pipeAddrVar[0] = 0xC2;
 8007f88:	23c2      	movs	r3, #194	; 0xc2
 8007f8a:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8007f8c:	463b      	mov	r3, r7
 8007f8e:	2205      	movs	r2, #5
 8007f90:	4619      	mov	r1, r3
 8007f92:	200b      	movs	r0, #11
 8007f94:	f7ff f8fc 	bl	8007190 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8007f98:	21c3      	movs	r1, #195	; 0xc3
 8007f9a:	200c      	movs	r0, #12
 8007f9c:	f7ff f8d6 	bl	800714c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8007fa0:	21c4      	movs	r1, #196	; 0xc4
 8007fa2:	200d      	movs	r0, #13
 8007fa4:	f7ff f8d2 	bl	800714c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8007fa8:	21c5      	movs	r1, #197	; 0xc5
 8007faa:	200e      	movs	r0, #14
 8007fac:	f7ff f8ce 	bl	800714c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8007fb0:	21c6      	movs	r1, #198	; 0xc6
 8007fb2:	200f      	movs	r0, #15
 8007fb4:	f7ff f8ca 	bl	800714c <NRF24_write_register>
	pipeAddrVar[4] = 0xE7;
 8007fb8:	23e7      	movs	r3, #231	; 0xe7
 8007fba:	713b      	strb	r3, [r7, #4]
	pipeAddrVar[3] = 0xE7;
 8007fbc:	23e7      	movs	r3, #231	; 0xe7
 8007fbe:	70fb      	strb	r3, [r7, #3]
	pipeAddrVar[2] = 0xE7;
 8007fc0:	23e7      	movs	r3, #231	; 0xe7
 8007fc2:	70bb      	strb	r3, [r7, #2]
	pipeAddrVar[1] = 0xE7;
 8007fc4:	23e7      	movs	r3, #231	; 0xe7
 8007fc6:	707b      	strb	r3, [r7, #1]
	pipeAddrVar[0] = 0xE7;
 8007fc8:	23e7      	movs	r3, #231	; 0xe7
 8007fca:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8007fcc:	463b      	mov	r3, r7
 8007fce:	2205      	movs	r2, #5
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	2010      	movs	r0, #16
 8007fd4:	f7ff f8dc 	bl	8007190 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8007fd8:	2100      	movs	r1, #0
 8007fda:	2011      	movs	r0, #17
 8007fdc:	f7ff f8b6 	bl	800714c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	2012      	movs	r0, #18
 8007fe4:	f7ff f8b2 	bl	800714c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8007fe8:	2100      	movs	r1, #0
 8007fea:	2013      	movs	r0, #19
 8007fec:	f7ff f8ae 	bl	800714c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	2014      	movs	r0, #20
 8007ff4:	f7ff f8aa 	bl	800714c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	2015      	movs	r0, #21
 8007ffc:	f7ff f8a6 	bl	800714c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8008000:	2100      	movs	r1, #0
 8008002:	2016      	movs	r0, #22
 8008004:	f7ff f8a2 	bl	800714c <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 8008008:	f7ff fcf8 	bl	80079fc <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800800c:	2100      	movs	r1, #0
 800800e:	201c      	movs	r0, #28
 8008010:	f7ff f89c 	bl	800714c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8008014:	2100      	movs	r1, #0
 8008016:	201d      	movs	r0, #29
 8008018:	f7ff f898 	bl	800714c <NRF24_write_register>
	printRadioSettings();
 800801c:	f7ff fd08 	bl	8007a30 <printRadioSettings>
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <write8>:
uint8_t _tcs34725Initialised = 0;


/* Writes a register and an 8 bit value over I2C */
void write8 (uint8_t reg, uint32_t value)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af02      	add	r7, sp, #8
 800802e:	4603      	mov	r3, r0
 8008030:	6039      	str	r1, [r7, #0]
 8008032:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuffer[2];
    txBuffer[0] = (TCS34725_COMMAND_BIT | reg);
 8008034:	79fb      	ldrb	r3, [r7, #7]
 8008036:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800803a:	b2db      	uxtb	r3, r3
 800803c:	733b      	strb	r3, [r7, #12]
    txBuffer[1] = (value & 0xFF);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	b2db      	uxtb	r3, r3
 8008042:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, txBuffer, 2, 100);
 8008044:	f107 020c 	add.w	r2, r7, #12
 8008048:	2364      	movs	r3, #100	; 0x64
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	2302      	movs	r3, #2
 800804e:	2152      	movs	r1, #82	; 0x52
 8008050:	4803      	ldr	r0, [pc, #12]	; (8008060 <write8+0x38>)
 8008052:	f7fb f98b 	bl	800336c <HAL_I2C_Master_Transmit>
}
 8008056:	bf00      	nop
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	20000264 	.word	0x20000264

08008064 <read8>:

/* Reads an 8 bit value over I2C */
uint8_t read8(uint8_t reg)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af02      	add	r7, sp, #8
 800806a:	4603      	mov	r3, r0
 800806c:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[1];
    buffer[0] = (TCS34725_COMMAND_BIT | reg);
 800806e:	79fb      	ldrb	r3, [r7, #7]
 8008070:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008074:	b2db      	uxtb	r3, r3
 8008076:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, buffer, 1, 100);
 8008078:	f107 020c 	add.w	r2, r7, #12
 800807c:	2364      	movs	r3, #100	; 0x64
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	2301      	movs	r3, #1
 8008082:	2152      	movs	r1, #82	; 0x52
 8008084:	4808      	ldr	r0, [pc, #32]	; (80080a8 <read8+0x44>)
 8008086:	f7fb f971 	bl	800336c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, buffer, 1, 100);
 800808a:	f107 020c 	add.w	r2, r7, #12
 800808e:	2364      	movs	r3, #100	; 0x64
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	2301      	movs	r3, #1
 8008094:	2152      	movs	r1, #82	; 0x52
 8008096:	4804      	ldr	r0, [pc, #16]	; (80080a8 <read8+0x44>)
 8008098:	f7fb fa66 	bl	8003568 <HAL_I2C_Master_Receive>
    return buffer[0];
 800809c:	7b3b      	ldrb	r3, [r7, #12]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	20000264 	.word	0x20000264

080080ac <read16>:

/* Reads a 16 bit values over I2C */
uint16_t read16(uint8_t reg)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	4603      	mov	r3, r0
 80080b4:	71fb      	strb	r3, [r7, #7]
  uint16_t ret;
    uint8_t txBuffer[1],rxBuffer[2];
    txBuffer[0] = (TCS34725_COMMAND_BIT | reg);
 80080b6:	79fb      	ldrb	r3, [r7, #7]
 80080b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, txBuffer, 1, 100);
 80080c0:	f107 020c 	add.w	r2, r7, #12
 80080c4:	2364      	movs	r3, #100	; 0x64
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	2301      	movs	r3, #1
 80080ca:	2152      	movs	r1, #82	; 0x52
 80080cc:	480d      	ldr	r0, [pc, #52]	; (8008104 <read16+0x58>)
 80080ce:	f7fb f94d 	bl	800336c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, rxBuffer, 2, 100);
 80080d2:	f107 0208 	add.w	r2, r7, #8
 80080d6:	2364      	movs	r3, #100	; 0x64
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	2302      	movs	r3, #2
 80080dc:	2152      	movs	r1, #82	; 0x52
 80080de:	4809      	ldr	r0, [pc, #36]	; (8008104 <read16+0x58>)
 80080e0:	f7fb fa42 	bl	8003568 <HAL_I2C_Master_Receive>
    ret = rxBuffer[1];
 80080e4:	7a7b      	ldrb	r3, [r7, #9]
 80080e6:	81fb      	strh	r3, [r7, #14]
    ret <<= 8;
 80080e8:	89fb      	ldrh	r3, [r7, #14]
 80080ea:	021b      	lsls	r3, r3, #8
 80080ec:	81fb      	strh	r3, [r7, #14]
    ret |= rxBuffer[0] & 0xFF;
 80080ee:	7a3b      	ldrb	r3, [r7, #8]
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	89fb      	ldrh	r3, [r7, #14]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	81fb      	strh	r3, [r7, #14]
  return ret;
 80080f8:	89fb      	ldrh	r3, [r7, #14]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	20000264 	.word	0x20000264

08008108 <enable>:

void enable(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
  write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 800810c:	2101      	movs	r1, #1
 800810e:	2000      	movs	r0, #0
 8008110:	f7ff ff8a 	bl	8008028 <write8>
  HAL_Delay(3);
 8008114:	2003      	movs	r0, #3
 8008116:	f7fa f8e9 	bl	80022ec <HAL_Delay>
  write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 800811a:	2103      	movs	r1, #3
 800811c:	2000      	movs	r0, #0
 800811e:	f7ff ff83 	bl	8008028 <write8>
  HAL_Delay(50);
 8008122:	2032      	movs	r0, #50	; 0x32
 8008124:	f7fa f8e2 	bl	80022ec <HAL_Delay>
}
 8008128:	bf00      	nop
 800812a:	bd80      	pop	{r7, pc}

0800812c <setIntegrationTime>:
  reg = read8(TCS34725_ENABLE);
  write8(TCS34725_ENABLE, reg & ~(TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN));
}

void setIntegrationTime(uint8_t itime)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	4603      	mov	r3, r0
 8008134:	71fb      	strb	r3, [r7, #7]
  if (_tcs34725Initialised == 0) tcs3272_init();
 8008136:	4b07      	ldr	r3, [pc, #28]	; (8008154 <setIntegrationTime+0x28>)
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <setIntegrationTime+0x16>
 800813e:	f000 f821 	bl	8008184 <tcs3272_init>
  write8(TCS34725_ATIME, itime);
 8008142:	79fb      	ldrb	r3, [r7, #7]
 8008144:	4619      	mov	r1, r3
 8008146:	2001      	movs	r0, #1
 8008148:	f7ff ff6e 	bl	8008028 <write8>
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	20000455 	.word	0x20000455

08008158 <setGain>:

void setGain(uint8_t gain)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	71fb      	strb	r3, [r7, #7]
  if (_tcs34725Initialised == 0) tcs3272_init();
 8008162:	4b07      	ldr	r3, [pc, #28]	; (8008180 <setGain+0x28>)
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <setGain+0x16>
 800816a:	f000 f80b 	bl	8008184 <tcs3272_init>
  write8(TCS34725_CONTROL, gain);
 800816e:	79fb      	ldrb	r3, [r7, #7]
 8008170:	4619      	mov	r1, r3
 8008172:	200f      	movs	r0, #15
 8008174:	f7ff ff58 	bl	8008028 <write8>
}
 8008178:	bf00      	nop
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20000455 	.word	0x20000455

08008184 <tcs3272_init>:

void tcs3272_init(void)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
  /* Make sure we're actually connected */
  uint8_t readValue = read8(TCS34725_ID);
 800818a:	2012      	movs	r0, #18
 800818c:	f7ff ff6a 	bl	8008064 <read8>
 8008190:	4603      	mov	r3, r0
 8008192:	71fb      	strb	r3, [r7, #7]
  if ((readValue != 0x44) && (readValue != 0x10))
 8008194:	79fb      	ldrb	r3, [r7, #7]
 8008196:	2b44      	cmp	r3, #68	; 0x44
 8008198:	d002      	beq.n	80081a0 <tcs3272_init+0x1c>
 800819a:	79fb      	ldrb	r3, [r7, #7]
 800819c:	2b10      	cmp	r3, #16
 800819e:	d10b      	bne.n	80081b8 <tcs3272_init+0x34>
  {
    return;
  }
  _tcs34725Initialised = 1;
 80081a0:	4b07      	ldr	r3, [pc, #28]	; (80081c0 <tcs3272_init+0x3c>)
 80081a2:	2201      	movs	r2, #1
 80081a4:	701a      	strb	r2, [r3, #0]
  /* Set default integration time and gain */
  setIntegrationTime(TCS34725_INTEGRATIONTIME_50MS);
 80081a6:	20eb      	movs	r0, #235	; 0xeb
 80081a8:	f7ff ffc0 	bl	800812c <setIntegrationTime>
  setGain(TCS34725_GAIN_4X);
 80081ac:	2001      	movs	r0, #1
 80081ae:	f7ff ffd3 	bl	8008158 <setGain>
  /* Note: by default, the device is in power down mode on bootup */
  enable();
 80081b2:	f7ff ffa9 	bl	8008108 <enable>
 80081b6:	e000      	b.n	80081ba <tcs3272_init+0x36>
    return;
 80081b8:	bf00      	nop
}
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	20000455 	.word	0x20000455

080081c4 <getRawData>:

/* Get raw data */
void getRawData (uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
  if (_tcs34725Initialised == 0) tcs3272_init();
 80081d2:	4b14      	ldr	r3, [pc, #80]	; (8008224 <getRawData+0x60>)
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <getRawData+0x1a>
 80081da:	f7ff ffd3 	bl	8008184 <tcs3272_init>

  *c = read16(TCS34725_CDATAL);
 80081de:	2014      	movs	r0, #20
 80081e0:	f7ff ff64 	bl	80080ac <read16>
 80081e4:	4603      	mov	r3, r0
 80081e6:	461a      	mov	r2, r3
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	801a      	strh	r2, [r3, #0]
  *r = read16(TCS34725_RDATAL);
 80081ec:	2016      	movs	r0, #22
 80081ee:	f7ff ff5d 	bl	80080ac <read16>
 80081f2:	4603      	mov	r3, r0
 80081f4:	461a      	mov	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	801a      	strh	r2, [r3, #0]
  *g = read16(TCS34725_GDATAL);
 80081fa:	2018      	movs	r0, #24
 80081fc:	f7ff ff56 	bl	80080ac <read16>
 8008200:	4603      	mov	r3, r0
 8008202:	461a      	mov	r2, r3
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	801a      	strh	r2, [r3, #0]
  *b = read16(TCS34725_BDATAL);
 8008208:	201a      	movs	r0, #26
 800820a:	f7ff ff4f 	bl	80080ac <read16>
 800820e:	4603      	mov	r3, r0
 8008210:	461a      	mov	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	801a      	strh	r2, [r3, #0]
  /* Delay time is from page no 16/26 from the datasheet  (256 − ATIME)* 2.4ms */
  HAL_Delay(50); // Set delay for (256 − 0xEB)* 2.4ms = 50ms
 8008216:	2032      	movs	r0, #50	; 0x32
 8008218:	f7fa f868 	bl	80022ec <HAL_Delay>
}
 800821c:	bf00      	nop
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	20000455 	.word	0x20000455

08008228 <getRGB>:

/* Get Red, Green and Blue color from Raw Data */
uint16_t getRGB(int *R, int *G, int *B)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
    uint16_t rawRed, rawGreen, rawBlue, rawClear;
    getRawData(&rawRed, &rawGreen, &rawBlue, &rawClear);
 8008234:	f107 0310 	add.w	r3, r7, #16
 8008238:	f107 0212 	add.w	r2, r7, #18
 800823c:	f107 0114 	add.w	r1, r7, #20
 8008240:	f107 0016 	add.w	r0, r7, #22
 8008244:	f7ff ffbe 	bl	80081c4 <getRawData>
    if(rawClear == 0)
 8008248:	8a3b      	ldrh	r3, [r7, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d109      	bne.n	8008262 <getRGB+0x3a>
    {
      *R = 0;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]
      *G = 0;
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2200      	movs	r2, #0
 8008258:	601a      	str	r2, [r3, #0]
      *B = 0;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	e01d      	b.n	800829e <getRGB+0x76>
    }
    else
    {
      *R = (int)rawRed * 255 / rawClear;
 8008262:	8afb      	ldrh	r3, [r7, #22]
 8008264:	461a      	mov	r2, r3
 8008266:	4613      	mov	r3, r2
 8008268:	021b      	lsls	r3, r3, #8
 800826a:	1a9b      	subs	r3, r3, r2
 800826c:	8a3a      	ldrh	r2, [r7, #16]
 800826e:	fb93 f2f2 	sdiv	r2, r3, r2
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	601a      	str	r2, [r3, #0]
      *G = (int)rawGreen * 255 / rawClear;
 8008276:	8abb      	ldrh	r3, [r7, #20]
 8008278:	461a      	mov	r2, r3
 800827a:	4613      	mov	r3, r2
 800827c:	021b      	lsls	r3, r3, #8
 800827e:	1a9b      	subs	r3, r3, r2
 8008280:	8a3a      	ldrh	r2, [r7, #16]
 8008282:	fb93 f2f2 	sdiv	r2, r3, r2
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	601a      	str	r2, [r3, #0]
      *B = (int)rawBlue * 255 / rawClear;
 800828a:	8a7b      	ldrh	r3, [r7, #18]
 800828c:	461a      	mov	r2, r3
 800828e:	4613      	mov	r3, r2
 8008290:	021b      	lsls	r3, r3, #8
 8008292:	1a9b      	subs	r3, r3, r2
 8008294:	8a3a      	ldrh	r2, [r7, #16]
 8008296:	fb93 f2f2 	sdiv	r2, r3, r2
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	601a      	str	r2, [r3, #0]
    }
    return rawClear;
 800829e:	8a3b      	ldrh	r3, [r7, #16]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <__cvt>:
 80082a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082ac:	ec55 4b10 	vmov	r4, r5, d0
 80082b0:	2d00      	cmp	r5, #0
 80082b2:	460e      	mov	r6, r1
 80082b4:	4619      	mov	r1, r3
 80082b6:	462b      	mov	r3, r5
 80082b8:	bfbb      	ittet	lt
 80082ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80082be:	461d      	movlt	r5, r3
 80082c0:	2300      	movge	r3, #0
 80082c2:	232d      	movlt	r3, #45	; 0x2d
 80082c4:	700b      	strb	r3, [r1, #0]
 80082c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80082cc:	4691      	mov	r9, r2
 80082ce:	f023 0820 	bic.w	r8, r3, #32
 80082d2:	bfbc      	itt	lt
 80082d4:	4622      	movlt	r2, r4
 80082d6:	4614      	movlt	r4, r2
 80082d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082dc:	d005      	beq.n	80082ea <__cvt+0x42>
 80082de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80082e2:	d100      	bne.n	80082e6 <__cvt+0x3e>
 80082e4:	3601      	adds	r6, #1
 80082e6:	2102      	movs	r1, #2
 80082e8:	e000      	b.n	80082ec <__cvt+0x44>
 80082ea:	2103      	movs	r1, #3
 80082ec:	ab03      	add	r3, sp, #12
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	ab02      	add	r3, sp, #8
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	ec45 4b10 	vmov	d0, r4, r5
 80082f8:	4653      	mov	r3, sl
 80082fa:	4632      	mov	r2, r6
 80082fc:	f001 f980 	bl	8009600 <_dtoa_r>
 8008300:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008304:	4607      	mov	r7, r0
 8008306:	d102      	bne.n	800830e <__cvt+0x66>
 8008308:	f019 0f01 	tst.w	r9, #1
 800830c:	d022      	beq.n	8008354 <__cvt+0xac>
 800830e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008312:	eb07 0906 	add.w	r9, r7, r6
 8008316:	d110      	bne.n	800833a <__cvt+0x92>
 8008318:	783b      	ldrb	r3, [r7, #0]
 800831a:	2b30      	cmp	r3, #48	; 0x30
 800831c:	d10a      	bne.n	8008334 <__cvt+0x8c>
 800831e:	2200      	movs	r2, #0
 8008320:	2300      	movs	r3, #0
 8008322:	4620      	mov	r0, r4
 8008324:	4629      	mov	r1, r5
 8008326:	f7f8 fbff 	bl	8000b28 <__aeabi_dcmpeq>
 800832a:	b918      	cbnz	r0, 8008334 <__cvt+0x8c>
 800832c:	f1c6 0601 	rsb	r6, r6, #1
 8008330:	f8ca 6000 	str.w	r6, [sl]
 8008334:	f8da 3000 	ldr.w	r3, [sl]
 8008338:	4499      	add	r9, r3
 800833a:	2200      	movs	r2, #0
 800833c:	2300      	movs	r3, #0
 800833e:	4620      	mov	r0, r4
 8008340:	4629      	mov	r1, r5
 8008342:	f7f8 fbf1 	bl	8000b28 <__aeabi_dcmpeq>
 8008346:	b108      	cbz	r0, 800834c <__cvt+0xa4>
 8008348:	f8cd 900c 	str.w	r9, [sp, #12]
 800834c:	2230      	movs	r2, #48	; 0x30
 800834e:	9b03      	ldr	r3, [sp, #12]
 8008350:	454b      	cmp	r3, r9
 8008352:	d307      	bcc.n	8008364 <__cvt+0xbc>
 8008354:	9b03      	ldr	r3, [sp, #12]
 8008356:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008358:	1bdb      	subs	r3, r3, r7
 800835a:	4638      	mov	r0, r7
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	b004      	add	sp, #16
 8008360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008364:	1c59      	adds	r1, r3, #1
 8008366:	9103      	str	r1, [sp, #12]
 8008368:	701a      	strb	r2, [r3, #0]
 800836a:	e7f0      	b.n	800834e <__cvt+0xa6>

0800836c <__exponent>:
 800836c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800836e:	4603      	mov	r3, r0
 8008370:	2900      	cmp	r1, #0
 8008372:	bfb8      	it	lt
 8008374:	4249      	neglt	r1, r1
 8008376:	f803 2b02 	strb.w	r2, [r3], #2
 800837a:	bfb4      	ite	lt
 800837c:	222d      	movlt	r2, #45	; 0x2d
 800837e:	222b      	movge	r2, #43	; 0x2b
 8008380:	2909      	cmp	r1, #9
 8008382:	7042      	strb	r2, [r0, #1]
 8008384:	dd2a      	ble.n	80083dc <__exponent+0x70>
 8008386:	f10d 0207 	add.w	r2, sp, #7
 800838a:	4617      	mov	r7, r2
 800838c:	260a      	movs	r6, #10
 800838e:	4694      	mov	ip, r2
 8008390:	fb91 f5f6 	sdiv	r5, r1, r6
 8008394:	fb06 1415 	mls	r4, r6, r5, r1
 8008398:	3430      	adds	r4, #48	; 0x30
 800839a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800839e:	460c      	mov	r4, r1
 80083a0:	2c63      	cmp	r4, #99	; 0x63
 80083a2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80083a6:	4629      	mov	r1, r5
 80083a8:	dcf1      	bgt.n	800838e <__exponent+0x22>
 80083aa:	3130      	adds	r1, #48	; 0x30
 80083ac:	f1ac 0402 	sub.w	r4, ip, #2
 80083b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80083b4:	1c41      	adds	r1, r0, #1
 80083b6:	4622      	mov	r2, r4
 80083b8:	42ba      	cmp	r2, r7
 80083ba:	d30a      	bcc.n	80083d2 <__exponent+0x66>
 80083bc:	f10d 0209 	add.w	r2, sp, #9
 80083c0:	eba2 020c 	sub.w	r2, r2, ip
 80083c4:	42bc      	cmp	r4, r7
 80083c6:	bf88      	it	hi
 80083c8:	2200      	movhi	r2, #0
 80083ca:	4413      	add	r3, r2
 80083cc:	1a18      	subs	r0, r3, r0
 80083ce:	b003      	add	sp, #12
 80083d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083d2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80083d6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80083da:	e7ed      	b.n	80083b8 <__exponent+0x4c>
 80083dc:	2330      	movs	r3, #48	; 0x30
 80083de:	3130      	adds	r1, #48	; 0x30
 80083e0:	7083      	strb	r3, [r0, #2]
 80083e2:	70c1      	strb	r1, [r0, #3]
 80083e4:	1d03      	adds	r3, r0, #4
 80083e6:	e7f1      	b.n	80083cc <__exponent+0x60>

080083e8 <_printf_float>:
 80083e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ec:	ed2d 8b02 	vpush	{d8}
 80083f0:	b08d      	sub	sp, #52	; 0x34
 80083f2:	460c      	mov	r4, r1
 80083f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80083f8:	4616      	mov	r6, r2
 80083fa:	461f      	mov	r7, r3
 80083fc:	4605      	mov	r5, r0
 80083fe:	f000 fff9 	bl	80093f4 <_localeconv_r>
 8008402:	f8d0 a000 	ldr.w	sl, [r0]
 8008406:	4650      	mov	r0, sl
 8008408:	f7f7 ff62 	bl	80002d0 <strlen>
 800840c:	2300      	movs	r3, #0
 800840e:	930a      	str	r3, [sp, #40]	; 0x28
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	9305      	str	r3, [sp, #20]
 8008414:	f8d8 3000 	ldr.w	r3, [r8]
 8008418:	f894 b018 	ldrb.w	fp, [r4, #24]
 800841c:	3307      	adds	r3, #7
 800841e:	f023 0307 	bic.w	r3, r3, #7
 8008422:	f103 0208 	add.w	r2, r3, #8
 8008426:	f8c8 2000 	str.w	r2, [r8]
 800842a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800842e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008432:	9307      	str	r3, [sp, #28]
 8008434:	f8cd 8018 	str.w	r8, [sp, #24]
 8008438:	ee08 0a10 	vmov	s16, r0
 800843c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008440:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008444:	4b9e      	ldr	r3, [pc, #632]	; (80086c0 <_printf_float+0x2d8>)
 8008446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800844a:	f7f8 fb9f 	bl	8000b8c <__aeabi_dcmpun>
 800844e:	bb88      	cbnz	r0, 80084b4 <_printf_float+0xcc>
 8008450:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008454:	4b9a      	ldr	r3, [pc, #616]	; (80086c0 <_printf_float+0x2d8>)
 8008456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800845a:	f7f8 fb79 	bl	8000b50 <__aeabi_dcmple>
 800845e:	bb48      	cbnz	r0, 80084b4 <_printf_float+0xcc>
 8008460:	2200      	movs	r2, #0
 8008462:	2300      	movs	r3, #0
 8008464:	4640      	mov	r0, r8
 8008466:	4649      	mov	r1, r9
 8008468:	f7f8 fb68 	bl	8000b3c <__aeabi_dcmplt>
 800846c:	b110      	cbz	r0, 8008474 <_printf_float+0x8c>
 800846e:	232d      	movs	r3, #45	; 0x2d
 8008470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008474:	4a93      	ldr	r2, [pc, #588]	; (80086c4 <_printf_float+0x2dc>)
 8008476:	4b94      	ldr	r3, [pc, #592]	; (80086c8 <_printf_float+0x2e0>)
 8008478:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800847c:	bf94      	ite	ls
 800847e:	4690      	movls	r8, r2
 8008480:	4698      	movhi	r8, r3
 8008482:	2303      	movs	r3, #3
 8008484:	6123      	str	r3, [r4, #16]
 8008486:	9b05      	ldr	r3, [sp, #20]
 8008488:	f023 0304 	bic.w	r3, r3, #4
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	f04f 0900 	mov.w	r9, #0
 8008492:	9700      	str	r7, [sp, #0]
 8008494:	4633      	mov	r3, r6
 8008496:	aa0b      	add	r2, sp, #44	; 0x2c
 8008498:	4621      	mov	r1, r4
 800849a:	4628      	mov	r0, r5
 800849c:	f000 f9da 	bl	8008854 <_printf_common>
 80084a0:	3001      	adds	r0, #1
 80084a2:	f040 8090 	bne.w	80085c6 <_printf_float+0x1de>
 80084a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084aa:	b00d      	add	sp, #52	; 0x34
 80084ac:	ecbd 8b02 	vpop	{d8}
 80084b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b4:	4642      	mov	r2, r8
 80084b6:	464b      	mov	r3, r9
 80084b8:	4640      	mov	r0, r8
 80084ba:	4649      	mov	r1, r9
 80084bc:	f7f8 fb66 	bl	8000b8c <__aeabi_dcmpun>
 80084c0:	b140      	cbz	r0, 80084d4 <_printf_float+0xec>
 80084c2:	464b      	mov	r3, r9
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	bfbc      	itt	lt
 80084c8:	232d      	movlt	r3, #45	; 0x2d
 80084ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80084ce:	4a7f      	ldr	r2, [pc, #508]	; (80086cc <_printf_float+0x2e4>)
 80084d0:	4b7f      	ldr	r3, [pc, #508]	; (80086d0 <_printf_float+0x2e8>)
 80084d2:	e7d1      	b.n	8008478 <_printf_float+0x90>
 80084d4:	6863      	ldr	r3, [r4, #4]
 80084d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80084da:	9206      	str	r2, [sp, #24]
 80084dc:	1c5a      	adds	r2, r3, #1
 80084de:	d13f      	bne.n	8008560 <_printf_float+0x178>
 80084e0:	2306      	movs	r3, #6
 80084e2:	6063      	str	r3, [r4, #4]
 80084e4:	9b05      	ldr	r3, [sp, #20]
 80084e6:	6861      	ldr	r1, [r4, #4]
 80084e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80084ec:	2300      	movs	r3, #0
 80084ee:	9303      	str	r3, [sp, #12]
 80084f0:	ab0a      	add	r3, sp, #40	; 0x28
 80084f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80084f6:	ab09      	add	r3, sp, #36	; 0x24
 80084f8:	ec49 8b10 	vmov	d0, r8, r9
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	6022      	str	r2, [r4, #0]
 8008500:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008504:	4628      	mov	r0, r5
 8008506:	f7ff fecf 	bl	80082a8 <__cvt>
 800850a:	9b06      	ldr	r3, [sp, #24]
 800850c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800850e:	2b47      	cmp	r3, #71	; 0x47
 8008510:	4680      	mov	r8, r0
 8008512:	d108      	bne.n	8008526 <_printf_float+0x13e>
 8008514:	1cc8      	adds	r0, r1, #3
 8008516:	db02      	blt.n	800851e <_printf_float+0x136>
 8008518:	6863      	ldr	r3, [r4, #4]
 800851a:	4299      	cmp	r1, r3
 800851c:	dd41      	ble.n	80085a2 <_printf_float+0x1ba>
 800851e:	f1ab 0302 	sub.w	r3, fp, #2
 8008522:	fa5f fb83 	uxtb.w	fp, r3
 8008526:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800852a:	d820      	bhi.n	800856e <_printf_float+0x186>
 800852c:	3901      	subs	r1, #1
 800852e:	465a      	mov	r2, fp
 8008530:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008534:	9109      	str	r1, [sp, #36]	; 0x24
 8008536:	f7ff ff19 	bl	800836c <__exponent>
 800853a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800853c:	1813      	adds	r3, r2, r0
 800853e:	2a01      	cmp	r2, #1
 8008540:	4681      	mov	r9, r0
 8008542:	6123      	str	r3, [r4, #16]
 8008544:	dc02      	bgt.n	800854c <_printf_float+0x164>
 8008546:	6822      	ldr	r2, [r4, #0]
 8008548:	07d2      	lsls	r2, r2, #31
 800854a:	d501      	bpl.n	8008550 <_printf_float+0x168>
 800854c:	3301      	adds	r3, #1
 800854e:	6123      	str	r3, [r4, #16]
 8008550:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008554:	2b00      	cmp	r3, #0
 8008556:	d09c      	beq.n	8008492 <_printf_float+0xaa>
 8008558:	232d      	movs	r3, #45	; 0x2d
 800855a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800855e:	e798      	b.n	8008492 <_printf_float+0xaa>
 8008560:	9a06      	ldr	r2, [sp, #24]
 8008562:	2a47      	cmp	r2, #71	; 0x47
 8008564:	d1be      	bne.n	80084e4 <_printf_float+0xfc>
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1bc      	bne.n	80084e4 <_printf_float+0xfc>
 800856a:	2301      	movs	r3, #1
 800856c:	e7b9      	b.n	80084e2 <_printf_float+0xfa>
 800856e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008572:	d118      	bne.n	80085a6 <_printf_float+0x1be>
 8008574:	2900      	cmp	r1, #0
 8008576:	6863      	ldr	r3, [r4, #4]
 8008578:	dd0b      	ble.n	8008592 <_printf_float+0x1aa>
 800857a:	6121      	str	r1, [r4, #16]
 800857c:	b913      	cbnz	r3, 8008584 <_printf_float+0x19c>
 800857e:	6822      	ldr	r2, [r4, #0]
 8008580:	07d0      	lsls	r0, r2, #31
 8008582:	d502      	bpl.n	800858a <_printf_float+0x1a2>
 8008584:	3301      	adds	r3, #1
 8008586:	440b      	add	r3, r1
 8008588:	6123      	str	r3, [r4, #16]
 800858a:	65a1      	str	r1, [r4, #88]	; 0x58
 800858c:	f04f 0900 	mov.w	r9, #0
 8008590:	e7de      	b.n	8008550 <_printf_float+0x168>
 8008592:	b913      	cbnz	r3, 800859a <_printf_float+0x1b2>
 8008594:	6822      	ldr	r2, [r4, #0]
 8008596:	07d2      	lsls	r2, r2, #31
 8008598:	d501      	bpl.n	800859e <_printf_float+0x1b6>
 800859a:	3302      	adds	r3, #2
 800859c:	e7f4      	b.n	8008588 <_printf_float+0x1a0>
 800859e:	2301      	movs	r3, #1
 80085a0:	e7f2      	b.n	8008588 <_printf_float+0x1a0>
 80085a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80085a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085a8:	4299      	cmp	r1, r3
 80085aa:	db05      	blt.n	80085b8 <_printf_float+0x1d0>
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	6121      	str	r1, [r4, #16]
 80085b0:	07d8      	lsls	r0, r3, #31
 80085b2:	d5ea      	bpl.n	800858a <_printf_float+0x1a2>
 80085b4:	1c4b      	adds	r3, r1, #1
 80085b6:	e7e7      	b.n	8008588 <_printf_float+0x1a0>
 80085b8:	2900      	cmp	r1, #0
 80085ba:	bfd4      	ite	le
 80085bc:	f1c1 0202 	rsble	r2, r1, #2
 80085c0:	2201      	movgt	r2, #1
 80085c2:	4413      	add	r3, r2
 80085c4:	e7e0      	b.n	8008588 <_printf_float+0x1a0>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	055a      	lsls	r2, r3, #21
 80085ca:	d407      	bmi.n	80085dc <_printf_float+0x1f4>
 80085cc:	6923      	ldr	r3, [r4, #16]
 80085ce:	4642      	mov	r2, r8
 80085d0:	4631      	mov	r1, r6
 80085d2:	4628      	mov	r0, r5
 80085d4:	47b8      	blx	r7
 80085d6:	3001      	adds	r0, #1
 80085d8:	d12c      	bne.n	8008634 <_printf_float+0x24c>
 80085da:	e764      	b.n	80084a6 <_printf_float+0xbe>
 80085dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80085e0:	f240 80e0 	bls.w	80087a4 <_printf_float+0x3bc>
 80085e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085e8:	2200      	movs	r2, #0
 80085ea:	2300      	movs	r3, #0
 80085ec:	f7f8 fa9c 	bl	8000b28 <__aeabi_dcmpeq>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d034      	beq.n	800865e <_printf_float+0x276>
 80085f4:	4a37      	ldr	r2, [pc, #220]	; (80086d4 <_printf_float+0x2ec>)
 80085f6:	2301      	movs	r3, #1
 80085f8:	4631      	mov	r1, r6
 80085fa:	4628      	mov	r0, r5
 80085fc:	47b8      	blx	r7
 80085fe:	3001      	adds	r0, #1
 8008600:	f43f af51 	beq.w	80084a6 <_printf_float+0xbe>
 8008604:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008608:	429a      	cmp	r2, r3
 800860a:	db02      	blt.n	8008612 <_printf_float+0x22a>
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	07d8      	lsls	r0, r3, #31
 8008610:	d510      	bpl.n	8008634 <_printf_float+0x24c>
 8008612:	ee18 3a10 	vmov	r3, s16
 8008616:	4652      	mov	r2, sl
 8008618:	4631      	mov	r1, r6
 800861a:	4628      	mov	r0, r5
 800861c:	47b8      	blx	r7
 800861e:	3001      	adds	r0, #1
 8008620:	f43f af41 	beq.w	80084a6 <_printf_float+0xbe>
 8008624:	f04f 0800 	mov.w	r8, #0
 8008628:	f104 091a 	add.w	r9, r4, #26
 800862c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800862e:	3b01      	subs	r3, #1
 8008630:	4543      	cmp	r3, r8
 8008632:	dc09      	bgt.n	8008648 <_printf_float+0x260>
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	079b      	lsls	r3, r3, #30
 8008638:	f100 8107 	bmi.w	800884a <_printf_float+0x462>
 800863c:	68e0      	ldr	r0, [r4, #12]
 800863e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008640:	4298      	cmp	r0, r3
 8008642:	bfb8      	it	lt
 8008644:	4618      	movlt	r0, r3
 8008646:	e730      	b.n	80084aa <_printf_float+0xc2>
 8008648:	2301      	movs	r3, #1
 800864a:	464a      	mov	r2, r9
 800864c:	4631      	mov	r1, r6
 800864e:	4628      	mov	r0, r5
 8008650:	47b8      	blx	r7
 8008652:	3001      	adds	r0, #1
 8008654:	f43f af27 	beq.w	80084a6 <_printf_float+0xbe>
 8008658:	f108 0801 	add.w	r8, r8, #1
 800865c:	e7e6      	b.n	800862c <_printf_float+0x244>
 800865e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008660:	2b00      	cmp	r3, #0
 8008662:	dc39      	bgt.n	80086d8 <_printf_float+0x2f0>
 8008664:	4a1b      	ldr	r2, [pc, #108]	; (80086d4 <_printf_float+0x2ec>)
 8008666:	2301      	movs	r3, #1
 8008668:	4631      	mov	r1, r6
 800866a:	4628      	mov	r0, r5
 800866c:	47b8      	blx	r7
 800866e:	3001      	adds	r0, #1
 8008670:	f43f af19 	beq.w	80084a6 <_printf_float+0xbe>
 8008674:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008678:	4313      	orrs	r3, r2
 800867a:	d102      	bne.n	8008682 <_printf_float+0x29a>
 800867c:	6823      	ldr	r3, [r4, #0]
 800867e:	07d9      	lsls	r1, r3, #31
 8008680:	d5d8      	bpl.n	8008634 <_printf_float+0x24c>
 8008682:	ee18 3a10 	vmov	r3, s16
 8008686:	4652      	mov	r2, sl
 8008688:	4631      	mov	r1, r6
 800868a:	4628      	mov	r0, r5
 800868c:	47b8      	blx	r7
 800868e:	3001      	adds	r0, #1
 8008690:	f43f af09 	beq.w	80084a6 <_printf_float+0xbe>
 8008694:	f04f 0900 	mov.w	r9, #0
 8008698:	f104 0a1a 	add.w	sl, r4, #26
 800869c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800869e:	425b      	negs	r3, r3
 80086a0:	454b      	cmp	r3, r9
 80086a2:	dc01      	bgt.n	80086a8 <_printf_float+0x2c0>
 80086a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086a6:	e792      	b.n	80085ce <_printf_float+0x1e6>
 80086a8:	2301      	movs	r3, #1
 80086aa:	4652      	mov	r2, sl
 80086ac:	4631      	mov	r1, r6
 80086ae:	4628      	mov	r0, r5
 80086b0:	47b8      	blx	r7
 80086b2:	3001      	adds	r0, #1
 80086b4:	f43f aef7 	beq.w	80084a6 <_printf_float+0xbe>
 80086b8:	f109 0901 	add.w	r9, r9, #1
 80086bc:	e7ee      	b.n	800869c <_printf_float+0x2b4>
 80086be:	bf00      	nop
 80086c0:	7fefffff 	.word	0x7fefffff
 80086c4:	0800d14e 	.word	0x0800d14e
 80086c8:	0800d152 	.word	0x0800d152
 80086cc:	0800d156 	.word	0x0800d156
 80086d0:	0800d15a 	.word	0x0800d15a
 80086d4:	0800d15e 	.word	0x0800d15e
 80086d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086dc:	429a      	cmp	r2, r3
 80086de:	bfa8      	it	ge
 80086e0:	461a      	movge	r2, r3
 80086e2:	2a00      	cmp	r2, #0
 80086e4:	4691      	mov	r9, r2
 80086e6:	dc37      	bgt.n	8008758 <_printf_float+0x370>
 80086e8:	f04f 0b00 	mov.w	fp, #0
 80086ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086f0:	f104 021a 	add.w	r2, r4, #26
 80086f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086f6:	9305      	str	r3, [sp, #20]
 80086f8:	eba3 0309 	sub.w	r3, r3, r9
 80086fc:	455b      	cmp	r3, fp
 80086fe:	dc33      	bgt.n	8008768 <_printf_float+0x380>
 8008700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008704:	429a      	cmp	r2, r3
 8008706:	db3b      	blt.n	8008780 <_printf_float+0x398>
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	07da      	lsls	r2, r3, #31
 800870c:	d438      	bmi.n	8008780 <_printf_float+0x398>
 800870e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008712:	eba2 0903 	sub.w	r9, r2, r3
 8008716:	9b05      	ldr	r3, [sp, #20]
 8008718:	1ad2      	subs	r2, r2, r3
 800871a:	4591      	cmp	r9, r2
 800871c:	bfa8      	it	ge
 800871e:	4691      	movge	r9, r2
 8008720:	f1b9 0f00 	cmp.w	r9, #0
 8008724:	dc35      	bgt.n	8008792 <_printf_float+0x3aa>
 8008726:	f04f 0800 	mov.w	r8, #0
 800872a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800872e:	f104 0a1a 	add.w	sl, r4, #26
 8008732:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008736:	1a9b      	subs	r3, r3, r2
 8008738:	eba3 0309 	sub.w	r3, r3, r9
 800873c:	4543      	cmp	r3, r8
 800873e:	f77f af79 	ble.w	8008634 <_printf_float+0x24c>
 8008742:	2301      	movs	r3, #1
 8008744:	4652      	mov	r2, sl
 8008746:	4631      	mov	r1, r6
 8008748:	4628      	mov	r0, r5
 800874a:	47b8      	blx	r7
 800874c:	3001      	adds	r0, #1
 800874e:	f43f aeaa 	beq.w	80084a6 <_printf_float+0xbe>
 8008752:	f108 0801 	add.w	r8, r8, #1
 8008756:	e7ec      	b.n	8008732 <_printf_float+0x34a>
 8008758:	4613      	mov	r3, r2
 800875a:	4631      	mov	r1, r6
 800875c:	4642      	mov	r2, r8
 800875e:	4628      	mov	r0, r5
 8008760:	47b8      	blx	r7
 8008762:	3001      	adds	r0, #1
 8008764:	d1c0      	bne.n	80086e8 <_printf_float+0x300>
 8008766:	e69e      	b.n	80084a6 <_printf_float+0xbe>
 8008768:	2301      	movs	r3, #1
 800876a:	4631      	mov	r1, r6
 800876c:	4628      	mov	r0, r5
 800876e:	9205      	str	r2, [sp, #20]
 8008770:	47b8      	blx	r7
 8008772:	3001      	adds	r0, #1
 8008774:	f43f ae97 	beq.w	80084a6 <_printf_float+0xbe>
 8008778:	9a05      	ldr	r2, [sp, #20]
 800877a:	f10b 0b01 	add.w	fp, fp, #1
 800877e:	e7b9      	b.n	80086f4 <_printf_float+0x30c>
 8008780:	ee18 3a10 	vmov	r3, s16
 8008784:	4652      	mov	r2, sl
 8008786:	4631      	mov	r1, r6
 8008788:	4628      	mov	r0, r5
 800878a:	47b8      	blx	r7
 800878c:	3001      	adds	r0, #1
 800878e:	d1be      	bne.n	800870e <_printf_float+0x326>
 8008790:	e689      	b.n	80084a6 <_printf_float+0xbe>
 8008792:	9a05      	ldr	r2, [sp, #20]
 8008794:	464b      	mov	r3, r9
 8008796:	4442      	add	r2, r8
 8008798:	4631      	mov	r1, r6
 800879a:	4628      	mov	r0, r5
 800879c:	47b8      	blx	r7
 800879e:	3001      	adds	r0, #1
 80087a0:	d1c1      	bne.n	8008726 <_printf_float+0x33e>
 80087a2:	e680      	b.n	80084a6 <_printf_float+0xbe>
 80087a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087a6:	2a01      	cmp	r2, #1
 80087a8:	dc01      	bgt.n	80087ae <_printf_float+0x3c6>
 80087aa:	07db      	lsls	r3, r3, #31
 80087ac:	d53a      	bpl.n	8008824 <_printf_float+0x43c>
 80087ae:	2301      	movs	r3, #1
 80087b0:	4642      	mov	r2, r8
 80087b2:	4631      	mov	r1, r6
 80087b4:	4628      	mov	r0, r5
 80087b6:	47b8      	blx	r7
 80087b8:	3001      	adds	r0, #1
 80087ba:	f43f ae74 	beq.w	80084a6 <_printf_float+0xbe>
 80087be:	ee18 3a10 	vmov	r3, s16
 80087c2:	4652      	mov	r2, sl
 80087c4:	4631      	mov	r1, r6
 80087c6:	4628      	mov	r0, r5
 80087c8:	47b8      	blx	r7
 80087ca:	3001      	adds	r0, #1
 80087cc:	f43f ae6b 	beq.w	80084a6 <_printf_float+0xbe>
 80087d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087d4:	2200      	movs	r2, #0
 80087d6:	2300      	movs	r3, #0
 80087d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80087dc:	f7f8 f9a4 	bl	8000b28 <__aeabi_dcmpeq>
 80087e0:	b9d8      	cbnz	r0, 800881a <_printf_float+0x432>
 80087e2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80087e6:	f108 0201 	add.w	r2, r8, #1
 80087ea:	4631      	mov	r1, r6
 80087ec:	4628      	mov	r0, r5
 80087ee:	47b8      	blx	r7
 80087f0:	3001      	adds	r0, #1
 80087f2:	d10e      	bne.n	8008812 <_printf_float+0x42a>
 80087f4:	e657      	b.n	80084a6 <_printf_float+0xbe>
 80087f6:	2301      	movs	r3, #1
 80087f8:	4652      	mov	r2, sl
 80087fa:	4631      	mov	r1, r6
 80087fc:	4628      	mov	r0, r5
 80087fe:	47b8      	blx	r7
 8008800:	3001      	adds	r0, #1
 8008802:	f43f ae50 	beq.w	80084a6 <_printf_float+0xbe>
 8008806:	f108 0801 	add.w	r8, r8, #1
 800880a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800880c:	3b01      	subs	r3, #1
 800880e:	4543      	cmp	r3, r8
 8008810:	dcf1      	bgt.n	80087f6 <_printf_float+0x40e>
 8008812:	464b      	mov	r3, r9
 8008814:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008818:	e6da      	b.n	80085d0 <_printf_float+0x1e8>
 800881a:	f04f 0800 	mov.w	r8, #0
 800881e:	f104 0a1a 	add.w	sl, r4, #26
 8008822:	e7f2      	b.n	800880a <_printf_float+0x422>
 8008824:	2301      	movs	r3, #1
 8008826:	4642      	mov	r2, r8
 8008828:	e7df      	b.n	80087ea <_printf_float+0x402>
 800882a:	2301      	movs	r3, #1
 800882c:	464a      	mov	r2, r9
 800882e:	4631      	mov	r1, r6
 8008830:	4628      	mov	r0, r5
 8008832:	47b8      	blx	r7
 8008834:	3001      	adds	r0, #1
 8008836:	f43f ae36 	beq.w	80084a6 <_printf_float+0xbe>
 800883a:	f108 0801 	add.w	r8, r8, #1
 800883e:	68e3      	ldr	r3, [r4, #12]
 8008840:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008842:	1a5b      	subs	r3, r3, r1
 8008844:	4543      	cmp	r3, r8
 8008846:	dcf0      	bgt.n	800882a <_printf_float+0x442>
 8008848:	e6f8      	b.n	800863c <_printf_float+0x254>
 800884a:	f04f 0800 	mov.w	r8, #0
 800884e:	f104 0919 	add.w	r9, r4, #25
 8008852:	e7f4      	b.n	800883e <_printf_float+0x456>

08008854 <_printf_common>:
 8008854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008858:	4616      	mov	r6, r2
 800885a:	4699      	mov	r9, r3
 800885c:	688a      	ldr	r2, [r1, #8]
 800885e:	690b      	ldr	r3, [r1, #16]
 8008860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008864:	4293      	cmp	r3, r2
 8008866:	bfb8      	it	lt
 8008868:	4613      	movlt	r3, r2
 800886a:	6033      	str	r3, [r6, #0]
 800886c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008870:	4607      	mov	r7, r0
 8008872:	460c      	mov	r4, r1
 8008874:	b10a      	cbz	r2, 800887a <_printf_common+0x26>
 8008876:	3301      	adds	r3, #1
 8008878:	6033      	str	r3, [r6, #0]
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	0699      	lsls	r1, r3, #26
 800887e:	bf42      	ittt	mi
 8008880:	6833      	ldrmi	r3, [r6, #0]
 8008882:	3302      	addmi	r3, #2
 8008884:	6033      	strmi	r3, [r6, #0]
 8008886:	6825      	ldr	r5, [r4, #0]
 8008888:	f015 0506 	ands.w	r5, r5, #6
 800888c:	d106      	bne.n	800889c <_printf_common+0x48>
 800888e:	f104 0a19 	add.w	sl, r4, #25
 8008892:	68e3      	ldr	r3, [r4, #12]
 8008894:	6832      	ldr	r2, [r6, #0]
 8008896:	1a9b      	subs	r3, r3, r2
 8008898:	42ab      	cmp	r3, r5
 800889a:	dc26      	bgt.n	80088ea <_printf_common+0x96>
 800889c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088a0:	1e13      	subs	r3, r2, #0
 80088a2:	6822      	ldr	r2, [r4, #0]
 80088a4:	bf18      	it	ne
 80088a6:	2301      	movne	r3, #1
 80088a8:	0692      	lsls	r2, r2, #26
 80088aa:	d42b      	bmi.n	8008904 <_printf_common+0xb0>
 80088ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088b0:	4649      	mov	r1, r9
 80088b2:	4638      	mov	r0, r7
 80088b4:	47c0      	blx	r8
 80088b6:	3001      	adds	r0, #1
 80088b8:	d01e      	beq.n	80088f8 <_printf_common+0xa4>
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	6922      	ldr	r2, [r4, #16]
 80088be:	f003 0306 	and.w	r3, r3, #6
 80088c2:	2b04      	cmp	r3, #4
 80088c4:	bf02      	ittt	eq
 80088c6:	68e5      	ldreq	r5, [r4, #12]
 80088c8:	6833      	ldreq	r3, [r6, #0]
 80088ca:	1aed      	subeq	r5, r5, r3
 80088cc:	68a3      	ldr	r3, [r4, #8]
 80088ce:	bf0c      	ite	eq
 80088d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088d4:	2500      	movne	r5, #0
 80088d6:	4293      	cmp	r3, r2
 80088d8:	bfc4      	itt	gt
 80088da:	1a9b      	subgt	r3, r3, r2
 80088dc:	18ed      	addgt	r5, r5, r3
 80088de:	2600      	movs	r6, #0
 80088e0:	341a      	adds	r4, #26
 80088e2:	42b5      	cmp	r5, r6
 80088e4:	d11a      	bne.n	800891c <_printf_common+0xc8>
 80088e6:	2000      	movs	r0, #0
 80088e8:	e008      	b.n	80088fc <_printf_common+0xa8>
 80088ea:	2301      	movs	r3, #1
 80088ec:	4652      	mov	r2, sl
 80088ee:	4649      	mov	r1, r9
 80088f0:	4638      	mov	r0, r7
 80088f2:	47c0      	blx	r8
 80088f4:	3001      	adds	r0, #1
 80088f6:	d103      	bne.n	8008900 <_printf_common+0xac>
 80088f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008900:	3501      	adds	r5, #1
 8008902:	e7c6      	b.n	8008892 <_printf_common+0x3e>
 8008904:	18e1      	adds	r1, r4, r3
 8008906:	1c5a      	adds	r2, r3, #1
 8008908:	2030      	movs	r0, #48	; 0x30
 800890a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800890e:	4422      	add	r2, r4
 8008910:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008914:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008918:	3302      	adds	r3, #2
 800891a:	e7c7      	b.n	80088ac <_printf_common+0x58>
 800891c:	2301      	movs	r3, #1
 800891e:	4622      	mov	r2, r4
 8008920:	4649      	mov	r1, r9
 8008922:	4638      	mov	r0, r7
 8008924:	47c0      	blx	r8
 8008926:	3001      	adds	r0, #1
 8008928:	d0e6      	beq.n	80088f8 <_printf_common+0xa4>
 800892a:	3601      	adds	r6, #1
 800892c:	e7d9      	b.n	80088e2 <_printf_common+0x8e>
	...

08008930 <_printf_i>:
 8008930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008934:	7e0f      	ldrb	r7, [r1, #24]
 8008936:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008938:	2f78      	cmp	r7, #120	; 0x78
 800893a:	4691      	mov	r9, r2
 800893c:	4680      	mov	r8, r0
 800893e:	460c      	mov	r4, r1
 8008940:	469a      	mov	sl, r3
 8008942:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008946:	d807      	bhi.n	8008958 <_printf_i+0x28>
 8008948:	2f62      	cmp	r7, #98	; 0x62
 800894a:	d80a      	bhi.n	8008962 <_printf_i+0x32>
 800894c:	2f00      	cmp	r7, #0
 800894e:	f000 80d4 	beq.w	8008afa <_printf_i+0x1ca>
 8008952:	2f58      	cmp	r7, #88	; 0x58
 8008954:	f000 80c0 	beq.w	8008ad8 <_printf_i+0x1a8>
 8008958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800895c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008960:	e03a      	b.n	80089d8 <_printf_i+0xa8>
 8008962:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008966:	2b15      	cmp	r3, #21
 8008968:	d8f6      	bhi.n	8008958 <_printf_i+0x28>
 800896a:	a101      	add	r1, pc, #4	; (adr r1, 8008970 <_printf_i+0x40>)
 800896c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008970:	080089c9 	.word	0x080089c9
 8008974:	080089dd 	.word	0x080089dd
 8008978:	08008959 	.word	0x08008959
 800897c:	08008959 	.word	0x08008959
 8008980:	08008959 	.word	0x08008959
 8008984:	08008959 	.word	0x08008959
 8008988:	080089dd 	.word	0x080089dd
 800898c:	08008959 	.word	0x08008959
 8008990:	08008959 	.word	0x08008959
 8008994:	08008959 	.word	0x08008959
 8008998:	08008959 	.word	0x08008959
 800899c:	08008ae1 	.word	0x08008ae1
 80089a0:	08008a09 	.word	0x08008a09
 80089a4:	08008a9b 	.word	0x08008a9b
 80089a8:	08008959 	.word	0x08008959
 80089ac:	08008959 	.word	0x08008959
 80089b0:	08008b03 	.word	0x08008b03
 80089b4:	08008959 	.word	0x08008959
 80089b8:	08008a09 	.word	0x08008a09
 80089bc:	08008959 	.word	0x08008959
 80089c0:	08008959 	.word	0x08008959
 80089c4:	08008aa3 	.word	0x08008aa3
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	1d1a      	adds	r2, r3, #4
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	602a      	str	r2, [r5, #0]
 80089d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089d8:	2301      	movs	r3, #1
 80089da:	e09f      	b.n	8008b1c <_printf_i+0x1ec>
 80089dc:	6820      	ldr	r0, [r4, #0]
 80089de:	682b      	ldr	r3, [r5, #0]
 80089e0:	0607      	lsls	r7, r0, #24
 80089e2:	f103 0104 	add.w	r1, r3, #4
 80089e6:	6029      	str	r1, [r5, #0]
 80089e8:	d501      	bpl.n	80089ee <_printf_i+0xbe>
 80089ea:	681e      	ldr	r6, [r3, #0]
 80089ec:	e003      	b.n	80089f6 <_printf_i+0xc6>
 80089ee:	0646      	lsls	r6, r0, #25
 80089f0:	d5fb      	bpl.n	80089ea <_printf_i+0xba>
 80089f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80089f6:	2e00      	cmp	r6, #0
 80089f8:	da03      	bge.n	8008a02 <_printf_i+0xd2>
 80089fa:	232d      	movs	r3, #45	; 0x2d
 80089fc:	4276      	negs	r6, r6
 80089fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a02:	485a      	ldr	r0, [pc, #360]	; (8008b6c <_printf_i+0x23c>)
 8008a04:	230a      	movs	r3, #10
 8008a06:	e012      	b.n	8008a2e <_printf_i+0xfe>
 8008a08:	682b      	ldr	r3, [r5, #0]
 8008a0a:	6820      	ldr	r0, [r4, #0]
 8008a0c:	1d19      	adds	r1, r3, #4
 8008a0e:	6029      	str	r1, [r5, #0]
 8008a10:	0605      	lsls	r5, r0, #24
 8008a12:	d501      	bpl.n	8008a18 <_printf_i+0xe8>
 8008a14:	681e      	ldr	r6, [r3, #0]
 8008a16:	e002      	b.n	8008a1e <_printf_i+0xee>
 8008a18:	0641      	lsls	r1, r0, #25
 8008a1a:	d5fb      	bpl.n	8008a14 <_printf_i+0xe4>
 8008a1c:	881e      	ldrh	r6, [r3, #0]
 8008a1e:	4853      	ldr	r0, [pc, #332]	; (8008b6c <_printf_i+0x23c>)
 8008a20:	2f6f      	cmp	r7, #111	; 0x6f
 8008a22:	bf0c      	ite	eq
 8008a24:	2308      	moveq	r3, #8
 8008a26:	230a      	movne	r3, #10
 8008a28:	2100      	movs	r1, #0
 8008a2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a2e:	6865      	ldr	r5, [r4, #4]
 8008a30:	60a5      	str	r5, [r4, #8]
 8008a32:	2d00      	cmp	r5, #0
 8008a34:	bfa2      	ittt	ge
 8008a36:	6821      	ldrge	r1, [r4, #0]
 8008a38:	f021 0104 	bicge.w	r1, r1, #4
 8008a3c:	6021      	strge	r1, [r4, #0]
 8008a3e:	b90e      	cbnz	r6, 8008a44 <_printf_i+0x114>
 8008a40:	2d00      	cmp	r5, #0
 8008a42:	d04b      	beq.n	8008adc <_printf_i+0x1ac>
 8008a44:	4615      	mov	r5, r2
 8008a46:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a4a:	fb03 6711 	mls	r7, r3, r1, r6
 8008a4e:	5dc7      	ldrb	r7, [r0, r7]
 8008a50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a54:	4637      	mov	r7, r6
 8008a56:	42bb      	cmp	r3, r7
 8008a58:	460e      	mov	r6, r1
 8008a5a:	d9f4      	bls.n	8008a46 <_printf_i+0x116>
 8008a5c:	2b08      	cmp	r3, #8
 8008a5e:	d10b      	bne.n	8008a78 <_printf_i+0x148>
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	07de      	lsls	r6, r3, #31
 8008a64:	d508      	bpl.n	8008a78 <_printf_i+0x148>
 8008a66:	6923      	ldr	r3, [r4, #16]
 8008a68:	6861      	ldr	r1, [r4, #4]
 8008a6a:	4299      	cmp	r1, r3
 8008a6c:	bfde      	ittt	le
 8008a6e:	2330      	movle	r3, #48	; 0x30
 8008a70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a74:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008a78:	1b52      	subs	r2, r2, r5
 8008a7a:	6122      	str	r2, [r4, #16]
 8008a7c:	f8cd a000 	str.w	sl, [sp]
 8008a80:	464b      	mov	r3, r9
 8008a82:	aa03      	add	r2, sp, #12
 8008a84:	4621      	mov	r1, r4
 8008a86:	4640      	mov	r0, r8
 8008a88:	f7ff fee4 	bl	8008854 <_printf_common>
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	d14a      	bne.n	8008b26 <_printf_i+0x1f6>
 8008a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a94:	b004      	add	sp, #16
 8008a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	f043 0320 	orr.w	r3, r3, #32
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	4833      	ldr	r0, [pc, #204]	; (8008b70 <_printf_i+0x240>)
 8008aa4:	2778      	movs	r7, #120	; 0x78
 8008aa6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	6829      	ldr	r1, [r5, #0]
 8008aae:	061f      	lsls	r7, r3, #24
 8008ab0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ab4:	d402      	bmi.n	8008abc <_printf_i+0x18c>
 8008ab6:	065f      	lsls	r7, r3, #25
 8008ab8:	bf48      	it	mi
 8008aba:	b2b6      	uxthmi	r6, r6
 8008abc:	07df      	lsls	r7, r3, #31
 8008abe:	bf48      	it	mi
 8008ac0:	f043 0320 	orrmi.w	r3, r3, #32
 8008ac4:	6029      	str	r1, [r5, #0]
 8008ac6:	bf48      	it	mi
 8008ac8:	6023      	strmi	r3, [r4, #0]
 8008aca:	b91e      	cbnz	r6, 8008ad4 <_printf_i+0x1a4>
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	f023 0320 	bic.w	r3, r3, #32
 8008ad2:	6023      	str	r3, [r4, #0]
 8008ad4:	2310      	movs	r3, #16
 8008ad6:	e7a7      	b.n	8008a28 <_printf_i+0xf8>
 8008ad8:	4824      	ldr	r0, [pc, #144]	; (8008b6c <_printf_i+0x23c>)
 8008ada:	e7e4      	b.n	8008aa6 <_printf_i+0x176>
 8008adc:	4615      	mov	r5, r2
 8008ade:	e7bd      	b.n	8008a5c <_printf_i+0x12c>
 8008ae0:	682b      	ldr	r3, [r5, #0]
 8008ae2:	6826      	ldr	r6, [r4, #0]
 8008ae4:	6961      	ldr	r1, [r4, #20]
 8008ae6:	1d18      	adds	r0, r3, #4
 8008ae8:	6028      	str	r0, [r5, #0]
 8008aea:	0635      	lsls	r5, r6, #24
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	d501      	bpl.n	8008af4 <_printf_i+0x1c4>
 8008af0:	6019      	str	r1, [r3, #0]
 8008af2:	e002      	b.n	8008afa <_printf_i+0x1ca>
 8008af4:	0670      	lsls	r0, r6, #25
 8008af6:	d5fb      	bpl.n	8008af0 <_printf_i+0x1c0>
 8008af8:	8019      	strh	r1, [r3, #0]
 8008afa:	2300      	movs	r3, #0
 8008afc:	6123      	str	r3, [r4, #16]
 8008afe:	4615      	mov	r5, r2
 8008b00:	e7bc      	b.n	8008a7c <_printf_i+0x14c>
 8008b02:	682b      	ldr	r3, [r5, #0]
 8008b04:	1d1a      	adds	r2, r3, #4
 8008b06:	602a      	str	r2, [r5, #0]
 8008b08:	681d      	ldr	r5, [r3, #0]
 8008b0a:	6862      	ldr	r2, [r4, #4]
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f7f7 fb8e 	bl	8000230 <memchr>
 8008b14:	b108      	cbz	r0, 8008b1a <_printf_i+0x1ea>
 8008b16:	1b40      	subs	r0, r0, r5
 8008b18:	6060      	str	r0, [r4, #4]
 8008b1a:	6863      	ldr	r3, [r4, #4]
 8008b1c:	6123      	str	r3, [r4, #16]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b24:	e7aa      	b.n	8008a7c <_printf_i+0x14c>
 8008b26:	6923      	ldr	r3, [r4, #16]
 8008b28:	462a      	mov	r2, r5
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	4640      	mov	r0, r8
 8008b2e:	47d0      	blx	sl
 8008b30:	3001      	adds	r0, #1
 8008b32:	d0ad      	beq.n	8008a90 <_printf_i+0x160>
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	079b      	lsls	r3, r3, #30
 8008b38:	d413      	bmi.n	8008b62 <_printf_i+0x232>
 8008b3a:	68e0      	ldr	r0, [r4, #12]
 8008b3c:	9b03      	ldr	r3, [sp, #12]
 8008b3e:	4298      	cmp	r0, r3
 8008b40:	bfb8      	it	lt
 8008b42:	4618      	movlt	r0, r3
 8008b44:	e7a6      	b.n	8008a94 <_printf_i+0x164>
 8008b46:	2301      	movs	r3, #1
 8008b48:	4632      	mov	r2, r6
 8008b4a:	4649      	mov	r1, r9
 8008b4c:	4640      	mov	r0, r8
 8008b4e:	47d0      	blx	sl
 8008b50:	3001      	adds	r0, #1
 8008b52:	d09d      	beq.n	8008a90 <_printf_i+0x160>
 8008b54:	3501      	adds	r5, #1
 8008b56:	68e3      	ldr	r3, [r4, #12]
 8008b58:	9903      	ldr	r1, [sp, #12]
 8008b5a:	1a5b      	subs	r3, r3, r1
 8008b5c:	42ab      	cmp	r3, r5
 8008b5e:	dcf2      	bgt.n	8008b46 <_printf_i+0x216>
 8008b60:	e7eb      	b.n	8008b3a <_printf_i+0x20a>
 8008b62:	2500      	movs	r5, #0
 8008b64:	f104 0619 	add.w	r6, r4, #25
 8008b68:	e7f5      	b.n	8008b56 <_printf_i+0x226>
 8008b6a:	bf00      	nop
 8008b6c:	0800d160 	.word	0x0800d160
 8008b70:	0800d171 	.word	0x0800d171

08008b74 <_scanf_float>:
 8008b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b78:	b087      	sub	sp, #28
 8008b7a:	4617      	mov	r7, r2
 8008b7c:	9303      	str	r3, [sp, #12]
 8008b7e:	688b      	ldr	r3, [r1, #8]
 8008b80:	1e5a      	subs	r2, r3, #1
 8008b82:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008b86:	bf83      	ittte	hi
 8008b88:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008b8c:	195b      	addhi	r3, r3, r5
 8008b8e:	9302      	strhi	r3, [sp, #8]
 8008b90:	2300      	movls	r3, #0
 8008b92:	bf86      	itte	hi
 8008b94:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008b98:	608b      	strhi	r3, [r1, #8]
 8008b9a:	9302      	strls	r3, [sp, #8]
 8008b9c:	680b      	ldr	r3, [r1, #0]
 8008b9e:	468b      	mov	fp, r1
 8008ba0:	2500      	movs	r5, #0
 8008ba2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008ba6:	f84b 3b1c 	str.w	r3, [fp], #28
 8008baa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008bae:	4680      	mov	r8, r0
 8008bb0:	460c      	mov	r4, r1
 8008bb2:	465e      	mov	r6, fp
 8008bb4:	46aa      	mov	sl, r5
 8008bb6:	46a9      	mov	r9, r5
 8008bb8:	9501      	str	r5, [sp, #4]
 8008bba:	68a2      	ldr	r2, [r4, #8]
 8008bbc:	b152      	cbz	r2, 8008bd4 <_scanf_float+0x60>
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	2b4e      	cmp	r3, #78	; 0x4e
 8008bc4:	d864      	bhi.n	8008c90 <_scanf_float+0x11c>
 8008bc6:	2b40      	cmp	r3, #64	; 0x40
 8008bc8:	d83c      	bhi.n	8008c44 <_scanf_float+0xd0>
 8008bca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008bce:	b2c8      	uxtb	r0, r1
 8008bd0:	280e      	cmp	r0, #14
 8008bd2:	d93a      	bls.n	8008c4a <_scanf_float+0xd6>
 8008bd4:	f1b9 0f00 	cmp.w	r9, #0
 8008bd8:	d003      	beq.n	8008be2 <_scanf_float+0x6e>
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008be6:	f1ba 0f01 	cmp.w	sl, #1
 8008bea:	f200 8113 	bhi.w	8008e14 <_scanf_float+0x2a0>
 8008bee:	455e      	cmp	r6, fp
 8008bf0:	f200 8105 	bhi.w	8008dfe <_scanf_float+0x28a>
 8008bf4:	2501      	movs	r5, #1
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	b007      	add	sp, #28
 8008bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bfe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008c02:	2a0d      	cmp	r2, #13
 8008c04:	d8e6      	bhi.n	8008bd4 <_scanf_float+0x60>
 8008c06:	a101      	add	r1, pc, #4	; (adr r1, 8008c0c <_scanf_float+0x98>)
 8008c08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008c0c:	08008d4b 	.word	0x08008d4b
 8008c10:	08008bd5 	.word	0x08008bd5
 8008c14:	08008bd5 	.word	0x08008bd5
 8008c18:	08008bd5 	.word	0x08008bd5
 8008c1c:	08008dab 	.word	0x08008dab
 8008c20:	08008d83 	.word	0x08008d83
 8008c24:	08008bd5 	.word	0x08008bd5
 8008c28:	08008bd5 	.word	0x08008bd5
 8008c2c:	08008d59 	.word	0x08008d59
 8008c30:	08008bd5 	.word	0x08008bd5
 8008c34:	08008bd5 	.word	0x08008bd5
 8008c38:	08008bd5 	.word	0x08008bd5
 8008c3c:	08008bd5 	.word	0x08008bd5
 8008c40:	08008d11 	.word	0x08008d11
 8008c44:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008c48:	e7db      	b.n	8008c02 <_scanf_float+0x8e>
 8008c4a:	290e      	cmp	r1, #14
 8008c4c:	d8c2      	bhi.n	8008bd4 <_scanf_float+0x60>
 8008c4e:	a001      	add	r0, pc, #4	; (adr r0, 8008c54 <_scanf_float+0xe0>)
 8008c50:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008c54:	08008d03 	.word	0x08008d03
 8008c58:	08008bd5 	.word	0x08008bd5
 8008c5c:	08008d03 	.word	0x08008d03
 8008c60:	08008d97 	.word	0x08008d97
 8008c64:	08008bd5 	.word	0x08008bd5
 8008c68:	08008cb1 	.word	0x08008cb1
 8008c6c:	08008ced 	.word	0x08008ced
 8008c70:	08008ced 	.word	0x08008ced
 8008c74:	08008ced 	.word	0x08008ced
 8008c78:	08008ced 	.word	0x08008ced
 8008c7c:	08008ced 	.word	0x08008ced
 8008c80:	08008ced 	.word	0x08008ced
 8008c84:	08008ced 	.word	0x08008ced
 8008c88:	08008ced 	.word	0x08008ced
 8008c8c:	08008ced 	.word	0x08008ced
 8008c90:	2b6e      	cmp	r3, #110	; 0x6e
 8008c92:	d809      	bhi.n	8008ca8 <_scanf_float+0x134>
 8008c94:	2b60      	cmp	r3, #96	; 0x60
 8008c96:	d8b2      	bhi.n	8008bfe <_scanf_float+0x8a>
 8008c98:	2b54      	cmp	r3, #84	; 0x54
 8008c9a:	d077      	beq.n	8008d8c <_scanf_float+0x218>
 8008c9c:	2b59      	cmp	r3, #89	; 0x59
 8008c9e:	d199      	bne.n	8008bd4 <_scanf_float+0x60>
 8008ca0:	2d07      	cmp	r5, #7
 8008ca2:	d197      	bne.n	8008bd4 <_scanf_float+0x60>
 8008ca4:	2508      	movs	r5, #8
 8008ca6:	e029      	b.n	8008cfc <_scanf_float+0x188>
 8008ca8:	2b74      	cmp	r3, #116	; 0x74
 8008caa:	d06f      	beq.n	8008d8c <_scanf_float+0x218>
 8008cac:	2b79      	cmp	r3, #121	; 0x79
 8008cae:	e7f6      	b.n	8008c9e <_scanf_float+0x12a>
 8008cb0:	6821      	ldr	r1, [r4, #0]
 8008cb2:	05c8      	lsls	r0, r1, #23
 8008cb4:	d51a      	bpl.n	8008cec <_scanf_float+0x178>
 8008cb6:	9b02      	ldr	r3, [sp, #8]
 8008cb8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008cbc:	6021      	str	r1, [r4, #0]
 8008cbe:	f109 0901 	add.w	r9, r9, #1
 8008cc2:	b11b      	cbz	r3, 8008ccc <_scanf_float+0x158>
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	3201      	adds	r2, #1
 8008cc8:	9302      	str	r3, [sp, #8]
 8008cca:	60a2      	str	r2, [r4, #8]
 8008ccc:	68a3      	ldr	r3, [r4, #8]
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	60a3      	str	r3, [r4, #8]
 8008cd2:	6923      	ldr	r3, [r4, #16]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	6123      	str	r3, [r4, #16]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	607b      	str	r3, [r7, #4]
 8008ce0:	f340 8084 	ble.w	8008dec <_scanf_float+0x278>
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	603b      	str	r3, [r7, #0]
 8008cea:	e766      	b.n	8008bba <_scanf_float+0x46>
 8008cec:	eb1a 0f05 	cmn.w	sl, r5
 8008cf0:	f47f af70 	bne.w	8008bd4 <_scanf_float+0x60>
 8008cf4:	6822      	ldr	r2, [r4, #0]
 8008cf6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008cfa:	6022      	str	r2, [r4, #0]
 8008cfc:	f806 3b01 	strb.w	r3, [r6], #1
 8008d00:	e7e4      	b.n	8008ccc <_scanf_float+0x158>
 8008d02:	6822      	ldr	r2, [r4, #0]
 8008d04:	0610      	lsls	r0, r2, #24
 8008d06:	f57f af65 	bpl.w	8008bd4 <_scanf_float+0x60>
 8008d0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d0e:	e7f4      	b.n	8008cfa <_scanf_float+0x186>
 8008d10:	f1ba 0f00 	cmp.w	sl, #0
 8008d14:	d10e      	bne.n	8008d34 <_scanf_float+0x1c0>
 8008d16:	f1b9 0f00 	cmp.w	r9, #0
 8008d1a:	d10e      	bne.n	8008d3a <_scanf_float+0x1c6>
 8008d1c:	6822      	ldr	r2, [r4, #0]
 8008d1e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008d22:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008d26:	d108      	bne.n	8008d3a <_scanf_float+0x1c6>
 8008d28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d2c:	6022      	str	r2, [r4, #0]
 8008d2e:	f04f 0a01 	mov.w	sl, #1
 8008d32:	e7e3      	b.n	8008cfc <_scanf_float+0x188>
 8008d34:	f1ba 0f02 	cmp.w	sl, #2
 8008d38:	d055      	beq.n	8008de6 <_scanf_float+0x272>
 8008d3a:	2d01      	cmp	r5, #1
 8008d3c:	d002      	beq.n	8008d44 <_scanf_float+0x1d0>
 8008d3e:	2d04      	cmp	r5, #4
 8008d40:	f47f af48 	bne.w	8008bd4 <_scanf_float+0x60>
 8008d44:	3501      	adds	r5, #1
 8008d46:	b2ed      	uxtb	r5, r5
 8008d48:	e7d8      	b.n	8008cfc <_scanf_float+0x188>
 8008d4a:	f1ba 0f01 	cmp.w	sl, #1
 8008d4e:	f47f af41 	bne.w	8008bd4 <_scanf_float+0x60>
 8008d52:	f04f 0a02 	mov.w	sl, #2
 8008d56:	e7d1      	b.n	8008cfc <_scanf_float+0x188>
 8008d58:	b97d      	cbnz	r5, 8008d7a <_scanf_float+0x206>
 8008d5a:	f1b9 0f00 	cmp.w	r9, #0
 8008d5e:	f47f af3c 	bne.w	8008bda <_scanf_float+0x66>
 8008d62:	6822      	ldr	r2, [r4, #0]
 8008d64:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008d68:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008d6c:	f47f af39 	bne.w	8008be2 <_scanf_float+0x6e>
 8008d70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d74:	6022      	str	r2, [r4, #0]
 8008d76:	2501      	movs	r5, #1
 8008d78:	e7c0      	b.n	8008cfc <_scanf_float+0x188>
 8008d7a:	2d03      	cmp	r5, #3
 8008d7c:	d0e2      	beq.n	8008d44 <_scanf_float+0x1d0>
 8008d7e:	2d05      	cmp	r5, #5
 8008d80:	e7de      	b.n	8008d40 <_scanf_float+0x1cc>
 8008d82:	2d02      	cmp	r5, #2
 8008d84:	f47f af26 	bne.w	8008bd4 <_scanf_float+0x60>
 8008d88:	2503      	movs	r5, #3
 8008d8a:	e7b7      	b.n	8008cfc <_scanf_float+0x188>
 8008d8c:	2d06      	cmp	r5, #6
 8008d8e:	f47f af21 	bne.w	8008bd4 <_scanf_float+0x60>
 8008d92:	2507      	movs	r5, #7
 8008d94:	e7b2      	b.n	8008cfc <_scanf_float+0x188>
 8008d96:	6822      	ldr	r2, [r4, #0]
 8008d98:	0591      	lsls	r1, r2, #22
 8008d9a:	f57f af1b 	bpl.w	8008bd4 <_scanf_float+0x60>
 8008d9e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008da2:	6022      	str	r2, [r4, #0]
 8008da4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008da8:	e7a8      	b.n	8008cfc <_scanf_float+0x188>
 8008daa:	6822      	ldr	r2, [r4, #0]
 8008dac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008db0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008db4:	d006      	beq.n	8008dc4 <_scanf_float+0x250>
 8008db6:	0550      	lsls	r0, r2, #21
 8008db8:	f57f af0c 	bpl.w	8008bd4 <_scanf_float+0x60>
 8008dbc:	f1b9 0f00 	cmp.w	r9, #0
 8008dc0:	f43f af0f 	beq.w	8008be2 <_scanf_float+0x6e>
 8008dc4:	0591      	lsls	r1, r2, #22
 8008dc6:	bf58      	it	pl
 8008dc8:	9901      	ldrpl	r1, [sp, #4]
 8008dca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008dce:	bf58      	it	pl
 8008dd0:	eba9 0101 	subpl.w	r1, r9, r1
 8008dd4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008dd8:	bf58      	it	pl
 8008dda:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008dde:	6022      	str	r2, [r4, #0]
 8008de0:	f04f 0900 	mov.w	r9, #0
 8008de4:	e78a      	b.n	8008cfc <_scanf_float+0x188>
 8008de6:	f04f 0a03 	mov.w	sl, #3
 8008dea:	e787      	b.n	8008cfc <_scanf_float+0x188>
 8008dec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008df0:	4639      	mov	r1, r7
 8008df2:	4640      	mov	r0, r8
 8008df4:	4798      	blx	r3
 8008df6:	2800      	cmp	r0, #0
 8008df8:	f43f aedf 	beq.w	8008bba <_scanf_float+0x46>
 8008dfc:	e6ea      	b.n	8008bd4 <_scanf_float+0x60>
 8008dfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e06:	463a      	mov	r2, r7
 8008e08:	4640      	mov	r0, r8
 8008e0a:	4798      	blx	r3
 8008e0c:	6923      	ldr	r3, [r4, #16]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	6123      	str	r3, [r4, #16]
 8008e12:	e6ec      	b.n	8008bee <_scanf_float+0x7a>
 8008e14:	1e6b      	subs	r3, r5, #1
 8008e16:	2b06      	cmp	r3, #6
 8008e18:	d825      	bhi.n	8008e66 <_scanf_float+0x2f2>
 8008e1a:	2d02      	cmp	r5, #2
 8008e1c:	d836      	bhi.n	8008e8c <_scanf_float+0x318>
 8008e1e:	455e      	cmp	r6, fp
 8008e20:	f67f aee8 	bls.w	8008bf4 <_scanf_float+0x80>
 8008e24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e2c:	463a      	mov	r2, r7
 8008e2e:	4640      	mov	r0, r8
 8008e30:	4798      	blx	r3
 8008e32:	6923      	ldr	r3, [r4, #16]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	6123      	str	r3, [r4, #16]
 8008e38:	e7f1      	b.n	8008e1e <_scanf_float+0x2aa>
 8008e3a:	9802      	ldr	r0, [sp, #8]
 8008e3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e40:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008e44:	9002      	str	r0, [sp, #8]
 8008e46:	463a      	mov	r2, r7
 8008e48:	4640      	mov	r0, r8
 8008e4a:	4798      	blx	r3
 8008e4c:	6923      	ldr	r3, [r4, #16]
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	6123      	str	r3, [r4, #16]
 8008e52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008e56:	fa5f fa8a 	uxtb.w	sl, sl
 8008e5a:	f1ba 0f02 	cmp.w	sl, #2
 8008e5e:	d1ec      	bne.n	8008e3a <_scanf_float+0x2c6>
 8008e60:	3d03      	subs	r5, #3
 8008e62:	b2ed      	uxtb	r5, r5
 8008e64:	1b76      	subs	r6, r6, r5
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	05da      	lsls	r2, r3, #23
 8008e6a:	d52f      	bpl.n	8008ecc <_scanf_float+0x358>
 8008e6c:	055b      	lsls	r3, r3, #21
 8008e6e:	d510      	bpl.n	8008e92 <_scanf_float+0x31e>
 8008e70:	455e      	cmp	r6, fp
 8008e72:	f67f aebf 	bls.w	8008bf4 <_scanf_float+0x80>
 8008e76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e7e:	463a      	mov	r2, r7
 8008e80:	4640      	mov	r0, r8
 8008e82:	4798      	blx	r3
 8008e84:	6923      	ldr	r3, [r4, #16]
 8008e86:	3b01      	subs	r3, #1
 8008e88:	6123      	str	r3, [r4, #16]
 8008e8a:	e7f1      	b.n	8008e70 <_scanf_float+0x2fc>
 8008e8c:	46aa      	mov	sl, r5
 8008e8e:	9602      	str	r6, [sp, #8]
 8008e90:	e7df      	b.n	8008e52 <_scanf_float+0x2de>
 8008e92:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008e96:	6923      	ldr	r3, [r4, #16]
 8008e98:	2965      	cmp	r1, #101	; 0x65
 8008e9a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008e9e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8008ea2:	6123      	str	r3, [r4, #16]
 8008ea4:	d00c      	beq.n	8008ec0 <_scanf_float+0x34c>
 8008ea6:	2945      	cmp	r1, #69	; 0x45
 8008ea8:	d00a      	beq.n	8008ec0 <_scanf_float+0x34c>
 8008eaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008eae:	463a      	mov	r2, r7
 8008eb0:	4640      	mov	r0, r8
 8008eb2:	4798      	blx	r3
 8008eb4:	6923      	ldr	r3, [r4, #16]
 8008eb6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	1eb5      	subs	r5, r6, #2
 8008ebe:	6123      	str	r3, [r4, #16]
 8008ec0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ec4:	463a      	mov	r2, r7
 8008ec6:	4640      	mov	r0, r8
 8008ec8:	4798      	blx	r3
 8008eca:	462e      	mov	r6, r5
 8008ecc:	6825      	ldr	r5, [r4, #0]
 8008ece:	f015 0510 	ands.w	r5, r5, #16
 8008ed2:	d158      	bne.n	8008f86 <_scanf_float+0x412>
 8008ed4:	7035      	strb	r5, [r6, #0]
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ee0:	d11c      	bne.n	8008f1c <_scanf_float+0x3a8>
 8008ee2:	9b01      	ldr	r3, [sp, #4]
 8008ee4:	454b      	cmp	r3, r9
 8008ee6:	eba3 0209 	sub.w	r2, r3, r9
 8008eea:	d124      	bne.n	8008f36 <_scanf_float+0x3c2>
 8008eec:	2200      	movs	r2, #0
 8008eee:	4659      	mov	r1, fp
 8008ef0:	4640      	mov	r0, r8
 8008ef2:	f002 fd31 	bl	800b958 <_strtod_r>
 8008ef6:	9b03      	ldr	r3, [sp, #12]
 8008ef8:	6821      	ldr	r1, [r4, #0]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f011 0f02 	tst.w	r1, #2
 8008f00:	ec57 6b10 	vmov	r6, r7, d0
 8008f04:	f103 0204 	add.w	r2, r3, #4
 8008f08:	d020      	beq.n	8008f4c <_scanf_float+0x3d8>
 8008f0a:	9903      	ldr	r1, [sp, #12]
 8008f0c:	600a      	str	r2, [r1, #0]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	e9c3 6700 	strd	r6, r7, [r3]
 8008f14:	68e3      	ldr	r3, [r4, #12]
 8008f16:	3301      	adds	r3, #1
 8008f18:	60e3      	str	r3, [r4, #12]
 8008f1a:	e66c      	b.n	8008bf6 <_scanf_float+0x82>
 8008f1c:	9b04      	ldr	r3, [sp, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d0e4      	beq.n	8008eec <_scanf_float+0x378>
 8008f22:	9905      	ldr	r1, [sp, #20]
 8008f24:	230a      	movs	r3, #10
 8008f26:	462a      	mov	r2, r5
 8008f28:	3101      	adds	r1, #1
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	f002 fd9c 	bl	800ba68 <_strtol_r>
 8008f30:	9b04      	ldr	r3, [sp, #16]
 8008f32:	9e05      	ldr	r6, [sp, #20]
 8008f34:	1ac2      	subs	r2, r0, r3
 8008f36:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008f3a:	429e      	cmp	r6, r3
 8008f3c:	bf28      	it	cs
 8008f3e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008f42:	4912      	ldr	r1, [pc, #72]	; (8008f8c <_scanf_float+0x418>)
 8008f44:	4630      	mov	r0, r6
 8008f46:	f000 f955 	bl	80091f4 <siprintf>
 8008f4a:	e7cf      	b.n	8008eec <_scanf_float+0x378>
 8008f4c:	f011 0f04 	tst.w	r1, #4
 8008f50:	9903      	ldr	r1, [sp, #12]
 8008f52:	600a      	str	r2, [r1, #0]
 8008f54:	d1db      	bne.n	8008f0e <_scanf_float+0x39a>
 8008f56:	f8d3 8000 	ldr.w	r8, [r3]
 8008f5a:	ee10 2a10 	vmov	r2, s0
 8008f5e:	ee10 0a10 	vmov	r0, s0
 8008f62:	463b      	mov	r3, r7
 8008f64:	4639      	mov	r1, r7
 8008f66:	f7f7 fe11 	bl	8000b8c <__aeabi_dcmpun>
 8008f6a:	b128      	cbz	r0, 8008f78 <_scanf_float+0x404>
 8008f6c:	4808      	ldr	r0, [pc, #32]	; (8008f90 <_scanf_float+0x41c>)
 8008f6e:	f000 fab9 	bl	80094e4 <nanf>
 8008f72:	ed88 0a00 	vstr	s0, [r8]
 8008f76:	e7cd      	b.n	8008f14 <_scanf_float+0x3a0>
 8008f78:	4630      	mov	r0, r6
 8008f7a:	4639      	mov	r1, r7
 8008f7c:	f7f7 fe64 	bl	8000c48 <__aeabi_d2f>
 8008f80:	f8c8 0000 	str.w	r0, [r8]
 8008f84:	e7c6      	b.n	8008f14 <_scanf_float+0x3a0>
 8008f86:	2500      	movs	r5, #0
 8008f88:	e635      	b.n	8008bf6 <_scanf_float+0x82>
 8008f8a:	bf00      	nop
 8008f8c:	0800d182 	.word	0x0800d182
 8008f90:	0800d515 	.word	0x0800d515

08008f94 <std>:
 8008f94:	2300      	movs	r3, #0
 8008f96:	b510      	push	{r4, lr}
 8008f98:	4604      	mov	r4, r0
 8008f9a:	e9c0 3300 	strd	r3, r3, [r0]
 8008f9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fa2:	6083      	str	r3, [r0, #8]
 8008fa4:	8181      	strh	r1, [r0, #12]
 8008fa6:	6643      	str	r3, [r0, #100]	; 0x64
 8008fa8:	81c2      	strh	r2, [r0, #14]
 8008faa:	6183      	str	r3, [r0, #24]
 8008fac:	4619      	mov	r1, r3
 8008fae:	2208      	movs	r2, #8
 8008fb0:	305c      	adds	r0, #92	; 0x5c
 8008fb2:	f000 fa17 	bl	80093e4 <memset>
 8008fb6:	4b0d      	ldr	r3, [pc, #52]	; (8008fec <std+0x58>)
 8008fb8:	6263      	str	r3, [r4, #36]	; 0x24
 8008fba:	4b0d      	ldr	r3, [pc, #52]	; (8008ff0 <std+0x5c>)
 8008fbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008fbe:	4b0d      	ldr	r3, [pc, #52]	; (8008ff4 <std+0x60>)
 8008fc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fc2:	4b0d      	ldr	r3, [pc, #52]	; (8008ff8 <std+0x64>)
 8008fc4:	6323      	str	r3, [r4, #48]	; 0x30
 8008fc6:	4b0d      	ldr	r3, [pc, #52]	; (8008ffc <std+0x68>)
 8008fc8:	6224      	str	r4, [r4, #32]
 8008fca:	429c      	cmp	r4, r3
 8008fcc:	d006      	beq.n	8008fdc <std+0x48>
 8008fce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008fd2:	4294      	cmp	r4, r2
 8008fd4:	d002      	beq.n	8008fdc <std+0x48>
 8008fd6:	33d0      	adds	r3, #208	; 0xd0
 8008fd8:	429c      	cmp	r4, r3
 8008fda:	d105      	bne.n	8008fe8 <std+0x54>
 8008fdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fe4:	f000 ba7a 	b.w	80094dc <__retarget_lock_init_recursive>
 8008fe8:	bd10      	pop	{r4, pc}
 8008fea:	bf00      	nop
 8008fec:	08009235 	.word	0x08009235
 8008ff0:	08009257 	.word	0x08009257
 8008ff4:	0800928f 	.word	0x0800928f
 8008ff8:	080092b3 	.word	0x080092b3
 8008ffc:	20000458 	.word	0x20000458

08009000 <stdio_exit_handler>:
 8009000:	4a02      	ldr	r2, [pc, #8]	; (800900c <stdio_exit_handler+0xc>)
 8009002:	4903      	ldr	r1, [pc, #12]	; (8009010 <stdio_exit_handler+0x10>)
 8009004:	4803      	ldr	r0, [pc, #12]	; (8009014 <stdio_exit_handler+0x14>)
 8009006:	f000 b869 	b.w	80090dc <_fwalk_sglue>
 800900a:	bf00      	nop
 800900c:	20000034 	.word	0x20000034
 8009010:	0800c0b1 	.word	0x0800c0b1
 8009014:	20000040 	.word	0x20000040

08009018 <cleanup_stdio>:
 8009018:	6841      	ldr	r1, [r0, #4]
 800901a:	4b0c      	ldr	r3, [pc, #48]	; (800904c <cleanup_stdio+0x34>)
 800901c:	4299      	cmp	r1, r3
 800901e:	b510      	push	{r4, lr}
 8009020:	4604      	mov	r4, r0
 8009022:	d001      	beq.n	8009028 <cleanup_stdio+0x10>
 8009024:	f003 f844 	bl	800c0b0 <_fflush_r>
 8009028:	68a1      	ldr	r1, [r4, #8]
 800902a:	4b09      	ldr	r3, [pc, #36]	; (8009050 <cleanup_stdio+0x38>)
 800902c:	4299      	cmp	r1, r3
 800902e:	d002      	beq.n	8009036 <cleanup_stdio+0x1e>
 8009030:	4620      	mov	r0, r4
 8009032:	f003 f83d 	bl	800c0b0 <_fflush_r>
 8009036:	68e1      	ldr	r1, [r4, #12]
 8009038:	4b06      	ldr	r3, [pc, #24]	; (8009054 <cleanup_stdio+0x3c>)
 800903a:	4299      	cmp	r1, r3
 800903c:	d004      	beq.n	8009048 <cleanup_stdio+0x30>
 800903e:	4620      	mov	r0, r4
 8009040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009044:	f003 b834 	b.w	800c0b0 <_fflush_r>
 8009048:	bd10      	pop	{r4, pc}
 800904a:	bf00      	nop
 800904c:	20000458 	.word	0x20000458
 8009050:	200004c0 	.word	0x200004c0
 8009054:	20000528 	.word	0x20000528

08009058 <global_stdio_init.part.0>:
 8009058:	b510      	push	{r4, lr}
 800905a:	4b0b      	ldr	r3, [pc, #44]	; (8009088 <global_stdio_init.part.0+0x30>)
 800905c:	4c0b      	ldr	r4, [pc, #44]	; (800908c <global_stdio_init.part.0+0x34>)
 800905e:	4a0c      	ldr	r2, [pc, #48]	; (8009090 <global_stdio_init.part.0+0x38>)
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	4620      	mov	r0, r4
 8009064:	2200      	movs	r2, #0
 8009066:	2104      	movs	r1, #4
 8009068:	f7ff ff94 	bl	8008f94 <std>
 800906c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009070:	2201      	movs	r2, #1
 8009072:	2109      	movs	r1, #9
 8009074:	f7ff ff8e 	bl	8008f94 <std>
 8009078:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800907c:	2202      	movs	r2, #2
 800907e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009082:	2112      	movs	r1, #18
 8009084:	f7ff bf86 	b.w	8008f94 <std>
 8009088:	20000590 	.word	0x20000590
 800908c:	20000458 	.word	0x20000458
 8009090:	08009001 	.word	0x08009001

08009094 <__sfp_lock_acquire>:
 8009094:	4801      	ldr	r0, [pc, #4]	; (800909c <__sfp_lock_acquire+0x8>)
 8009096:	f000 ba22 	b.w	80094de <__retarget_lock_acquire_recursive>
 800909a:	bf00      	nop
 800909c:	20000599 	.word	0x20000599

080090a0 <__sfp_lock_release>:
 80090a0:	4801      	ldr	r0, [pc, #4]	; (80090a8 <__sfp_lock_release+0x8>)
 80090a2:	f000 ba1d 	b.w	80094e0 <__retarget_lock_release_recursive>
 80090a6:	bf00      	nop
 80090a8:	20000599 	.word	0x20000599

080090ac <__sinit>:
 80090ac:	b510      	push	{r4, lr}
 80090ae:	4604      	mov	r4, r0
 80090b0:	f7ff fff0 	bl	8009094 <__sfp_lock_acquire>
 80090b4:	6a23      	ldr	r3, [r4, #32]
 80090b6:	b11b      	cbz	r3, 80090c0 <__sinit+0x14>
 80090b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090bc:	f7ff bff0 	b.w	80090a0 <__sfp_lock_release>
 80090c0:	4b04      	ldr	r3, [pc, #16]	; (80090d4 <__sinit+0x28>)
 80090c2:	6223      	str	r3, [r4, #32]
 80090c4:	4b04      	ldr	r3, [pc, #16]	; (80090d8 <__sinit+0x2c>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1f5      	bne.n	80090b8 <__sinit+0xc>
 80090cc:	f7ff ffc4 	bl	8009058 <global_stdio_init.part.0>
 80090d0:	e7f2      	b.n	80090b8 <__sinit+0xc>
 80090d2:	bf00      	nop
 80090d4:	08009019 	.word	0x08009019
 80090d8:	20000590 	.word	0x20000590

080090dc <_fwalk_sglue>:
 80090dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090e0:	4607      	mov	r7, r0
 80090e2:	4688      	mov	r8, r1
 80090e4:	4614      	mov	r4, r2
 80090e6:	2600      	movs	r6, #0
 80090e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090ec:	f1b9 0901 	subs.w	r9, r9, #1
 80090f0:	d505      	bpl.n	80090fe <_fwalk_sglue+0x22>
 80090f2:	6824      	ldr	r4, [r4, #0]
 80090f4:	2c00      	cmp	r4, #0
 80090f6:	d1f7      	bne.n	80090e8 <_fwalk_sglue+0xc>
 80090f8:	4630      	mov	r0, r6
 80090fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090fe:	89ab      	ldrh	r3, [r5, #12]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d907      	bls.n	8009114 <_fwalk_sglue+0x38>
 8009104:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009108:	3301      	adds	r3, #1
 800910a:	d003      	beq.n	8009114 <_fwalk_sglue+0x38>
 800910c:	4629      	mov	r1, r5
 800910e:	4638      	mov	r0, r7
 8009110:	47c0      	blx	r8
 8009112:	4306      	orrs	r6, r0
 8009114:	3568      	adds	r5, #104	; 0x68
 8009116:	e7e9      	b.n	80090ec <_fwalk_sglue+0x10>

08009118 <iprintf>:
 8009118:	b40f      	push	{r0, r1, r2, r3}
 800911a:	b507      	push	{r0, r1, r2, lr}
 800911c:	4906      	ldr	r1, [pc, #24]	; (8009138 <iprintf+0x20>)
 800911e:	ab04      	add	r3, sp, #16
 8009120:	6808      	ldr	r0, [r1, #0]
 8009122:	f853 2b04 	ldr.w	r2, [r3], #4
 8009126:	6881      	ldr	r1, [r0, #8]
 8009128:	9301      	str	r3, [sp, #4]
 800912a:	f002 fe21 	bl	800bd70 <_vfiprintf_r>
 800912e:	b003      	add	sp, #12
 8009130:	f85d eb04 	ldr.w	lr, [sp], #4
 8009134:	b004      	add	sp, #16
 8009136:	4770      	bx	lr
 8009138:	2000008c 	.word	0x2000008c

0800913c <_puts_r>:
 800913c:	6a03      	ldr	r3, [r0, #32]
 800913e:	b570      	push	{r4, r5, r6, lr}
 8009140:	6884      	ldr	r4, [r0, #8]
 8009142:	4605      	mov	r5, r0
 8009144:	460e      	mov	r6, r1
 8009146:	b90b      	cbnz	r3, 800914c <_puts_r+0x10>
 8009148:	f7ff ffb0 	bl	80090ac <__sinit>
 800914c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800914e:	07db      	lsls	r3, r3, #31
 8009150:	d405      	bmi.n	800915e <_puts_r+0x22>
 8009152:	89a3      	ldrh	r3, [r4, #12]
 8009154:	0598      	lsls	r0, r3, #22
 8009156:	d402      	bmi.n	800915e <_puts_r+0x22>
 8009158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800915a:	f000 f9c0 	bl	80094de <__retarget_lock_acquire_recursive>
 800915e:	89a3      	ldrh	r3, [r4, #12]
 8009160:	0719      	lsls	r1, r3, #28
 8009162:	d513      	bpl.n	800918c <_puts_r+0x50>
 8009164:	6923      	ldr	r3, [r4, #16]
 8009166:	b18b      	cbz	r3, 800918c <_puts_r+0x50>
 8009168:	3e01      	subs	r6, #1
 800916a:	68a3      	ldr	r3, [r4, #8]
 800916c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009170:	3b01      	subs	r3, #1
 8009172:	60a3      	str	r3, [r4, #8]
 8009174:	b9e9      	cbnz	r1, 80091b2 <_puts_r+0x76>
 8009176:	2b00      	cmp	r3, #0
 8009178:	da2e      	bge.n	80091d8 <_puts_r+0x9c>
 800917a:	4622      	mov	r2, r4
 800917c:	210a      	movs	r1, #10
 800917e:	4628      	mov	r0, r5
 8009180:	f000 f89b 	bl	80092ba <__swbuf_r>
 8009184:	3001      	adds	r0, #1
 8009186:	d007      	beq.n	8009198 <_puts_r+0x5c>
 8009188:	250a      	movs	r5, #10
 800918a:	e007      	b.n	800919c <_puts_r+0x60>
 800918c:	4621      	mov	r1, r4
 800918e:	4628      	mov	r0, r5
 8009190:	f000 f8d0 	bl	8009334 <__swsetup_r>
 8009194:	2800      	cmp	r0, #0
 8009196:	d0e7      	beq.n	8009168 <_puts_r+0x2c>
 8009198:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800919c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800919e:	07da      	lsls	r2, r3, #31
 80091a0:	d405      	bmi.n	80091ae <_puts_r+0x72>
 80091a2:	89a3      	ldrh	r3, [r4, #12]
 80091a4:	059b      	lsls	r3, r3, #22
 80091a6:	d402      	bmi.n	80091ae <_puts_r+0x72>
 80091a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091aa:	f000 f999 	bl	80094e0 <__retarget_lock_release_recursive>
 80091ae:	4628      	mov	r0, r5
 80091b0:	bd70      	pop	{r4, r5, r6, pc}
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	da04      	bge.n	80091c0 <_puts_r+0x84>
 80091b6:	69a2      	ldr	r2, [r4, #24]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	dc06      	bgt.n	80091ca <_puts_r+0x8e>
 80091bc:	290a      	cmp	r1, #10
 80091be:	d004      	beq.n	80091ca <_puts_r+0x8e>
 80091c0:	6823      	ldr	r3, [r4, #0]
 80091c2:	1c5a      	adds	r2, r3, #1
 80091c4:	6022      	str	r2, [r4, #0]
 80091c6:	7019      	strb	r1, [r3, #0]
 80091c8:	e7cf      	b.n	800916a <_puts_r+0x2e>
 80091ca:	4622      	mov	r2, r4
 80091cc:	4628      	mov	r0, r5
 80091ce:	f000 f874 	bl	80092ba <__swbuf_r>
 80091d2:	3001      	adds	r0, #1
 80091d4:	d1c9      	bne.n	800916a <_puts_r+0x2e>
 80091d6:	e7df      	b.n	8009198 <_puts_r+0x5c>
 80091d8:	6823      	ldr	r3, [r4, #0]
 80091da:	250a      	movs	r5, #10
 80091dc:	1c5a      	adds	r2, r3, #1
 80091de:	6022      	str	r2, [r4, #0]
 80091e0:	701d      	strb	r5, [r3, #0]
 80091e2:	e7db      	b.n	800919c <_puts_r+0x60>

080091e4 <puts>:
 80091e4:	4b02      	ldr	r3, [pc, #8]	; (80091f0 <puts+0xc>)
 80091e6:	4601      	mov	r1, r0
 80091e8:	6818      	ldr	r0, [r3, #0]
 80091ea:	f7ff bfa7 	b.w	800913c <_puts_r>
 80091ee:	bf00      	nop
 80091f0:	2000008c 	.word	0x2000008c

080091f4 <siprintf>:
 80091f4:	b40e      	push	{r1, r2, r3}
 80091f6:	b500      	push	{lr}
 80091f8:	b09c      	sub	sp, #112	; 0x70
 80091fa:	ab1d      	add	r3, sp, #116	; 0x74
 80091fc:	9002      	str	r0, [sp, #8]
 80091fe:	9006      	str	r0, [sp, #24]
 8009200:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009204:	4809      	ldr	r0, [pc, #36]	; (800922c <siprintf+0x38>)
 8009206:	9107      	str	r1, [sp, #28]
 8009208:	9104      	str	r1, [sp, #16]
 800920a:	4909      	ldr	r1, [pc, #36]	; (8009230 <siprintf+0x3c>)
 800920c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009210:	9105      	str	r1, [sp, #20]
 8009212:	6800      	ldr	r0, [r0, #0]
 8009214:	9301      	str	r3, [sp, #4]
 8009216:	a902      	add	r1, sp, #8
 8009218:	f002 fc82 	bl	800bb20 <_svfiprintf_r>
 800921c:	9b02      	ldr	r3, [sp, #8]
 800921e:	2200      	movs	r2, #0
 8009220:	701a      	strb	r2, [r3, #0]
 8009222:	b01c      	add	sp, #112	; 0x70
 8009224:	f85d eb04 	ldr.w	lr, [sp], #4
 8009228:	b003      	add	sp, #12
 800922a:	4770      	bx	lr
 800922c:	2000008c 	.word	0x2000008c
 8009230:	ffff0208 	.word	0xffff0208

08009234 <__sread>:
 8009234:	b510      	push	{r4, lr}
 8009236:	460c      	mov	r4, r1
 8009238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800923c:	f000 f900 	bl	8009440 <_read_r>
 8009240:	2800      	cmp	r0, #0
 8009242:	bfab      	itete	ge
 8009244:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009246:	89a3      	ldrhlt	r3, [r4, #12]
 8009248:	181b      	addge	r3, r3, r0
 800924a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800924e:	bfac      	ite	ge
 8009250:	6563      	strge	r3, [r4, #84]	; 0x54
 8009252:	81a3      	strhlt	r3, [r4, #12]
 8009254:	bd10      	pop	{r4, pc}

08009256 <__swrite>:
 8009256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800925a:	461f      	mov	r7, r3
 800925c:	898b      	ldrh	r3, [r1, #12]
 800925e:	05db      	lsls	r3, r3, #23
 8009260:	4605      	mov	r5, r0
 8009262:	460c      	mov	r4, r1
 8009264:	4616      	mov	r6, r2
 8009266:	d505      	bpl.n	8009274 <__swrite+0x1e>
 8009268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800926c:	2302      	movs	r3, #2
 800926e:	2200      	movs	r2, #0
 8009270:	f000 f8d4 	bl	800941c <_lseek_r>
 8009274:	89a3      	ldrh	r3, [r4, #12]
 8009276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800927a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800927e:	81a3      	strh	r3, [r4, #12]
 8009280:	4632      	mov	r2, r6
 8009282:	463b      	mov	r3, r7
 8009284:	4628      	mov	r0, r5
 8009286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800928a:	f000 b8eb 	b.w	8009464 <_write_r>

0800928e <__sseek>:
 800928e:	b510      	push	{r4, lr}
 8009290:	460c      	mov	r4, r1
 8009292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009296:	f000 f8c1 	bl	800941c <_lseek_r>
 800929a:	1c43      	adds	r3, r0, #1
 800929c:	89a3      	ldrh	r3, [r4, #12]
 800929e:	bf15      	itete	ne
 80092a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80092a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092aa:	81a3      	strheq	r3, [r4, #12]
 80092ac:	bf18      	it	ne
 80092ae:	81a3      	strhne	r3, [r4, #12]
 80092b0:	bd10      	pop	{r4, pc}

080092b2 <__sclose>:
 80092b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092b6:	f000 b8a1 	b.w	80093fc <_close_r>

080092ba <__swbuf_r>:
 80092ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092bc:	460e      	mov	r6, r1
 80092be:	4614      	mov	r4, r2
 80092c0:	4605      	mov	r5, r0
 80092c2:	b118      	cbz	r0, 80092cc <__swbuf_r+0x12>
 80092c4:	6a03      	ldr	r3, [r0, #32]
 80092c6:	b90b      	cbnz	r3, 80092cc <__swbuf_r+0x12>
 80092c8:	f7ff fef0 	bl	80090ac <__sinit>
 80092cc:	69a3      	ldr	r3, [r4, #24]
 80092ce:	60a3      	str	r3, [r4, #8]
 80092d0:	89a3      	ldrh	r3, [r4, #12]
 80092d2:	071a      	lsls	r2, r3, #28
 80092d4:	d525      	bpl.n	8009322 <__swbuf_r+0x68>
 80092d6:	6923      	ldr	r3, [r4, #16]
 80092d8:	b31b      	cbz	r3, 8009322 <__swbuf_r+0x68>
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	6922      	ldr	r2, [r4, #16]
 80092de:	1a98      	subs	r0, r3, r2
 80092e0:	6963      	ldr	r3, [r4, #20]
 80092e2:	b2f6      	uxtb	r6, r6
 80092e4:	4283      	cmp	r3, r0
 80092e6:	4637      	mov	r7, r6
 80092e8:	dc04      	bgt.n	80092f4 <__swbuf_r+0x3a>
 80092ea:	4621      	mov	r1, r4
 80092ec:	4628      	mov	r0, r5
 80092ee:	f002 fedf 	bl	800c0b0 <_fflush_r>
 80092f2:	b9e0      	cbnz	r0, 800932e <__swbuf_r+0x74>
 80092f4:	68a3      	ldr	r3, [r4, #8]
 80092f6:	3b01      	subs	r3, #1
 80092f8:	60a3      	str	r3, [r4, #8]
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	1c5a      	adds	r2, r3, #1
 80092fe:	6022      	str	r2, [r4, #0]
 8009300:	701e      	strb	r6, [r3, #0]
 8009302:	6962      	ldr	r2, [r4, #20]
 8009304:	1c43      	adds	r3, r0, #1
 8009306:	429a      	cmp	r2, r3
 8009308:	d004      	beq.n	8009314 <__swbuf_r+0x5a>
 800930a:	89a3      	ldrh	r3, [r4, #12]
 800930c:	07db      	lsls	r3, r3, #31
 800930e:	d506      	bpl.n	800931e <__swbuf_r+0x64>
 8009310:	2e0a      	cmp	r6, #10
 8009312:	d104      	bne.n	800931e <__swbuf_r+0x64>
 8009314:	4621      	mov	r1, r4
 8009316:	4628      	mov	r0, r5
 8009318:	f002 feca 	bl	800c0b0 <_fflush_r>
 800931c:	b938      	cbnz	r0, 800932e <__swbuf_r+0x74>
 800931e:	4638      	mov	r0, r7
 8009320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009322:	4621      	mov	r1, r4
 8009324:	4628      	mov	r0, r5
 8009326:	f000 f805 	bl	8009334 <__swsetup_r>
 800932a:	2800      	cmp	r0, #0
 800932c:	d0d5      	beq.n	80092da <__swbuf_r+0x20>
 800932e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009332:	e7f4      	b.n	800931e <__swbuf_r+0x64>

08009334 <__swsetup_r>:
 8009334:	b538      	push	{r3, r4, r5, lr}
 8009336:	4b2a      	ldr	r3, [pc, #168]	; (80093e0 <__swsetup_r+0xac>)
 8009338:	4605      	mov	r5, r0
 800933a:	6818      	ldr	r0, [r3, #0]
 800933c:	460c      	mov	r4, r1
 800933e:	b118      	cbz	r0, 8009348 <__swsetup_r+0x14>
 8009340:	6a03      	ldr	r3, [r0, #32]
 8009342:	b90b      	cbnz	r3, 8009348 <__swsetup_r+0x14>
 8009344:	f7ff feb2 	bl	80090ac <__sinit>
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800934e:	0718      	lsls	r0, r3, #28
 8009350:	d422      	bmi.n	8009398 <__swsetup_r+0x64>
 8009352:	06d9      	lsls	r1, r3, #27
 8009354:	d407      	bmi.n	8009366 <__swsetup_r+0x32>
 8009356:	2309      	movs	r3, #9
 8009358:	602b      	str	r3, [r5, #0]
 800935a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009364:	e034      	b.n	80093d0 <__swsetup_r+0x9c>
 8009366:	0758      	lsls	r0, r3, #29
 8009368:	d512      	bpl.n	8009390 <__swsetup_r+0x5c>
 800936a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800936c:	b141      	cbz	r1, 8009380 <__swsetup_r+0x4c>
 800936e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009372:	4299      	cmp	r1, r3
 8009374:	d002      	beq.n	800937c <__swsetup_r+0x48>
 8009376:	4628      	mov	r0, r5
 8009378:	f000 ff34 	bl	800a1e4 <_free_r>
 800937c:	2300      	movs	r3, #0
 800937e:	6363      	str	r3, [r4, #52]	; 0x34
 8009380:	89a3      	ldrh	r3, [r4, #12]
 8009382:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009386:	81a3      	strh	r3, [r4, #12]
 8009388:	2300      	movs	r3, #0
 800938a:	6063      	str	r3, [r4, #4]
 800938c:	6923      	ldr	r3, [r4, #16]
 800938e:	6023      	str	r3, [r4, #0]
 8009390:	89a3      	ldrh	r3, [r4, #12]
 8009392:	f043 0308 	orr.w	r3, r3, #8
 8009396:	81a3      	strh	r3, [r4, #12]
 8009398:	6923      	ldr	r3, [r4, #16]
 800939a:	b94b      	cbnz	r3, 80093b0 <__swsetup_r+0x7c>
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093a6:	d003      	beq.n	80093b0 <__swsetup_r+0x7c>
 80093a8:	4621      	mov	r1, r4
 80093aa:	4628      	mov	r0, r5
 80093ac:	f002 fece 	bl	800c14c <__smakebuf_r>
 80093b0:	89a0      	ldrh	r0, [r4, #12]
 80093b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093b6:	f010 0301 	ands.w	r3, r0, #1
 80093ba:	d00a      	beq.n	80093d2 <__swsetup_r+0x9e>
 80093bc:	2300      	movs	r3, #0
 80093be:	60a3      	str	r3, [r4, #8]
 80093c0:	6963      	ldr	r3, [r4, #20]
 80093c2:	425b      	negs	r3, r3
 80093c4:	61a3      	str	r3, [r4, #24]
 80093c6:	6923      	ldr	r3, [r4, #16]
 80093c8:	b943      	cbnz	r3, 80093dc <__swsetup_r+0xa8>
 80093ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093ce:	d1c4      	bne.n	800935a <__swsetup_r+0x26>
 80093d0:	bd38      	pop	{r3, r4, r5, pc}
 80093d2:	0781      	lsls	r1, r0, #30
 80093d4:	bf58      	it	pl
 80093d6:	6963      	ldrpl	r3, [r4, #20]
 80093d8:	60a3      	str	r3, [r4, #8]
 80093da:	e7f4      	b.n	80093c6 <__swsetup_r+0x92>
 80093dc:	2000      	movs	r0, #0
 80093de:	e7f7      	b.n	80093d0 <__swsetup_r+0x9c>
 80093e0:	2000008c 	.word	0x2000008c

080093e4 <memset>:
 80093e4:	4402      	add	r2, r0
 80093e6:	4603      	mov	r3, r0
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d100      	bne.n	80093ee <memset+0xa>
 80093ec:	4770      	bx	lr
 80093ee:	f803 1b01 	strb.w	r1, [r3], #1
 80093f2:	e7f9      	b.n	80093e8 <memset+0x4>

080093f4 <_localeconv_r>:
 80093f4:	4800      	ldr	r0, [pc, #0]	; (80093f8 <_localeconv_r+0x4>)
 80093f6:	4770      	bx	lr
 80093f8:	20000180 	.word	0x20000180

080093fc <_close_r>:
 80093fc:	b538      	push	{r3, r4, r5, lr}
 80093fe:	4d06      	ldr	r5, [pc, #24]	; (8009418 <_close_r+0x1c>)
 8009400:	2300      	movs	r3, #0
 8009402:	4604      	mov	r4, r0
 8009404:	4608      	mov	r0, r1
 8009406:	602b      	str	r3, [r5, #0]
 8009408:	f7f8 fc23 	bl	8001c52 <_close>
 800940c:	1c43      	adds	r3, r0, #1
 800940e:	d102      	bne.n	8009416 <_close_r+0x1a>
 8009410:	682b      	ldr	r3, [r5, #0]
 8009412:	b103      	cbz	r3, 8009416 <_close_r+0x1a>
 8009414:	6023      	str	r3, [r4, #0]
 8009416:	bd38      	pop	{r3, r4, r5, pc}
 8009418:	20000594 	.word	0x20000594

0800941c <_lseek_r>:
 800941c:	b538      	push	{r3, r4, r5, lr}
 800941e:	4d07      	ldr	r5, [pc, #28]	; (800943c <_lseek_r+0x20>)
 8009420:	4604      	mov	r4, r0
 8009422:	4608      	mov	r0, r1
 8009424:	4611      	mov	r1, r2
 8009426:	2200      	movs	r2, #0
 8009428:	602a      	str	r2, [r5, #0]
 800942a:	461a      	mov	r2, r3
 800942c:	f7f8 fc38 	bl	8001ca0 <_lseek>
 8009430:	1c43      	adds	r3, r0, #1
 8009432:	d102      	bne.n	800943a <_lseek_r+0x1e>
 8009434:	682b      	ldr	r3, [r5, #0]
 8009436:	b103      	cbz	r3, 800943a <_lseek_r+0x1e>
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	bd38      	pop	{r3, r4, r5, pc}
 800943c:	20000594 	.word	0x20000594

08009440 <_read_r>:
 8009440:	b538      	push	{r3, r4, r5, lr}
 8009442:	4d07      	ldr	r5, [pc, #28]	; (8009460 <_read_r+0x20>)
 8009444:	4604      	mov	r4, r0
 8009446:	4608      	mov	r0, r1
 8009448:	4611      	mov	r1, r2
 800944a:	2200      	movs	r2, #0
 800944c:	602a      	str	r2, [r5, #0]
 800944e:	461a      	mov	r2, r3
 8009450:	f7f8 fbc6 	bl	8001be0 <_read>
 8009454:	1c43      	adds	r3, r0, #1
 8009456:	d102      	bne.n	800945e <_read_r+0x1e>
 8009458:	682b      	ldr	r3, [r5, #0]
 800945a:	b103      	cbz	r3, 800945e <_read_r+0x1e>
 800945c:	6023      	str	r3, [r4, #0]
 800945e:	bd38      	pop	{r3, r4, r5, pc}
 8009460:	20000594 	.word	0x20000594

08009464 <_write_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4d07      	ldr	r5, [pc, #28]	; (8009484 <_write_r+0x20>)
 8009468:	4604      	mov	r4, r0
 800946a:	4608      	mov	r0, r1
 800946c:	4611      	mov	r1, r2
 800946e:	2200      	movs	r2, #0
 8009470:	602a      	str	r2, [r5, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	f7f8 fbd1 	bl	8001c1a <_write>
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	d102      	bne.n	8009482 <_write_r+0x1e>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	b103      	cbz	r3, 8009482 <_write_r+0x1e>
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	20000594 	.word	0x20000594

08009488 <__errno>:
 8009488:	4b01      	ldr	r3, [pc, #4]	; (8009490 <__errno+0x8>)
 800948a:	6818      	ldr	r0, [r3, #0]
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	2000008c 	.word	0x2000008c

08009494 <__libc_init_array>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	4d0d      	ldr	r5, [pc, #52]	; (80094cc <__libc_init_array+0x38>)
 8009498:	4c0d      	ldr	r4, [pc, #52]	; (80094d0 <__libc_init_array+0x3c>)
 800949a:	1b64      	subs	r4, r4, r5
 800949c:	10a4      	asrs	r4, r4, #2
 800949e:	2600      	movs	r6, #0
 80094a0:	42a6      	cmp	r6, r4
 80094a2:	d109      	bne.n	80094b8 <__libc_init_array+0x24>
 80094a4:	4d0b      	ldr	r5, [pc, #44]	; (80094d4 <__libc_init_array+0x40>)
 80094a6:	4c0c      	ldr	r4, [pc, #48]	; (80094d8 <__libc_init_array+0x44>)
 80094a8:	f003 fb42 	bl	800cb30 <_init>
 80094ac:	1b64      	subs	r4, r4, r5
 80094ae:	10a4      	asrs	r4, r4, #2
 80094b0:	2600      	movs	r6, #0
 80094b2:	42a6      	cmp	r6, r4
 80094b4:	d105      	bne.n	80094c2 <__libc_init_array+0x2e>
 80094b6:	bd70      	pop	{r4, r5, r6, pc}
 80094b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094bc:	4798      	blx	r3
 80094be:	3601      	adds	r6, #1
 80094c0:	e7ee      	b.n	80094a0 <__libc_init_array+0xc>
 80094c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c6:	4798      	blx	r3
 80094c8:	3601      	adds	r6, #1
 80094ca:	e7f2      	b.n	80094b2 <__libc_init_array+0x1e>
 80094cc:	0800d580 	.word	0x0800d580
 80094d0:	0800d580 	.word	0x0800d580
 80094d4:	0800d580 	.word	0x0800d580
 80094d8:	0800d584 	.word	0x0800d584

080094dc <__retarget_lock_init_recursive>:
 80094dc:	4770      	bx	lr

080094de <__retarget_lock_acquire_recursive>:
 80094de:	4770      	bx	lr

080094e0 <__retarget_lock_release_recursive>:
 80094e0:	4770      	bx	lr
	...

080094e4 <nanf>:
 80094e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80094ec <nanf+0x8>
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	7fc00000 	.word	0x7fc00000

080094f0 <quorem>:
 80094f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f4:	6903      	ldr	r3, [r0, #16]
 80094f6:	690c      	ldr	r4, [r1, #16]
 80094f8:	42a3      	cmp	r3, r4
 80094fa:	4607      	mov	r7, r0
 80094fc:	db7e      	blt.n	80095fc <quorem+0x10c>
 80094fe:	3c01      	subs	r4, #1
 8009500:	f101 0814 	add.w	r8, r1, #20
 8009504:	f100 0514 	add.w	r5, r0, #20
 8009508:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800950c:	9301      	str	r3, [sp, #4]
 800950e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009512:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009516:	3301      	adds	r3, #1
 8009518:	429a      	cmp	r2, r3
 800951a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800951e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009522:	fbb2 f6f3 	udiv	r6, r2, r3
 8009526:	d331      	bcc.n	800958c <quorem+0x9c>
 8009528:	f04f 0e00 	mov.w	lr, #0
 800952c:	4640      	mov	r0, r8
 800952e:	46ac      	mov	ip, r5
 8009530:	46f2      	mov	sl, lr
 8009532:	f850 2b04 	ldr.w	r2, [r0], #4
 8009536:	b293      	uxth	r3, r2
 8009538:	fb06 e303 	mla	r3, r6, r3, lr
 800953c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009540:	0c1a      	lsrs	r2, r3, #16
 8009542:	b29b      	uxth	r3, r3
 8009544:	ebaa 0303 	sub.w	r3, sl, r3
 8009548:	f8dc a000 	ldr.w	sl, [ip]
 800954c:	fa13 f38a 	uxtah	r3, r3, sl
 8009550:	fb06 220e 	mla	r2, r6, lr, r2
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	9b00      	ldr	r3, [sp, #0]
 8009558:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800955c:	b292      	uxth	r2, r2
 800955e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009562:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009566:	f8bd 3000 	ldrh.w	r3, [sp]
 800956a:	4581      	cmp	r9, r0
 800956c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009570:	f84c 3b04 	str.w	r3, [ip], #4
 8009574:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009578:	d2db      	bcs.n	8009532 <quorem+0x42>
 800957a:	f855 300b 	ldr.w	r3, [r5, fp]
 800957e:	b92b      	cbnz	r3, 800958c <quorem+0x9c>
 8009580:	9b01      	ldr	r3, [sp, #4]
 8009582:	3b04      	subs	r3, #4
 8009584:	429d      	cmp	r5, r3
 8009586:	461a      	mov	r2, r3
 8009588:	d32c      	bcc.n	80095e4 <quorem+0xf4>
 800958a:	613c      	str	r4, [r7, #16]
 800958c:	4638      	mov	r0, r7
 800958e:	f001 f9ef 	bl	800a970 <__mcmp>
 8009592:	2800      	cmp	r0, #0
 8009594:	db22      	blt.n	80095dc <quorem+0xec>
 8009596:	3601      	adds	r6, #1
 8009598:	4629      	mov	r1, r5
 800959a:	2000      	movs	r0, #0
 800959c:	f858 2b04 	ldr.w	r2, [r8], #4
 80095a0:	f8d1 c000 	ldr.w	ip, [r1]
 80095a4:	b293      	uxth	r3, r2
 80095a6:	1ac3      	subs	r3, r0, r3
 80095a8:	0c12      	lsrs	r2, r2, #16
 80095aa:	fa13 f38c 	uxtah	r3, r3, ip
 80095ae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80095b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095bc:	45c1      	cmp	r9, r8
 80095be:	f841 3b04 	str.w	r3, [r1], #4
 80095c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80095c6:	d2e9      	bcs.n	800959c <quorem+0xac>
 80095c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095d0:	b922      	cbnz	r2, 80095dc <quorem+0xec>
 80095d2:	3b04      	subs	r3, #4
 80095d4:	429d      	cmp	r5, r3
 80095d6:	461a      	mov	r2, r3
 80095d8:	d30a      	bcc.n	80095f0 <quorem+0x100>
 80095da:	613c      	str	r4, [r7, #16]
 80095dc:	4630      	mov	r0, r6
 80095de:	b003      	add	sp, #12
 80095e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e4:	6812      	ldr	r2, [r2, #0]
 80095e6:	3b04      	subs	r3, #4
 80095e8:	2a00      	cmp	r2, #0
 80095ea:	d1ce      	bne.n	800958a <quorem+0x9a>
 80095ec:	3c01      	subs	r4, #1
 80095ee:	e7c9      	b.n	8009584 <quorem+0x94>
 80095f0:	6812      	ldr	r2, [r2, #0]
 80095f2:	3b04      	subs	r3, #4
 80095f4:	2a00      	cmp	r2, #0
 80095f6:	d1f0      	bne.n	80095da <quorem+0xea>
 80095f8:	3c01      	subs	r4, #1
 80095fa:	e7eb      	b.n	80095d4 <quorem+0xe4>
 80095fc:	2000      	movs	r0, #0
 80095fe:	e7ee      	b.n	80095de <quorem+0xee>

08009600 <_dtoa_r>:
 8009600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009604:	ed2d 8b04 	vpush	{d8-d9}
 8009608:	69c5      	ldr	r5, [r0, #28]
 800960a:	b093      	sub	sp, #76	; 0x4c
 800960c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009610:	ec57 6b10 	vmov	r6, r7, d0
 8009614:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009618:	9107      	str	r1, [sp, #28]
 800961a:	4604      	mov	r4, r0
 800961c:	920a      	str	r2, [sp, #40]	; 0x28
 800961e:	930d      	str	r3, [sp, #52]	; 0x34
 8009620:	b975      	cbnz	r5, 8009640 <_dtoa_r+0x40>
 8009622:	2010      	movs	r0, #16
 8009624:	f000 fe2a 	bl	800a27c <malloc>
 8009628:	4602      	mov	r2, r0
 800962a:	61e0      	str	r0, [r4, #28]
 800962c:	b920      	cbnz	r0, 8009638 <_dtoa_r+0x38>
 800962e:	4bae      	ldr	r3, [pc, #696]	; (80098e8 <_dtoa_r+0x2e8>)
 8009630:	21ef      	movs	r1, #239	; 0xef
 8009632:	48ae      	ldr	r0, [pc, #696]	; (80098ec <_dtoa_r+0x2ec>)
 8009634:	f002 fe3c 	bl	800c2b0 <__assert_func>
 8009638:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800963c:	6005      	str	r5, [r0, #0]
 800963e:	60c5      	str	r5, [r0, #12]
 8009640:	69e3      	ldr	r3, [r4, #28]
 8009642:	6819      	ldr	r1, [r3, #0]
 8009644:	b151      	cbz	r1, 800965c <_dtoa_r+0x5c>
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	604a      	str	r2, [r1, #4]
 800964a:	2301      	movs	r3, #1
 800964c:	4093      	lsls	r3, r2
 800964e:	608b      	str	r3, [r1, #8]
 8009650:	4620      	mov	r0, r4
 8009652:	f000 ff07 	bl	800a464 <_Bfree>
 8009656:	69e3      	ldr	r3, [r4, #28]
 8009658:	2200      	movs	r2, #0
 800965a:	601a      	str	r2, [r3, #0]
 800965c:	1e3b      	subs	r3, r7, #0
 800965e:	bfbb      	ittet	lt
 8009660:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009664:	9303      	strlt	r3, [sp, #12]
 8009666:	2300      	movge	r3, #0
 8009668:	2201      	movlt	r2, #1
 800966a:	bfac      	ite	ge
 800966c:	f8c8 3000 	strge.w	r3, [r8]
 8009670:	f8c8 2000 	strlt.w	r2, [r8]
 8009674:	4b9e      	ldr	r3, [pc, #632]	; (80098f0 <_dtoa_r+0x2f0>)
 8009676:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800967a:	ea33 0308 	bics.w	r3, r3, r8
 800967e:	d11b      	bne.n	80096b8 <_dtoa_r+0xb8>
 8009680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009682:	f242 730f 	movw	r3, #9999	; 0x270f
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800968c:	4333      	orrs	r3, r6
 800968e:	f000 8593 	beq.w	800a1b8 <_dtoa_r+0xbb8>
 8009692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009694:	b963      	cbnz	r3, 80096b0 <_dtoa_r+0xb0>
 8009696:	4b97      	ldr	r3, [pc, #604]	; (80098f4 <_dtoa_r+0x2f4>)
 8009698:	e027      	b.n	80096ea <_dtoa_r+0xea>
 800969a:	4b97      	ldr	r3, [pc, #604]	; (80098f8 <_dtoa_r+0x2f8>)
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	3308      	adds	r3, #8
 80096a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	9800      	ldr	r0, [sp, #0]
 80096a6:	b013      	add	sp, #76	; 0x4c
 80096a8:	ecbd 8b04 	vpop	{d8-d9}
 80096ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b0:	4b90      	ldr	r3, [pc, #576]	; (80098f4 <_dtoa_r+0x2f4>)
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	3303      	adds	r3, #3
 80096b6:	e7f3      	b.n	80096a0 <_dtoa_r+0xa0>
 80096b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096bc:	2200      	movs	r2, #0
 80096be:	ec51 0b17 	vmov	r0, r1, d7
 80096c2:	eeb0 8a47 	vmov.f32	s16, s14
 80096c6:	eef0 8a67 	vmov.f32	s17, s15
 80096ca:	2300      	movs	r3, #0
 80096cc:	f7f7 fa2c 	bl	8000b28 <__aeabi_dcmpeq>
 80096d0:	4681      	mov	r9, r0
 80096d2:	b160      	cbz	r0, 80096ee <_dtoa_r+0xee>
 80096d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096d6:	2301      	movs	r3, #1
 80096d8:	6013      	str	r3, [r2, #0]
 80096da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 8568 	beq.w	800a1b2 <_dtoa_r+0xbb2>
 80096e2:	4b86      	ldr	r3, [pc, #536]	; (80098fc <_dtoa_r+0x2fc>)
 80096e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80096e6:	6013      	str	r3, [r2, #0]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	e7da      	b.n	80096a4 <_dtoa_r+0xa4>
 80096ee:	aa10      	add	r2, sp, #64	; 0x40
 80096f0:	a911      	add	r1, sp, #68	; 0x44
 80096f2:	4620      	mov	r0, r4
 80096f4:	eeb0 0a48 	vmov.f32	s0, s16
 80096f8:	eef0 0a68 	vmov.f32	s1, s17
 80096fc:	f001 fa4e 	bl	800ab9c <__d2b>
 8009700:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009704:	4682      	mov	sl, r0
 8009706:	2d00      	cmp	r5, #0
 8009708:	d07f      	beq.n	800980a <_dtoa_r+0x20a>
 800970a:	ee18 3a90 	vmov	r3, s17
 800970e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009712:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009716:	ec51 0b18 	vmov	r0, r1, d8
 800971a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800971e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009722:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009726:	4619      	mov	r1, r3
 8009728:	2200      	movs	r2, #0
 800972a:	4b75      	ldr	r3, [pc, #468]	; (8009900 <_dtoa_r+0x300>)
 800972c:	f7f6 fddc 	bl	80002e8 <__aeabi_dsub>
 8009730:	a367      	add	r3, pc, #412	; (adr r3, 80098d0 <_dtoa_r+0x2d0>)
 8009732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009736:	f7f6 ff8f 	bl	8000658 <__aeabi_dmul>
 800973a:	a367      	add	r3, pc, #412	; (adr r3, 80098d8 <_dtoa_r+0x2d8>)
 800973c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009740:	f7f6 fdd4 	bl	80002ec <__adddf3>
 8009744:	4606      	mov	r6, r0
 8009746:	4628      	mov	r0, r5
 8009748:	460f      	mov	r7, r1
 800974a:	f7f6 ff1b 	bl	8000584 <__aeabi_i2d>
 800974e:	a364      	add	r3, pc, #400	; (adr r3, 80098e0 <_dtoa_r+0x2e0>)
 8009750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009754:	f7f6 ff80 	bl	8000658 <__aeabi_dmul>
 8009758:	4602      	mov	r2, r0
 800975a:	460b      	mov	r3, r1
 800975c:	4630      	mov	r0, r6
 800975e:	4639      	mov	r1, r7
 8009760:	f7f6 fdc4 	bl	80002ec <__adddf3>
 8009764:	4606      	mov	r6, r0
 8009766:	460f      	mov	r7, r1
 8009768:	f7f7 fa26 	bl	8000bb8 <__aeabi_d2iz>
 800976c:	2200      	movs	r2, #0
 800976e:	4683      	mov	fp, r0
 8009770:	2300      	movs	r3, #0
 8009772:	4630      	mov	r0, r6
 8009774:	4639      	mov	r1, r7
 8009776:	f7f7 f9e1 	bl	8000b3c <__aeabi_dcmplt>
 800977a:	b148      	cbz	r0, 8009790 <_dtoa_r+0x190>
 800977c:	4658      	mov	r0, fp
 800977e:	f7f6 ff01 	bl	8000584 <__aeabi_i2d>
 8009782:	4632      	mov	r2, r6
 8009784:	463b      	mov	r3, r7
 8009786:	f7f7 f9cf 	bl	8000b28 <__aeabi_dcmpeq>
 800978a:	b908      	cbnz	r0, 8009790 <_dtoa_r+0x190>
 800978c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009790:	f1bb 0f16 	cmp.w	fp, #22
 8009794:	d857      	bhi.n	8009846 <_dtoa_r+0x246>
 8009796:	4b5b      	ldr	r3, [pc, #364]	; (8009904 <_dtoa_r+0x304>)
 8009798:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	ec51 0b18 	vmov	r0, r1, d8
 80097a4:	f7f7 f9ca 	bl	8000b3c <__aeabi_dcmplt>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d04e      	beq.n	800984a <_dtoa_r+0x24a>
 80097ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80097b0:	2300      	movs	r3, #0
 80097b2:	930c      	str	r3, [sp, #48]	; 0x30
 80097b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097b6:	1b5b      	subs	r3, r3, r5
 80097b8:	1e5a      	subs	r2, r3, #1
 80097ba:	bf45      	ittet	mi
 80097bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80097c0:	9305      	strmi	r3, [sp, #20]
 80097c2:	2300      	movpl	r3, #0
 80097c4:	2300      	movmi	r3, #0
 80097c6:	9206      	str	r2, [sp, #24]
 80097c8:	bf54      	ite	pl
 80097ca:	9305      	strpl	r3, [sp, #20]
 80097cc:	9306      	strmi	r3, [sp, #24]
 80097ce:	f1bb 0f00 	cmp.w	fp, #0
 80097d2:	db3c      	blt.n	800984e <_dtoa_r+0x24e>
 80097d4:	9b06      	ldr	r3, [sp, #24]
 80097d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80097da:	445b      	add	r3, fp
 80097dc:	9306      	str	r3, [sp, #24]
 80097de:	2300      	movs	r3, #0
 80097e0:	9308      	str	r3, [sp, #32]
 80097e2:	9b07      	ldr	r3, [sp, #28]
 80097e4:	2b09      	cmp	r3, #9
 80097e6:	d868      	bhi.n	80098ba <_dtoa_r+0x2ba>
 80097e8:	2b05      	cmp	r3, #5
 80097ea:	bfc4      	itt	gt
 80097ec:	3b04      	subgt	r3, #4
 80097ee:	9307      	strgt	r3, [sp, #28]
 80097f0:	9b07      	ldr	r3, [sp, #28]
 80097f2:	f1a3 0302 	sub.w	r3, r3, #2
 80097f6:	bfcc      	ite	gt
 80097f8:	2500      	movgt	r5, #0
 80097fa:	2501      	movle	r5, #1
 80097fc:	2b03      	cmp	r3, #3
 80097fe:	f200 8085 	bhi.w	800990c <_dtoa_r+0x30c>
 8009802:	e8df f003 	tbb	[pc, r3]
 8009806:	3b2e      	.short	0x3b2e
 8009808:	5839      	.short	0x5839
 800980a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800980e:	441d      	add	r5, r3
 8009810:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009814:	2b20      	cmp	r3, #32
 8009816:	bfc1      	itttt	gt
 8009818:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800981c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009820:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009824:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009828:	bfd6      	itet	le
 800982a:	f1c3 0320 	rsble	r3, r3, #32
 800982e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009832:	fa06 f003 	lslle.w	r0, r6, r3
 8009836:	f7f6 fe95 	bl	8000564 <__aeabi_ui2d>
 800983a:	2201      	movs	r2, #1
 800983c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009840:	3d01      	subs	r5, #1
 8009842:	920e      	str	r2, [sp, #56]	; 0x38
 8009844:	e76f      	b.n	8009726 <_dtoa_r+0x126>
 8009846:	2301      	movs	r3, #1
 8009848:	e7b3      	b.n	80097b2 <_dtoa_r+0x1b2>
 800984a:	900c      	str	r0, [sp, #48]	; 0x30
 800984c:	e7b2      	b.n	80097b4 <_dtoa_r+0x1b4>
 800984e:	9b05      	ldr	r3, [sp, #20]
 8009850:	eba3 030b 	sub.w	r3, r3, fp
 8009854:	9305      	str	r3, [sp, #20]
 8009856:	f1cb 0300 	rsb	r3, fp, #0
 800985a:	9308      	str	r3, [sp, #32]
 800985c:	2300      	movs	r3, #0
 800985e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009860:	e7bf      	b.n	80097e2 <_dtoa_r+0x1e2>
 8009862:	2300      	movs	r3, #0
 8009864:	9309      	str	r3, [sp, #36]	; 0x24
 8009866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009868:	2b00      	cmp	r3, #0
 800986a:	dc52      	bgt.n	8009912 <_dtoa_r+0x312>
 800986c:	2301      	movs	r3, #1
 800986e:	9301      	str	r3, [sp, #4]
 8009870:	9304      	str	r3, [sp, #16]
 8009872:	461a      	mov	r2, r3
 8009874:	920a      	str	r2, [sp, #40]	; 0x28
 8009876:	e00b      	b.n	8009890 <_dtoa_r+0x290>
 8009878:	2301      	movs	r3, #1
 800987a:	e7f3      	b.n	8009864 <_dtoa_r+0x264>
 800987c:	2300      	movs	r3, #0
 800987e:	9309      	str	r3, [sp, #36]	; 0x24
 8009880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009882:	445b      	add	r3, fp
 8009884:	9301      	str	r3, [sp, #4]
 8009886:	3301      	adds	r3, #1
 8009888:	2b01      	cmp	r3, #1
 800988a:	9304      	str	r3, [sp, #16]
 800988c:	bfb8      	it	lt
 800988e:	2301      	movlt	r3, #1
 8009890:	69e0      	ldr	r0, [r4, #28]
 8009892:	2100      	movs	r1, #0
 8009894:	2204      	movs	r2, #4
 8009896:	f102 0614 	add.w	r6, r2, #20
 800989a:	429e      	cmp	r6, r3
 800989c:	d93d      	bls.n	800991a <_dtoa_r+0x31a>
 800989e:	6041      	str	r1, [r0, #4]
 80098a0:	4620      	mov	r0, r4
 80098a2:	f000 fd9f 	bl	800a3e4 <_Balloc>
 80098a6:	9000      	str	r0, [sp, #0]
 80098a8:	2800      	cmp	r0, #0
 80098aa:	d139      	bne.n	8009920 <_dtoa_r+0x320>
 80098ac:	4b16      	ldr	r3, [pc, #88]	; (8009908 <_dtoa_r+0x308>)
 80098ae:	4602      	mov	r2, r0
 80098b0:	f240 11af 	movw	r1, #431	; 0x1af
 80098b4:	e6bd      	b.n	8009632 <_dtoa_r+0x32>
 80098b6:	2301      	movs	r3, #1
 80098b8:	e7e1      	b.n	800987e <_dtoa_r+0x27e>
 80098ba:	2501      	movs	r5, #1
 80098bc:	2300      	movs	r3, #0
 80098be:	9307      	str	r3, [sp, #28]
 80098c0:	9509      	str	r5, [sp, #36]	; 0x24
 80098c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098c6:	9301      	str	r3, [sp, #4]
 80098c8:	9304      	str	r3, [sp, #16]
 80098ca:	2200      	movs	r2, #0
 80098cc:	2312      	movs	r3, #18
 80098ce:	e7d1      	b.n	8009874 <_dtoa_r+0x274>
 80098d0:	636f4361 	.word	0x636f4361
 80098d4:	3fd287a7 	.word	0x3fd287a7
 80098d8:	8b60c8b3 	.word	0x8b60c8b3
 80098dc:	3fc68a28 	.word	0x3fc68a28
 80098e0:	509f79fb 	.word	0x509f79fb
 80098e4:	3fd34413 	.word	0x3fd34413
 80098e8:	0800d194 	.word	0x0800d194
 80098ec:	0800d1ab 	.word	0x0800d1ab
 80098f0:	7ff00000 	.word	0x7ff00000
 80098f4:	0800d190 	.word	0x0800d190
 80098f8:	0800d187 	.word	0x0800d187
 80098fc:	0800d15f 	.word	0x0800d15f
 8009900:	3ff80000 	.word	0x3ff80000
 8009904:	0800d298 	.word	0x0800d298
 8009908:	0800d203 	.word	0x0800d203
 800990c:	2301      	movs	r3, #1
 800990e:	9309      	str	r3, [sp, #36]	; 0x24
 8009910:	e7d7      	b.n	80098c2 <_dtoa_r+0x2c2>
 8009912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009914:	9301      	str	r3, [sp, #4]
 8009916:	9304      	str	r3, [sp, #16]
 8009918:	e7ba      	b.n	8009890 <_dtoa_r+0x290>
 800991a:	3101      	adds	r1, #1
 800991c:	0052      	lsls	r2, r2, #1
 800991e:	e7ba      	b.n	8009896 <_dtoa_r+0x296>
 8009920:	69e3      	ldr	r3, [r4, #28]
 8009922:	9a00      	ldr	r2, [sp, #0]
 8009924:	601a      	str	r2, [r3, #0]
 8009926:	9b04      	ldr	r3, [sp, #16]
 8009928:	2b0e      	cmp	r3, #14
 800992a:	f200 80a8 	bhi.w	8009a7e <_dtoa_r+0x47e>
 800992e:	2d00      	cmp	r5, #0
 8009930:	f000 80a5 	beq.w	8009a7e <_dtoa_r+0x47e>
 8009934:	f1bb 0f00 	cmp.w	fp, #0
 8009938:	dd38      	ble.n	80099ac <_dtoa_r+0x3ac>
 800993a:	4bc0      	ldr	r3, [pc, #768]	; (8009c3c <_dtoa_r+0x63c>)
 800993c:	f00b 020f 	and.w	r2, fp, #15
 8009940:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009944:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009948:	e9d3 6700 	ldrd	r6, r7, [r3]
 800994c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009950:	d019      	beq.n	8009986 <_dtoa_r+0x386>
 8009952:	4bbb      	ldr	r3, [pc, #748]	; (8009c40 <_dtoa_r+0x640>)
 8009954:	ec51 0b18 	vmov	r0, r1, d8
 8009958:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800995c:	f7f6 ffa6 	bl	80008ac <__aeabi_ddiv>
 8009960:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009964:	f008 080f 	and.w	r8, r8, #15
 8009968:	2503      	movs	r5, #3
 800996a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009c40 <_dtoa_r+0x640>
 800996e:	f1b8 0f00 	cmp.w	r8, #0
 8009972:	d10a      	bne.n	800998a <_dtoa_r+0x38a>
 8009974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009978:	4632      	mov	r2, r6
 800997a:	463b      	mov	r3, r7
 800997c:	f7f6 ff96 	bl	80008ac <__aeabi_ddiv>
 8009980:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009984:	e02b      	b.n	80099de <_dtoa_r+0x3de>
 8009986:	2502      	movs	r5, #2
 8009988:	e7ef      	b.n	800996a <_dtoa_r+0x36a>
 800998a:	f018 0f01 	tst.w	r8, #1
 800998e:	d008      	beq.n	80099a2 <_dtoa_r+0x3a2>
 8009990:	4630      	mov	r0, r6
 8009992:	4639      	mov	r1, r7
 8009994:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009998:	f7f6 fe5e 	bl	8000658 <__aeabi_dmul>
 800999c:	3501      	adds	r5, #1
 800999e:	4606      	mov	r6, r0
 80099a0:	460f      	mov	r7, r1
 80099a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80099a6:	f109 0908 	add.w	r9, r9, #8
 80099aa:	e7e0      	b.n	800996e <_dtoa_r+0x36e>
 80099ac:	f000 809f 	beq.w	8009aee <_dtoa_r+0x4ee>
 80099b0:	f1cb 0600 	rsb	r6, fp, #0
 80099b4:	4ba1      	ldr	r3, [pc, #644]	; (8009c3c <_dtoa_r+0x63c>)
 80099b6:	4fa2      	ldr	r7, [pc, #648]	; (8009c40 <_dtoa_r+0x640>)
 80099b8:	f006 020f 	and.w	r2, r6, #15
 80099bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	ec51 0b18 	vmov	r0, r1, d8
 80099c8:	f7f6 fe46 	bl	8000658 <__aeabi_dmul>
 80099cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099d0:	1136      	asrs	r6, r6, #4
 80099d2:	2300      	movs	r3, #0
 80099d4:	2502      	movs	r5, #2
 80099d6:	2e00      	cmp	r6, #0
 80099d8:	d17e      	bne.n	8009ad8 <_dtoa_r+0x4d8>
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1d0      	bne.n	8009980 <_dtoa_r+0x380>
 80099de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f000 8084 	beq.w	8009af2 <_dtoa_r+0x4f2>
 80099ea:	4b96      	ldr	r3, [pc, #600]	; (8009c44 <_dtoa_r+0x644>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	4640      	mov	r0, r8
 80099f0:	4649      	mov	r1, r9
 80099f2:	f7f7 f8a3 	bl	8000b3c <__aeabi_dcmplt>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d07b      	beq.n	8009af2 <_dtoa_r+0x4f2>
 80099fa:	9b04      	ldr	r3, [sp, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d078      	beq.n	8009af2 <_dtoa_r+0x4f2>
 8009a00:	9b01      	ldr	r3, [sp, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	dd39      	ble.n	8009a7a <_dtoa_r+0x47a>
 8009a06:	4b90      	ldr	r3, [pc, #576]	; (8009c48 <_dtoa_r+0x648>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	f7f6 fe23 	bl	8000658 <__aeabi_dmul>
 8009a12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a16:	9e01      	ldr	r6, [sp, #4]
 8009a18:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8009a1c:	3501      	adds	r5, #1
 8009a1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009a22:	4628      	mov	r0, r5
 8009a24:	f7f6 fdae 	bl	8000584 <__aeabi_i2d>
 8009a28:	4642      	mov	r2, r8
 8009a2a:	464b      	mov	r3, r9
 8009a2c:	f7f6 fe14 	bl	8000658 <__aeabi_dmul>
 8009a30:	4b86      	ldr	r3, [pc, #536]	; (8009c4c <_dtoa_r+0x64c>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	f7f6 fc5a 	bl	80002ec <__adddf3>
 8009a38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009a3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a40:	9303      	str	r3, [sp, #12]
 8009a42:	2e00      	cmp	r6, #0
 8009a44:	d158      	bne.n	8009af8 <_dtoa_r+0x4f8>
 8009a46:	4b82      	ldr	r3, [pc, #520]	; (8009c50 <_dtoa_r+0x650>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	4649      	mov	r1, r9
 8009a4e:	f7f6 fc4b 	bl	80002e8 <__aeabi_dsub>
 8009a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a56:	4680      	mov	r8, r0
 8009a58:	4689      	mov	r9, r1
 8009a5a:	f7f7 f88d 	bl	8000b78 <__aeabi_dcmpgt>
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	f040 8296 	bne.w	8009f90 <_dtoa_r+0x990>
 8009a64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009a68:	4640      	mov	r0, r8
 8009a6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a6e:	4649      	mov	r1, r9
 8009a70:	f7f7 f864 	bl	8000b3c <__aeabi_dcmplt>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	f040 8289 	bne.w	8009f8c <_dtoa_r+0x98c>
 8009a7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009a7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f2c0 814e 	blt.w	8009d22 <_dtoa_r+0x722>
 8009a86:	f1bb 0f0e 	cmp.w	fp, #14
 8009a8a:	f300 814a 	bgt.w	8009d22 <_dtoa_r+0x722>
 8009a8e:	4b6b      	ldr	r3, [pc, #428]	; (8009c3c <_dtoa_r+0x63c>)
 8009a90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f280 80dc 	bge.w	8009c58 <_dtoa_r+0x658>
 8009aa0:	9b04      	ldr	r3, [sp, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f300 80d8 	bgt.w	8009c58 <_dtoa_r+0x658>
 8009aa8:	f040 826f 	bne.w	8009f8a <_dtoa_r+0x98a>
 8009aac:	4b68      	ldr	r3, [pc, #416]	; (8009c50 <_dtoa_r+0x650>)
 8009aae:	2200      	movs	r2, #0
 8009ab0:	4640      	mov	r0, r8
 8009ab2:	4649      	mov	r1, r9
 8009ab4:	f7f6 fdd0 	bl	8000658 <__aeabi_dmul>
 8009ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009abc:	f7f7 f852 	bl	8000b64 <__aeabi_dcmpge>
 8009ac0:	9e04      	ldr	r6, [sp, #16]
 8009ac2:	4637      	mov	r7, r6
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	f040 8245 	bne.w	8009f54 <_dtoa_r+0x954>
 8009aca:	9d00      	ldr	r5, [sp, #0]
 8009acc:	2331      	movs	r3, #49	; 0x31
 8009ace:	f805 3b01 	strb.w	r3, [r5], #1
 8009ad2:	f10b 0b01 	add.w	fp, fp, #1
 8009ad6:	e241      	b.n	8009f5c <_dtoa_r+0x95c>
 8009ad8:	07f2      	lsls	r2, r6, #31
 8009ada:	d505      	bpl.n	8009ae8 <_dtoa_r+0x4e8>
 8009adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ae0:	f7f6 fdba 	bl	8000658 <__aeabi_dmul>
 8009ae4:	3501      	adds	r5, #1
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	1076      	asrs	r6, r6, #1
 8009aea:	3708      	adds	r7, #8
 8009aec:	e773      	b.n	80099d6 <_dtoa_r+0x3d6>
 8009aee:	2502      	movs	r5, #2
 8009af0:	e775      	b.n	80099de <_dtoa_r+0x3de>
 8009af2:	9e04      	ldr	r6, [sp, #16]
 8009af4:	465f      	mov	r7, fp
 8009af6:	e792      	b.n	8009a1e <_dtoa_r+0x41e>
 8009af8:	9900      	ldr	r1, [sp, #0]
 8009afa:	4b50      	ldr	r3, [pc, #320]	; (8009c3c <_dtoa_r+0x63c>)
 8009afc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b00:	4431      	add	r1, r6
 8009b02:	9102      	str	r1, [sp, #8]
 8009b04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b06:	eeb0 9a47 	vmov.f32	s18, s14
 8009b0a:	eef0 9a67 	vmov.f32	s19, s15
 8009b0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b16:	2900      	cmp	r1, #0
 8009b18:	d044      	beq.n	8009ba4 <_dtoa_r+0x5a4>
 8009b1a:	494e      	ldr	r1, [pc, #312]	; (8009c54 <_dtoa_r+0x654>)
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	f7f6 fec5 	bl	80008ac <__aeabi_ddiv>
 8009b22:	ec53 2b19 	vmov	r2, r3, d9
 8009b26:	f7f6 fbdf 	bl	80002e8 <__aeabi_dsub>
 8009b2a:	9d00      	ldr	r5, [sp, #0]
 8009b2c:	ec41 0b19 	vmov	d9, r0, r1
 8009b30:	4649      	mov	r1, r9
 8009b32:	4640      	mov	r0, r8
 8009b34:	f7f7 f840 	bl	8000bb8 <__aeabi_d2iz>
 8009b38:	4606      	mov	r6, r0
 8009b3a:	f7f6 fd23 	bl	8000584 <__aeabi_i2d>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	4640      	mov	r0, r8
 8009b44:	4649      	mov	r1, r9
 8009b46:	f7f6 fbcf 	bl	80002e8 <__aeabi_dsub>
 8009b4a:	3630      	adds	r6, #48	; 0x30
 8009b4c:	f805 6b01 	strb.w	r6, [r5], #1
 8009b50:	ec53 2b19 	vmov	r2, r3, d9
 8009b54:	4680      	mov	r8, r0
 8009b56:	4689      	mov	r9, r1
 8009b58:	f7f6 fff0 	bl	8000b3c <__aeabi_dcmplt>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	d164      	bne.n	8009c2a <_dtoa_r+0x62a>
 8009b60:	4642      	mov	r2, r8
 8009b62:	464b      	mov	r3, r9
 8009b64:	4937      	ldr	r1, [pc, #220]	; (8009c44 <_dtoa_r+0x644>)
 8009b66:	2000      	movs	r0, #0
 8009b68:	f7f6 fbbe 	bl	80002e8 <__aeabi_dsub>
 8009b6c:	ec53 2b19 	vmov	r2, r3, d9
 8009b70:	f7f6 ffe4 	bl	8000b3c <__aeabi_dcmplt>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	f040 80b6 	bne.w	8009ce6 <_dtoa_r+0x6e6>
 8009b7a:	9b02      	ldr	r3, [sp, #8]
 8009b7c:	429d      	cmp	r5, r3
 8009b7e:	f43f af7c 	beq.w	8009a7a <_dtoa_r+0x47a>
 8009b82:	4b31      	ldr	r3, [pc, #196]	; (8009c48 <_dtoa_r+0x648>)
 8009b84:	ec51 0b19 	vmov	r0, r1, d9
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f7f6 fd65 	bl	8000658 <__aeabi_dmul>
 8009b8e:	4b2e      	ldr	r3, [pc, #184]	; (8009c48 <_dtoa_r+0x648>)
 8009b90:	ec41 0b19 	vmov	d9, r0, r1
 8009b94:	2200      	movs	r2, #0
 8009b96:	4640      	mov	r0, r8
 8009b98:	4649      	mov	r1, r9
 8009b9a:	f7f6 fd5d 	bl	8000658 <__aeabi_dmul>
 8009b9e:	4680      	mov	r8, r0
 8009ba0:	4689      	mov	r9, r1
 8009ba2:	e7c5      	b.n	8009b30 <_dtoa_r+0x530>
 8009ba4:	ec51 0b17 	vmov	r0, r1, d7
 8009ba8:	f7f6 fd56 	bl	8000658 <__aeabi_dmul>
 8009bac:	9b02      	ldr	r3, [sp, #8]
 8009bae:	9d00      	ldr	r5, [sp, #0]
 8009bb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bb2:	ec41 0b19 	vmov	d9, r0, r1
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	4640      	mov	r0, r8
 8009bba:	f7f6 fffd 	bl	8000bb8 <__aeabi_d2iz>
 8009bbe:	4606      	mov	r6, r0
 8009bc0:	f7f6 fce0 	bl	8000584 <__aeabi_i2d>
 8009bc4:	3630      	adds	r6, #48	; 0x30
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	460b      	mov	r3, r1
 8009bca:	4640      	mov	r0, r8
 8009bcc:	4649      	mov	r1, r9
 8009bce:	f7f6 fb8b 	bl	80002e8 <__aeabi_dsub>
 8009bd2:	f805 6b01 	strb.w	r6, [r5], #1
 8009bd6:	9b02      	ldr	r3, [sp, #8]
 8009bd8:	429d      	cmp	r5, r3
 8009bda:	4680      	mov	r8, r0
 8009bdc:	4689      	mov	r9, r1
 8009bde:	f04f 0200 	mov.w	r2, #0
 8009be2:	d124      	bne.n	8009c2e <_dtoa_r+0x62e>
 8009be4:	4b1b      	ldr	r3, [pc, #108]	; (8009c54 <_dtoa_r+0x654>)
 8009be6:	ec51 0b19 	vmov	r0, r1, d9
 8009bea:	f7f6 fb7f 	bl	80002ec <__adddf3>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	4649      	mov	r1, r9
 8009bf6:	f7f6 ffbf 	bl	8000b78 <__aeabi_dcmpgt>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d173      	bne.n	8009ce6 <_dtoa_r+0x6e6>
 8009bfe:	ec53 2b19 	vmov	r2, r3, d9
 8009c02:	4914      	ldr	r1, [pc, #80]	; (8009c54 <_dtoa_r+0x654>)
 8009c04:	2000      	movs	r0, #0
 8009c06:	f7f6 fb6f 	bl	80002e8 <__aeabi_dsub>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4640      	mov	r0, r8
 8009c10:	4649      	mov	r1, r9
 8009c12:	f7f6 ff93 	bl	8000b3c <__aeabi_dcmplt>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	f43f af2f 	beq.w	8009a7a <_dtoa_r+0x47a>
 8009c1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009c1e:	1e6b      	subs	r3, r5, #1
 8009c20:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c26:	2b30      	cmp	r3, #48	; 0x30
 8009c28:	d0f8      	beq.n	8009c1c <_dtoa_r+0x61c>
 8009c2a:	46bb      	mov	fp, r7
 8009c2c:	e04a      	b.n	8009cc4 <_dtoa_r+0x6c4>
 8009c2e:	4b06      	ldr	r3, [pc, #24]	; (8009c48 <_dtoa_r+0x648>)
 8009c30:	f7f6 fd12 	bl	8000658 <__aeabi_dmul>
 8009c34:	4680      	mov	r8, r0
 8009c36:	4689      	mov	r9, r1
 8009c38:	e7bd      	b.n	8009bb6 <_dtoa_r+0x5b6>
 8009c3a:	bf00      	nop
 8009c3c:	0800d298 	.word	0x0800d298
 8009c40:	0800d270 	.word	0x0800d270
 8009c44:	3ff00000 	.word	0x3ff00000
 8009c48:	40240000 	.word	0x40240000
 8009c4c:	401c0000 	.word	0x401c0000
 8009c50:	40140000 	.word	0x40140000
 8009c54:	3fe00000 	.word	0x3fe00000
 8009c58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c5c:	9d00      	ldr	r5, [sp, #0]
 8009c5e:	4642      	mov	r2, r8
 8009c60:	464b      	mov	r3, r9
 8009c62:	4630      	mov	r0, r6
 8009c64:	4639      	mov	r1, r7
 8009c66:	f7f6 fe21 	bl	80008ac <__aeabi_ddiv>
 8009c6a:	f7f6 ffa5 	bl	8000bb8 <__aeabi_d2iz>
 8009c6e:	9001      	str	r0, [sp, #4]
 8009c70:	f7f6 fc88 	bl	8000584 <__aeabi_i2d>
 8009c74:	4642      	mov	r2, r8
 8009c76:	464b      	mov	r3, r9
 8009c78:	f7f6 fcee 	bl	8000658 <__aeabi_dmul>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4630      	mov	r0, r6
 8009c82:	4639      	mov	r1, r7
 8009c84:	f7f6 fb30 	bl	80002e8 <__aeabi_dsub>
 8009c88:	9e01      	ldr	r6, [sp, #4]
 8009c8a:	9f04      	ldr	r7, [sp, #16]
 8009c8c:	3630      	adds	r6, #48	; 0x30
 8009c8e:	f805 6b01 	strb.w	r6, [r5], #1
 8009c92:	9e00      	ldr	r6, [sp, #0]
 8009c94:	1bae      	subs	r6, r5, r6
 8009c96:	42b7      	cmp	r7, r6
 8009c98:	4602      	mov	r2, r0
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	d134      	bne.n	8009d08 <_dtoa_r+0x708>
 8009c9e:	f7f6 fb25 	bl	80002ec <__adddf3>
 8009ca2:	4642      	mov	r2, r8
 8009ca4:	464b      	mov	r3, r9
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	460f      	mov	r7, r1
 8009caa:	f7f6 ff65 	bl	8000b78 <__aeabi_dcmpgt>
 8009cae:	b9c8      	cbnz	r0, 8009ce4 <_dtoa_r+0x6e4>
 8009cb0:	4642      	mov	r2, r8
 8009cb2:	464b      	mov	r3, r9
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	4639      	mov	r1, r7
 8009cb8:	f7f6 ff36 	bl	8000b28 <__aeabi_dcmpeq>
 8009cbc:	b110      	cbz	r0, 8009cc4 <_dtoa_r+0x6c4>
 8009cbe:	9b01      	ldr	r3, [sp, #4]
 8009cc0:	07db      	lsls	r3, r3, #31
 8009cc2:	d40f      	bmi.n	8009ce4 <_dtoa_r+0x6e4>
 8009cc4:	4651      	mov	r1, sl
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f000 fbcc 	bl	800a464 <_Bfree>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009cd0:	702b      	strb	r3, [r5, #0]
 8009cd2:	f10b 0301 	add.w	r3, fp, #1
 8009cd6:	6013      	str	r3, [r2, #0]
 8009cd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f43f ace2 	beq.w	80096a4 <_dtoa_r+0xa4>
 8009ce0:	601d      	str	r5, [r3, #0]
 8009ce2:	e4df      	b.n	80096a4 <_dtoa_r+0xa4>
 8009ce4:	465f      	mov	r7, fp
 8009ce6:	462b      	mov	r3, r5
 8009ce8:	461d      	mov	r5, r3
 8009cea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cee:	2a39      	cmp	r2, #57	; 0x39
 8009cf0:	d106      	bne.n	8009d00 <_dtoa_r+0x700>
 8009cf2:	9a00      	ldr	r2, [sp, #0]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d1f7      	bne.n	8009ce8 <_dtoa_r+0x6e8>
 8009cf8:	9900      	ldr	r1, [sp, #0]
 8009cfa:	2230      	movs	r2, #48	; 0x30
 8009cfc:	3701      	adds	r7, #1
 8009cfe:	700a      	strb	r2, [r1, #0]
 8009d00:	781a      	ldrb	r2, [r3, #0]
 8009d02:	3201      	adds	r2, #1
 8009d04:	701a      	strb	r2, [r3, #0]
 8009d06:	e790      	b.n	8009c2a <_dtoa_r+0x62a>
 8009d08:	4ba3      	ldr	r3, [pc, #652]	; (8009f98 <_dtoa_r+0x998>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f7f6 fca4 	bl	8000658 <__aeabi_dmul>
 8009d10:	2200      	movs	r2, #0
 8009d12:	2300      	movs	r3, #0
 8009d14:	4606      	mov	r6, r0
 8009d16:	460f      	mov	r7, r1
 8009d18:	f7f6 ff06 	bl	8000b28 <__aeabi_dcmpeq>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d09e      	beq.n	8009c5e <_dtoa_r+0x65e>
 8009d20:	e7d0      	b.n	8009cc4 <_dtoa_r+0x6c4>
 8009d22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d24:	2a00      	cmp	r2, #0
 8009d26:	f000 80ca 	beq.w	8009ebe <_dtoa_r+0x8be>
 8009d2a:	9a07      	ldr	r2, [sp, #28]
 8009d2c:	2a01      	cmp	r2, #1
 8009d2e:	f300 80ad 	bgt.w	8009e8c <_dtoa_r+0x88c>
 8009d32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d34:	2a00      	cmp	r2, #0
 8009d36:	f000 80a5 	beq.w	8009e84 <_dtoa_r+0x884>
 8009d3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d3e:	9e08      	ldr	r6, [sp, #32]
 8009d40:	9d05      	ldr	r5, [sp, #20]
 8009d42:	9a05      	ldr	r2, [sp, #20]
 8009d44:	441a      	add	r2, r3
 8009d46:	9205      	str	r2, [sp, #20]
 8009d48:	9a06      	ldr	r2, [sp, #24]
 8009d4a:	2101      	movs	r1, #1
 8009d4c:	441a      	add	r2, r3
 8009d4e:	4620      	mov	r0, r4
 8009d50:	9206      	str	r2, [sp, #24]
 8009d52:	f000 fc87 	bl	800a664 <__i2b>
 8009d56:	4607      	mov	r7, r0
 8009d58:	b165      	cbz	r5, 8009d74 <_dtoa_r+0x774>
 8009d5a:	9b06      	ldr	r3, [sp, #24]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	dd09      	ble.n	8009d74 <_dtoa_r+0x774>
 8009d60:	42ab      	cmp	r3, r5
 8009d62:	9a05      	ldr	r2, [sp, #20]
 8009d64:	bfa8      	it	ge
 8009d66:	462b      	movge	r3, r5
 8009d68:	1ad2      	subs	r2, r2, r3
 8009d6a:	9205      	str	r2, [sp, #20]
 8009d6c:	9a06      	ldr	r2, [sp, #24]
 8009d6e:	1aed      	subs	r5, r5, r3
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	9306      	str	r3, [sp, #24]
 8009d74:	9b08      	ldr	r3, [sp, #32]
 8009d76:	b1f3      	cbz	r3, 8009db6 <_dtoa_r+0x7b6>
 8009d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f000 80a3 	beq.w	8009ec6 <_dtoa_r+0x8c6>
 8009d80:	2e00      	cmp	r6, #0
 8009d82:	dd10      	ble.n	8009da6 <_dtoa_r+0x7a6>
 8009d84:	4639      	mov	r1, r7
 8009d86:	4632      	mov	r2, r6
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f000 fd2b 	bl	800a7e4 <__pow5mult>
 8009d8e:	4652      	mov	r2, sl
 8009d90:	4601      	mov	r1, r0
 8009d92:	4607      	mov	r7, r0
 8009d94:	4620      	mov	r0, r4
 8009d96:	f000 fc7b 	bl	800a690 <__multiply>
 8009d9a:	4651      	mov	r1, sl
 8009d9c:	4680      	mov	r8, r0
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f000 fb60 	bl	800a464 <_Bfree>
 8009da4:	46c2      	mov	sl, r8
 8009da6:	9b08      	ldr	r3, [sp, #32]
 8009da8:	1b9a      	subs	r2, r3, r6
 8009daa:	d004      	beq.n	8009db6 <_dtoa_r+0x7b6>
 8009dac:	4651      	mov	r1, sl
 8009dae:	4620      	mov	r0, r4
 8009db0:	f000 fd18 	bl	800a7e4 <__pow5mult>
 8009db4:	4682      	mov	sl, r0
 8009db6:	2101      	movs	r1, #1
 8009db8:	4620      	mov	r0, r4
 8009dba:	f000 fc53 	bl	800a664 <__i2b>
 8009dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	f340 8081 	ble.w	8009eca <_dtoa_r+0x8ca>
 8009dc8:	461a      	mov	r2, r3
 8009dca:	4601      	mov	r1, r0
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f000 fd09 	bl	800a7e4 <__pow5mult>
 8009dd2:	9b07      	ldr	r3, [sp, #28]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	4606      	mov	r6, r0
 8009dd8:	dd7a      	ble.n	8009ed0 <_dtoa_r+0x8d0>
 8009dda:	f04f 0800 	mov.w	r8, #0
 8009dde:	6933      	ldr	r3, [r6, #16]
 8009de0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009de4:	6918      	ldr	r0, [r3, #16]
 8009de6:	f000 fbef 	bl	800a5c8 <__hi0bits>
 8009dea:	f1c0 0020 	rsb	r0, r0, #32
 8009dee:	9b06      	ldr	r3, [sp, #24]
 8009df0:	4418      	add	r0, r3
 8009df2:	f010 001f 	ands.w	r0, r0, #31
 8009df6:	f000 8094 	beq.w	8009f22 <_dtoa_r+0x922>
 8009dfa:	f1c0 0320 	rsb	r3, r0, #32
 8009dfe:	2b04      	cmp	r3, #4
 8009e00:	f340 8085 	ble.w	8009f0e <_dtoa_r+0x90e>
 8009e04:	9b05      	ldr	r3, [sp, #20]
 8009e06:	f1c0 001c 	rsb	r0, r0, #28
 8009e0a:	4403      	add	r3, r0
 8009e0c:	9305      	str	r3, [sp, #20]
 8009e0e:	9b06      	ldr	r3, [sp, #24]
 8009e10:	4403      	add	r3, r0
 8009e12:	4405      	add	r5, r0
 8009e14:	9306      	str	r3, [sp, #24]
 8009e16:	9b05      	ldr	r3, [sp, #20]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	dd05      	ble.n	8009e28 <_dtoa_r+0x828>
 8009e1c:	4651      	mov	r1, sl
 8009e1e:	461a      	mov	r2, r3
 8009e20:	4620      	mov	r0, r4
 8009e22:	f000 fd39 	bl	800a898 <__lshift>
 8009e26:	4682      	mov	sl, r0
 8009e28:	9b06      	ldr	r3, [sp, #24]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	dd05      	ble.n	8009e3a <_dtoa_r+0x83a>
 8009e2e:	4631      	mov	r1, r6
 8009e30:	461a      	mov	r2, r3
 8009e32:	4620      	mov	r0, r4
 8009e34:	f000 fd30 	bl	800a898 <__lshift>
 8009e38:	4606      	mov	r6, r0
 8009e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d072      	beq.n	8009f26 <_dtoa_r+0x926>
 8009e40:	4631      	mov	r1, r6
 8009e42:	4650      	mov	r0, sl
 8009e44:	f000 fd94 	bl	800a970 <__mcmp>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	da6c      	bge.n	8009f26 <_dtoa_r+0x926>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	4651      	mov	r1, sl
 8009e50:	220a      	movs	r2, #10
 8009e52:	4620      	mov	r0, r4
 8009e54:	f000 fb28 	bl	800a4a8 <__multadd>
 8009e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e5a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009e5e:	4682      	mov	sl, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f000 81b0 	beq.w	800a1c6 <_dtoa_r+0xbc6>
 8009e66:	2300      	movs	r3, #0
 8009e68:	4639      	mov	r1, r7
 8009e6a:	220a      	movs	r2, #10
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f000 fb1b 	bl	800a4a8 <__multadd>
 8009e72:	9b01      	ldr	r3, [sp, #4]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	4607      	mov	r7, r0
 8009e78:	f300 8096 	bgt.w	8009fa8 <_dtoa_r+0x9a8>
 8009e7c:	9b07      	ldr	r3, [sp, #28]
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	dc59      	bgt.n	8009f36 <_dtoa_r+0x936>
 8009e82:	e091      	b.n	8009fa8 <_dtoa_r+0x9a8>
 8009e84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e8a:	e758      	b.n	8009d3e <_dtoa_r+0x73e>
 8009e8c:	9b04      	ldr	r3, [sp, #16]
 8009e8e:	1e5e      	subs	r6, r3, #1
 8009e90:	9b08      	ldr	r3, [sp, #32]
 8009e92:	42b3      	cmp	r3, r6
 8009e94:	bfbf      	itttt	lt
 8009e96:	9b08      	ldrlt	r3, [sp, #32]
 8009e98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009e9a:	9608      	strlt	r6, [sp, #32]
 8009e9c:	1af3      	sublt	r3, r6, r3
 8009e9e:	bfb4      	ite	lt
 8009ea0:	18d2      	addlt	r2, r2, r3
 8009ea2:	1b9e      	subge	r6, r3, r6
 8009ea4:	9b04      	ldr	r3, [sp, #16]
 8009ea6:	bfbc      	itt	lt
 8009ea8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009eaa:	2600      	movlt	r6, #0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	bfb7      	itett	lt
 8009eb0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009eb4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009eb8:	1a9d      	sublt	r5, r3, r2
 8009eba:	2300      	movlt	r3, #0
 8009ebc:	e741      	b.n	8009d42 <_dtoa_r+0x742>
 8009ebe:	9e08      	ldr	r6, [sp, #32]
 8009ec0:	9d05      	ldr	r5, [sp, #20]
 8009ec2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009ec4:	e748      	b.n	8009d58 <_dtoa_r+0x758>
 8009ec6:	9a08      	ldr	r2, [sp, #32]
 8009ec8:	e770      	b.n	8009dac <_dtoa_r+0x7ac>
 8009eca:	9b07      	ldr	r3, [sp, #28]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	dc19      	bgt.n	8009f04 <_dtoa_r+0x904>
 8009ed0:	9b02      	ldr	r3, [sp, #8]
 8009ed2:	b9bb      	cbnz	r3, 8009f04 <_dtoa_r+0x904>
 8009ed4:	9b03      	ldr	r3, [sp, #12]
 8009ed6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009eda:	b99b      	cbnz	r3, 8009f04 <_dtoa_r+0x904>
 8009edc:	9b03      	ldr	r3, [sp, #12]
 8009ede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ee2:	0d1b      	lsrs	r3, r3, #20
 8009ee4:	051b      	lsls	r3, r3, #20
 8009ee6:	b183      	cbz	r3, 8009f0a <_dtoa_r+0x90a>
 8009ee8:	9b05      	ldr	r3, [sp, #20]
 8009eea:	3301      	adds	r3, #1
 8009eec:	9305      	str	r3, [sp, #20]
 8009eee:	9b06      	ldr	r3, [sp, #24]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	9306      	str	r3, [sp, #24]
 8009ef4:	f04f 0801 	mov.w	r8, #1
 8009ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f47f af6f 	bne.w	8009dde <_dtoa_r+0x7de>
 8009f00:	2001      	movs	r0, #1
 8009f02:	e774      	b.n	8009dee <_dtoa_r+0x7ee>
 8009f04:	f04f 0800 	mov.w	r8, #0
 8009f08:	e7f6      	b.n	8009ef8 <_dtoa_r+0x8f8>
 8009f0a:	4698      	mov	r8, r3
 8009f0c:	e7f4      	b.n	8009ef8 <_dtoa_r+0x8f8>
 8009f0e:	d082      	beq.n	8009e16 <_dtoa_r+0x816>
 8009f10:	9a05      	ldr	r2, [sp, #20]
 8009f12:	331c      	adds	r3, #28
 8009f14:	441a      	add	r2, r3
 8009f16:	9205      	str	r2, [sp, #20]
 8009f18:	9a06      	ldr	r2, [sp, #24]
 8009f1a:	441a      	add	r2, r3
 8009f1c:	441d      	add	r5, r3
 8009f1e:	9206      	str	r2, [sp, #24]
 8009f20:	e779      	b.n	8009e16 <_dtoa_r+0x816>
 8009f22:	4603      	mov	r3, r0
 8009f24:	e7f4      	b.n	8009f10 <_dtoa_r+0x910>
 8009f26:	9b04      	ldr	r3, [sp, #16]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	dc37      	bgt.n	8009f9c <_dtoa_r+0x99c>
 8009f2c:	9b07      	ldr	r3, [sp, #28]
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	dd34      	ble.n	8009f9c <_dtoa_r+0x99c>
 8009f32:	9b04      	ldr	r3, [sp, #16]
 8009f34:	9301      	str	r3, [sp, #4]
 8009f36:	9b01      	ldr	r3, [sp, #4]
 8009f38:	b963      	cbnz	r3, 8009f54 <_dtoa_r+0x954>
 8009f3a:	4631      	mov	r1, r6
 8009f3c:	2205      	movs	r2, #5
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f000 fab2 	bl	800a4a8 <__multadd>
 8009f44:	4601      	mov	r1, r0
 8009f46:	4606      	mov	r6, r0
 8009f48:	4650      	mov	r0, sl
 8009f4a:	f000 fd11 	bl	800a970 <__mcmp>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	f73f adbb 	bgt.w	8009aca <_dtoa_r+0x4ca>
 8009f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f56:	9d00      	ldr	r5, [sp, #0]
 8009f58:	ea6f 0b03 	mvn.w	fp, r3
 8009f5c:	f04f 0800 	mov.w	r8, #0
 8009f60:	4631      	mov	r1, r6
 8009f62:	4620      	mov	r0, r4
 8009f64:	f000 fa7e 	bl	800a464 <_Bfree>
 8009f68:	2f00      	cmp	r7, #0
 8009f6a:	f43f aeab 	beq.w	8009cc4 <_dtoa_r+0x6c4>
 8009f6e:	f1b8 0f00 	cmp.w	r8, #0
 8009f72:	d005      	beq.n	8009f80 <_dtoa_r+0x980>
 8009f74:	45b8      	cmp	r8, r7
 8009f76:	d003      	beq.n	8009f80 <_dtoa_r+0x980>
 8009f78:	4641      	mov	r1, r8
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f000 fa72 	bl	800a464 <_Bfree>
 8009f80:	4639      	mov	r1, r7
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 fa6e 	bl	800a464 <_Bfree>
 8009f88:	e69c      	b.n	8009cc4 <_dtoa_r+0x6c4>
 8009f8a:	2600      	movs	r6, #0
 8009f8c:	4637      	mov	r7, r6
 8009f8e:	e7e1      	b.n	8009f54 <_dtoa_r+0x954>
 8009f90:	46bb      	mov	fp, r7
 8009f92:	4637      	mov	r7, r6
 8009f94:	e599      	b.n	8009aca <_dtoa_r+0x4ca>
 8009f96:	bf00      	nop
 8009f98:	40240000 	.word	0x40240000
 8009f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	f000 80c8 	beq.w	800a134 <_dtoa_r+0xb34>
 8009fa4:	9b04      	ldr	r3, [sp, #16]
 8009fa6:	9301      	str	r3, [sp, #4]
 8009fa8:	2d00      	cmp	r5, #0
 8009faa:	dd05      	ble.n	8009fb8 <_dtoa_r+0x9b8>
 8009fac:	4639      	mov	r1, r7
 8009fae:	462a      	mov	r2, r5
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f000 fc71 	bl	800a898 <__lshift>
 8009fb6:	4607      	mov	r7, r0
 8009fb8:	f1b8 0f00 	cmp.w	r8, #0
 8009fbc:	d05b      	beq.n	800a076 <_dtoa_r+0xa76>
 8009fbe:	6879      	ldr	r1, [r7, #4]
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f000 fa0f 	bl	800a3e4 <_Balloc>
 8009fc6:	4605      	mov	r5, r0
 8009fc8:	b928      	cbnz	r0, 8009fd6 <_dtoa_r+0x9d6>
 8009fca:	4b83      	ldr	r3, [pc, #524]	; (800a1d8 <_dtoa_r+0xbd8>)
 8009fcc:	4602      	mov	r2, r0
 8009fce:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009fd2:	f7ff bb2e 	b.w	8009632 <_dtoa_r+0x32>
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	3202      	adds	r2, #2
 8009fda:	0092      	lsls	r2, r2, #2
 8009fdc:	f107 010c 	add.w	r1, r7, #12
 8009fe0:	300c      	adds	r0, #12
 8009fe2:	f002 f94d 	bl	800c280 <memcpy>
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	4629      	mov	r1, r5
 8009fea:	4620      	mov	r0, r4
 8009fec:	f000 fc54 	bl	800a898 <__lshift>
 8009ff0:	9b00      	ldr	r3, [sp, #0]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	9304      	str	r3, [sp, #16]
 8009ff6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	9308      	str	r3, [sp, #32]
 8009ffe:	9b02      	ldr	r3, [sp, #8]
 800a000:	f003 0301 	and.w	r3, r3, #1
 800a004:	46b8      	mov	r8, r7
 800a006:	9306      	str	r3, [sp, #24]
 800a008:	4607      	mov	r7, r0
 800a00a:	9b04      	ldr	r3, [sp, #16]
 800a00c:	4631      	mov	r1, r6
 800a00e:	3b01      	subs	r3, #1
 800a010:	4650      	mov	r0, sl
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	f7ff fa6c 	bl	80094f0 <quorem>
 800a018:	4641      	mov	r1, r8
 800a01a:	9002      	str	r0, [sp, #8]
 800a01c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a020:	4650      	mov	r0, sl
 800a022:	f000 fca5 	bl	800a970 <__mcmp>
 800a026:	463a      	mov	r2, r7
 800a028:	9005      	str	r0, [sp, #20]
 800a02a:	4631      	mov	r1, r6
 800a02c:	4620      	mov	r0, r4
 800a02e:	f000 fcbb 	bl	800a9a8 <__mdiff>
 800a032:	68c2      	ldr	r2, [r0, #12]
 800a034:	4605      	mov	r5, r0
 800a036:	bb02      	cbnz	r2, 800a07a <_dtoa_r+0xa7a>
 800a038:	4601      	mov	r1, r0
 800a03a:	4650      	mov	r0, sl
 800a03c:	f000 fc98 	bl	800a970 <__mcmp>
 800a040:	4602      	mov	r2, r0
 800a042:	4629      	mov	r1, r5
 800a044:	4620      	mov	r0, r4
 800a046:	9209      	str	r2, [sp, #36]	; 0x24
 800a048:	f000 fa0c 	bl	800a464 <_Bfree>
 800a04c:	9b07      	ldr	r3, [sp, #28]
 800a04e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a050:	9d04      	ldr	r5, [sp, #16]
 800a052:	ea43 0102 	orr.w	r1, r3, r2
 800a056:	9b06      	ldr	r3, [sp, #24]
 800a058:	4319      	orrs	r1, r3
 800a05a:	d110      	bne.n	800a07e <_dtoa_r+0xa7e>
 800a05c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a060:	d029      	beq.n	800a0b6 <_dtoa_r+0xab6>
 800a062:	9b05      	ldr	r3, [sp, #20]
 800a064:	2b00      	cmp	r3, #0
 800a066:	dd02      	ble.n	800a06e <_dtoa_r+0xa6e>
 800a068:	9b02      	ldr	r3, [sp, #8]
 800a06a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a06e:	9b01      	ldr	r3, [sp, #4]
 800a070:	f883 9000 	strb.w	r9, [r3]
 800a074:	e774      	b.n	8009f60 <_dtoa_r+0x960>
 800a076:	4638      	mov	r0, r7
 800a078:	e7ba      	b.n	8009ff0 <_dtoa_r+0x9f0>
 800a07a:	2201      	movs	r2, #1
 800a07c:	e7e1      	b.n	800a042 <_dtoa_r+0xa42>
 800a07e:	9b05      	ldr	r3, [sp, #20]
 800a080:	2b00      	cmp	r3, #0
 800a082:	db04      	blt.n	800a08e <_dtoa_r+0xa8e>
 800a084:	9907      	ldr	r1, [sp, #28]
 800a086:	430b      	orrs	r3, r1
 800a088:	9906      	ldr	r1, [sp, #24]
 800a08a:	430b      	orrs	r3, r1
 800a08c:	d120      	bne.n	800a0d0 <_dtoa_r+0xad0>
 800a08e:	2a00      	cmp	r2, #0
 800a090:	dded      	ble.n	800a06e <_dtoa_r+0xa6e>
 800a092:	4651      	mov	r1, sl
 800a094:	2201      	movs	r2, #1
 800a096:	4620      	mov	r0, r4
 800a098:	f000 fbfe 	bl	800a898 <__lshift>
 800a09c:	4631      	mov	r1, r6
 800a09e:	4682      	mov	sl, r0
 800a0a0:	f000 fc66 	bl	800a970 <__mcmp>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	dc03      	bgt.n	800a0b0 <_dtoa_r+0xab0>
 800a0a8:	d1e1      	bne.n	800a06e <_dtoa_r+0xa6e>
 800a0aa:	f019 0f01 	tst.w	r9, #1
 800a0ae:	d0de      	beq.n	800a06e <_dtoa_r+0xa6e>
 800a0b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a0b4:	d1d8      	bne.n	800a068 <_dtoa_r+0xa68>
 800a0b6:	9a01      	ldr	r2, [sp, #4]
 800a0b8:	2339      	movs	r3, #57	; 0x39
 800a0ba:	7013      	strb	r3, [r2, #0]
 800a0bc:	462b      	mov	r3, r5
 800a0be:	461d      	mov	r5, r3
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a0c6:	2a39      	cmp	r2, #57	; 0x39
 800a0c8:	d06c      	beq.n	800a1a4 <_dtoa_r+0xba4>
 800a0ca:	3201      	adds	r2, #1
 800a0cc:	701a      	strb	r2, [r3, #0]
 800a0ce:	e747      	b.n	8009f60 <_dtoa_r+0x960>
 800a0d0:	2a00      	cmp	r2, #0
 800a0d2:	dd07      	ble.n	800a0e4 <_dtoa_r+0xae4>
 800a0d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a0d8:	d0ed      	beq.n	800a0b6 <_dtoa_r+0xab6>
 800a0da:	9a01      	ldr	r2, [sp, #4]
 800a0dc:	f109 0301 	add.w	r3, r9, #1
 800a0e0:	7013      	strb	r3, [r2, #0]
 800a0e2:	e73d      	b.n	8009f60 <_dtoa_r+0x960>
 800a0e4:	9b04      	ldr	r3, [sp, #16]
 800a0e6:	9a08      	ldr	r2, [sp, #32]
 800a0e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d043      	beq.n	800a178 <_dtoa_r+0xb78>
 800a0f0:	4651      	mov	r1, sl
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	220a      	movs	r2, #10
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f000 f9d6 	bl	800a4a8 <__multadd>
 800a0fc:	45b8      	cmp	r8, r7
 800a0fe:	4682      	mov	sl, r0
 800a100:	f04f 0300 	mov.w	r3, #0
 800a104:	f04f 020a 	mov.w	r2, #10
 800a108:	4641      	mov	r1, r8
 800a10a:	4620      	mov	r0, r4
 800a10c:	d107      	bne.n	800a11e <_dtoa_r+0xb1e>
 800a10e:	f000 f9cb 	bl	800a4a8 <__multadd>
 800a112:	4680      	mov	r8, r0
 800a114:	4607      	mov	r7, r0
 800a116:	9b04      	ldr	r3, [sp, #16]
 800a118:	3301      	adds	r3, #1
 800a11a:	9304      	str	r3, [sp, #16]
 800a11c:	e775      	b.n	800a00a <_dtoa_r+0xa0a>
 800a11e:	f000 f9c3 	bl	800a4a8 <__multadd>
 800a122:	4639      	mov	r1, r7
 800a124:	4680      	mov	r8, r0
 800a126:	2300      	movs	r3, #0
 800a128:	220a      	movs	r2, #10
 800a12a:	4620      	mov	r0, r4
 800a12c:	f000 f9bc 	bl	800a4a8 <__multadd>
 800a130:	4607      	mov	r7, r0
 800a132:	e7f0      	b.n	800a116 <_dtoa_r+0xb16>
 800a134:	9b04      	ldr	r3, [sp, #16]
 800a136:	9301      	str	r3, [sp, #4]
 800a138:	9d00      	ldr	r5, [sp, #0]
 800a13a:	4631      	mov	r1, r6
 800a13c:	4650      	mov	r0, sl
 800a13e:	f7ff f9d7 	bl	80094f0 <quorem>
 800a142:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a146:	9b00      	ldr	r3, [sp, #0]
 800a148:	f805 9b01 	strb.w	r9, [r5], #1
 800a14c:	1aea      	subs	r2, r5, r3
 800a14e:	9b01      	ldr	r3, [sp, #4]
 800a150:	4293      	cmp	r3, r2
 800a152:	dd07      	ble.n	800a164 <_dtoa_r+0xb64>
 800a154:	4651      	mov	r1, sl
 800a156:	2300      	movs	r3, #0
 800a158:	220a      	movs	r2, #10
 800a15a:	4620      	mov	r0, r4
 800a15c:	f000 f9a4 	bl	800a4a8 <__multadd>
 800a160:	4682      	mov	sl, r0
 800a162:	e7ea      	b.n	800a13a <_dtoa_r+0xb3a>
 800a164:	9b01      	ldr	r3, [sp, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	bfc8      	it	gt
 800a16a:	461d      	movgt	r5, r3
 800a16c:	9b00      	ldr	r3, [sp, #0]
 800a16e:	bfd8      	it	le
 800a170:	2501      	movle	r5, #1
 800a172:	441d      	add	r5, r3
 800a174:	f04f 0800 	mov.w	r8, #0
 800a178:	4651      	mov	r1, sl
 800a17a:	2201      	movs	r2, #1
 800a17c:	4620      	mov	r0, r4
 800a17e:	f000 fb8b 	bl	800a898 <__lshift>
 800a182:	4631      	mov	r1, r6
 800a184:	4682      	mov	sl, r0
 800a186:	f000 fbf3 	bl	800a970 <__mcmp>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	dc96      	bgt.n	800a0bc <_dtoa_r+0xabc>
 800a18e:	d102      	bne.n	800a196 <_dtoa_r+0xb96>
 800a190:	f019 0f01 	tst.w	r9, #1
 800a194:	d192      	bne.n	800a0bc <_dtoa_r+0xabc>
 800a196:	462b      	mov	r3, r5
 800a198:	461d      	mov	r5, r3
 800a19a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a19e:	2a30      	cmp	r2, #48	; 0x30
 800a1a0:	d0fa      	beq.n	800a198 <_dtoa_r+0xb98>
 800a1a2:	e6dd      	b.n	8009f60 <_dtoa_r+0x960>
 800a1a4:	9a00      	ldr	r2, [sp, #0]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d189      	bne.n	800a0be <_dtoa_r+0xabe>
 800a1aa:	f10b 0b01 	add.w	fp, fp, #1
 800a1ae:	2331      	movs	r3, #49	; 0x31
 800a1b0:	e796      	b.n	800a0e0 <_dtoa_r+0xae0>
 800a1b2:	4b0a      	ldr	r3, [pc, #40]	; (800a1dc <_dtoa_r+0xbdc>)
 800a1b4:	f7ff ba99 	b.w	80096ea <_dtoa_r+0xea>
 800a1b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f47f aa6d 	bne.w	800969a <_dtoa_r+0x9a>
 800a1c0:	4b07      	ldr	r3, [pc, #28]	; (800a1e0 <_dtoa_r+0xbe0>)
 800a1c2:	f7ff ba92 	b.w	80096ea <_dtoa_r+0xea>
 800a1c6:	9b01      	ldr	r3, [sp, #4]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	dcb5      	bgt.n	800a138 <_dtoa_r+0xb38>
 800a1cc:	9b07      	ldr	r3, [sp, #28]
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	f73f aeb1 	bgt.w	8009f36 <_dtoa_r+0x936>
 800a1d4:	e7b0      	b.n	800a138 <_dtoa_r+0xb38>
 800a1d6:	bf00      	nop
 800a1d8:	0800d203 	.word	0x0800d203
 800a1dc:	0800d15e 	.word	0x0800d15e
 800a1e0:	0800d187 	.word	0x0800d187

0800a1e4 <_free_r>:
 800a1e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1e6:	2900      	cmp	r1, #0
 800a1e8:	d044      	beq.n	800a274 <_free_r+0x90>
 800a1ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ee:	9001      	str	r0, [sp, #4]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f1a1 0404 	sub.w	r4, r1, #4
 800a1f6:	bfb8      	it	lt
 800a1f8:	18e4      	addlt	r4, r4, r3
 800a1fa:	f000 f8e7 	bl	800a3cc <__malloc_lock>
 800a1fe:	4a1e      	ldr	r2, [pc, #120]	; (800a278 <_free_r+0x94>)
 800a200:	9801      	ldr	r0, [sp, #4]
 800a202:	6813      	ldr	r3, [r2, #0]
 800a204:	b933      	cbnz	r3, 800a214 <_free_r+0x30>
 800a206:	6063      	str	r3, [r4, #4]
 800a208:	6014      	str	r4, [r2, #0]
 800a20a:	b003      	add	sp, #12
 800a20c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a210:	f000 b8e2 	b.w	800a3d8 <__malloc_unlock>
 800a214:	42a3      	cmp	r3, r4
 800a216:	d908      	bls.n	800a22a <_free_r+0x46>
 800a218:	6825      	ldr	r5, [r4, #0]
 800a21a:	1961      	adds	r1, r4, r5
 800a21c:	428b      	cmp	r3, r1
 800a21e:	bf01      	itttt	eq
 800a220:	6819      	ldreq	r1, [r3, #0]
 800a222:	685b      	ldreq	r3, [r3, #4]
 800a224:	1949      	addeq	r1, r1, r5
 800a226:	6021      	streq	r1, [r4, #0]
 800a228:	e7ed      	b.n	800a206 <_free_r+0x22>
 800a22a:	461a      	mov	r2, r3
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	b10b      	cbz	r3, 800a234 <_free_r+0x50>
 800a230:	42a3      	cmp	r3, r4
 800a232:	d9fa      	bls.n	800a22a <_free_r+0x46>
 800a234:	6811      	ldr	r1, [r2, #0]
 800a236:	1855      	adds	r5, r2, r1
 800a238:	42a5      	cmp	r5, r4
 800a23a:	d10b      	bne.n	800a254 <_free_r+0x70>
 800a23c:	6824      	ldr	r4, [r4, #0]
 800a23e:	4421      	add	r1, r4
 800a240:	1854      	adds	r4, r2, r1
 800a242:	42a3      	cmp	r3, r4
 800a244:	6011      	str	r1, [r2, #0]
 800a246:	d1e0      	bne.n	800a20a <_free_r+0x26>
 800a248:	681c      	ldr	r4, [r3, #0]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	6053      	str	r3, [r2, #4]
 800a24e:	440c      	add	r4, r1
 800a250:	6014      	str	r4, [r2, #0]
 800a252:	e7da      	b.n	800a20a <_free_r+0x26>
 800a254:	d902      	bls.n	800a25c <_free_r+0x78>
 800a256:	230c      	movs	r3, #12
 800a258:	6003      	str	r3, [r0, #0]
 800a25a:	e7d6      	b.n	800a20a <_free_r+0x26>
 800a25c:	6825      	ldr	r5, [r4, #0]
 800a25e:	1961      	adds	r1, r4, r5
 800a260:	428b      	cmp	r3, r1
 800a262:	bf04      	itt	eq
 800a264:	6819      	ldreq	r1, [r3, #0]
 800a266:	685b      	ldreq	r3, [r3, #4]
 800a268:	6063      	str	r3, [r4, #4]
 800a26a:	bf04      	itt	eq
 800a26c:	1949      	addeq	r1, r1, r5
 800a26e:	6021      	streq	r1, [r4, #0]
 800a270:	6054      	str	r4, [r2, #4]
 800a272:	e7ca      	b.n	800a20a <_free_r+0x26>
 800a274:	b003      	add	sp, #12
 800a276:	bd30      	pop	{r4, r5, pc}
 800a278:	2000059c 	.word	0x2000059c

0800a27c <malloc>:
 800a27c:	4b02      	ldr	r3, [pc, #8]	; (800a288 <malloc+0xc>)
 800a27e:	4601      	mov	r1, r0
 800a280:	6818      	ldr	r0, [r3, #0]
 800a282:	f000 b823 	b.w	800a2cc <_malloc_r>
 800a286:	bf00      	nop
 800a288:	2000008c 	.word	0x2000008c

0800a28c <sbrk_aligned>:
 800a28c:	b570      	push	{r4, r5, r6, lr}
 800a28e:	4e0e      	ldr	r6, [pc, #56]	; (800a2c8 <sbrk_aligned+0x3c>)
 800a290:	460c      	mov	r4, r1
 800a292:	6831      	ldr	r1, [r6, #0]
 800a294:	4605      	mov	r5, r0
 800a296:	b911      	cbnz	r1, 800a29e <sbrk_aligned+0x12>
 800a298:	f001 ffe2 	bl	800c260 <_sbrk_r>
 800a29c:	6030      	str	r0, [r6, #0]
 800a29e:	4621      	mov	r1, r4
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	f001 ffdd 	bl	800c260 <_sbrk_r>
 800a2a6:	1c43      	adds	r3, r0, #1
 800a2a8:	d00a      	beq.n	800a2c0 <sbrk_aligned+0x34>
 800a2aa:	1cc4      	adds	r4, r0, #3
 800a2ac:	f024 0403 	bic.w	r4, r4, #3
 800a2b0:	42a0      	cmp	r0, r4
 800a2b2:	d007      	beq.n	800a2c4 <sbrk_aligned+0x38>
 800a2b4:	1a21      	subs	r1, r4, r0
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	f001 ffd2 	bl	800c260 <_sbrk_r>
 800a2bc:	3001      	adds	r0, #1
 800a2be:	d101      	bne.n	800a2c4 <sbrk_aligned+0x38>
 800a2c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	bd70      	pop	{r4, r5, r6, pc}
 800a2c8:	200005a0 	.word	0x200005a0

0800a2cc <_malloc_r>:
 800a2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2d0:	1ccd      	adds	r5, r1, #3
 800a2d2:	f025 0503 	bic.w	r5, r5, #3
 800a2d6:	3508      	adds	r5, #8
 800a2d8:	2d0c      	cmp	r5, #12
 800a2da:	bf38      	it	cc
 800a2dc:	250c      	movcc	r5, #12
 800a2de:	2d00      	cmp	r5, #0
 800a2e0:	4607      	mov	r7, r0
 800a2e2:	db01      	blt.n	800a2e8 <_malloc_r+0x1c>
 800a2e4:	42a9      	cmp	r1, r5
 800a2e6:	d905      	bls.n	800a2f4 <_malloc_r+0x28>
 800a2e8:	230c      	movs	r3, #12
 800a2ea:	603b      	str	r3, [r7, #0]
 800a2ec:	2600      	movs	r6, #0
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a3c8 <_malloc_r+0xfc>
 800a2f8:	f000 f868 	bl	800a3cc <__malloc_lock>
 800a2fc:	f8d8 3000 	ldr.w	r3, [r8]
 800a300:	461c      	mov	r4, r3
 800a302:	bb5c      	cbnz	r4, 800a35c <_malloc_r+0x90>
 800a304:	4629      	mov	r1, r5
 800a306:	4638      	mov	r0, r7
 800a308:	f7ff ffc0 	bl	800a28c <sbrk_aligned>
 800a30c:	1c43      	adds	r3, r0, #1
 800a30e:	4604      	mov	r4, r0
 800a310:	d155      	bne.n	800a3be <_malloc_r+0xf2>
 800a312:	f8d8 4000 	ldr.w	r4, [r8]
 800a316:	4626      	mov	r6, r4
 800a318:	2e00      	cmp	r6, #0
 800a31a:	d145      	bne.n	800a3a8 <_malloc_r+0xdc>
 800a31c:	2c00      	cmp	r4, #0
 800a31e:	d048      	beq.n	800a3b2 <_malloc_r+0xe6>
 800a320:	6823      	ldr	r3, [r4, #0]
 800a322:	4631      	mov	r1, r6
 800a324:	4638      	mov	r0, r7
 800a326:	eb04 0903 	add.w	r9, r4, r3
 800a32a:	f001 ff99 	bl	800c260 <_sbrk_r>
 800a32e:	4581      	cmp	r9, r0
 800a330:	d13f      	bne.n	800a3b2 <_malloc_r+0xe6>
 800a332:	6821      	ldr	r1, [r4, #0]
 800a334:	1a6d      	subs	r5, r5, r1
 800a336:	4629      	mov	r1, r5
 800a338:	4638      	mov	r0, r7
 800a33a:	f7ff ffa7 	bl	800a28c <sbrk_aligned>
 800a33e:	3001      	adds	r0, #1
 800a340:	d037      	beq.n	800a3b2 <_malloc_r+0xe6>
 800a342:	6823      	ldr	r3, [r4, #0]
 800a344:	442b      	add	r3, r5
 800a346:	6023      	str	r3, [r4, #0]
 800a348:	f8d8 3000 	ldr.w	r3, [r8]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d038      	beq.n	800a3c2 <_malloc_r+0xf6>
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	42a2      	cmp	r2, r4
 800a354:	d12b      	bne.n	800a3ae <_malloc_r+0xe2>
 800a356:	2200      	movs	r2, #0
 800a358:	605a      	str	r2, [r3, #4]
 800a35a:	e00f      	b.n	800a37c <_malloc_r+0xb0>
 800a35c:	6822      	ldr	r2, [r4, #0]
 800a35e:	1b52      	subs	r2, r2, r5
 800a360:	d41f      	bmi.n	800a3a2 <_malloc_r+0xd6>
 800a362:	2a0b      	cmp	r2, #11
 800a364:	d917      	bls.n	800a396 <_malloc_r+0xca>
 800a366:	1961      	adds	r1, r4, r5
 800a368:	42a3      	cmp	r3, r4
 800a36a:	6025      	str	r5, [r4, #0]
 800a36c:	bf18      	it	ne
 800a36e:	6059      	strne	r1, [r3, #4]
 800a370:	6863      	ldr	r3, [r4, #4]
 800a372:	bf08      	it	eq
 800a374:	f8c8 1000 	streq.w	r1, [r8]
 800a378:	5162      	str	r2, [r4, r5]
 800a37a:	604b      	str	r3, [r1, #4]
 800a37c:	4638      	mov	r0, r7
 800a37e:	f104 060b 	add.w	r6, r4, #11
 800a382:	f000 f829 	bl	800a3d8 <__malloc_unlock>
 800a386:	f026 0607 	bic.w	r6, r6, #7
 800a38a:	1d23      	adds	r3, r4, #4
 800a38c:	1af2      	subs	r2, r6, r3
 800a38e:	d0ae      	beq.n	800a2ee <_malloc_r+0x22>
 800a390:	1b9b      	subs	r3, r3, r6
 800a392:	50a3      	str	r3, [r4, r2]
 800a394:	e7ab      	b.n	800a2ee <_malloc_r+0x22>
 800a396:	42a3      	cmp	r3, r4
 800a398:	6862      	ldr	r2, [r4, #4]
 800a39a:	d1dd      	bne.n	800a358 <_malloc_r+0x8c>
 800a39c:	f8c8 2000 	str.w	r2, [r8]
 800a3a0:	e7ec      	b.n	800a37c <_malloc_r+0xb0>
 800a3a2:	4623      	mov	r3, r4
 800a3a4:	6864      	ldr	r4, [r4, #4]
 800a3a6:	e7ac      	b.n	800a302 <_malloc_r+0x36>
 800a3a8:	4634      	mov	r4, r6
 800a3aa:	6876      	ldr	r6, [r6, #4]
 800a3ac:	e7b4      	b.n	800a318 <_malloc_r+0x4c>
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	e7cc      	b.n	800a34c <_malloc_r+0x80>
 800a3b2:	230c      	movs	r3, #12
 800a3b4:	603b      	str	r3, [r7, #0]
 800a3b6:	4638      	mov	r0, r7
 800a3b8:	f000 f80e 	bl	800a3d8 <__malloc_unlock>
 800a3bc:	e797      	b.n	800a2ee <_malloc_r+0x22>
 800a3be:	6025      	str	r5, [r4, #0]
 800a3c0:	e7dc      	b.n	800a37c <_malloc_r+0xb0>
 800a3c2:	605b      	str	r3, [r3, #4]
 800a3c4:	deff      	udf	#255	; 0xff
 800a3c6:	bf00      	nop
 800a3c8:	2000059c 	.word	0x2000059c

0800a3cc <__malloc_lock>:
 800a3cc:	4801      	ldr	r0, [pc, #4]	; (800a3d4 <__malloc_lock+0x8>)
 800a3ce:	f7ff b886 	b.w	80094de <__retarget_lock_acquire_recursive>
 800a3d2:	bf00      	nop
 800a3d4:	20000598 	.word	0x20000598

0800a3d8 <__malloc_unlock>:
 800a3d8:	4801      	ldr	r0, [pc, #4]	; (800a3e0 <__malloc_unlock+0x8>)
 800a3da:	f7ff b881 	b.w	80094e0 <__retarget_lock_release_recursive>
 800a3de:	bf00      	nop
 800a3e0:	20000598 	.word	0x20000598

0800a3e4 <_Balloc>:
 800a3e4:	b570      	push	{r4, r5, r6, lr}
 800a3e6:	69c6      	ldr	r6, [r0, #28]
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	460d      	mov	r5, r1
 800a3ec:	b976      	cbnz	r6, 800a40c <_Balloc+0x28>
 800a3ee:	2010      	movs	r0, #16
 800a3f0:	f7ff ff44 	bl	800a27c <malloc>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	61e0      	str	r0, [r4, #28]
 800a3f8:	b920      	cbnz	r0, 800a404 <_Balloc+0x20>
 800a3fa:	4b18      	ldr	r3, [pc, #96]	; (800a45c <_Balloc+0x78>)
 800a3fc:	4818      	ldr	r0, [pc, #96]	; (800a460 <_Balloc+0x7c>)
 800a3fe:	216b      	movs	r1, #107	; 0x6b
 800a400:	f001 ff56 	bl	800c2b0 <__assert_func>
 800a404:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a408:	6006      	str	r6, [r0, #0]
 800a40a:	60c6      	str	r6, [r0, #12]
 800a40c:	69e6      	ldr	r6, [r4, #28]
 800a40e:	68f3      	ldr	r3, [r6, #12]
 800a410:	b183      	cbz	r3, 800a434 <_Balloc+0x50>
 800a412:	69e3      	ldr	r3, [r4, #28]
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a41a:	b9b8      	cbnz	r0, 800a44c <_Balloc+0x68>
 800a41c:	2101      	movs	r1, #1
 800a41e:	fa01 f605 	lsl.w	r6, r1, r5
 800a422:	1d72      	adds	r2, r6, #5
 800a424:	0092      	lsls	r2, r2, #2
 800a426:	4620      	mov	r0, r4
 800a428:	f001 ff60 	bl	800c2ec <_calloc_r>
 800a42c:	b160      	cbz	r0, 800a448 <_Balloc+0x64>
 800a42e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a432:	e00e      	b.n	800a452 <_Balloc+0x6e>
 800a434:	2221      	movs	r2, #33	; 0x21
 800a436:	2104      	movs	r1, #4
 800a438:	4620      	mov	r0, r4
 800a43a:	f001 ff57 	bl	800c2ec <_calloc_r>
 800a43e:	69e3      	ldr	r3, [r4, #28]
 800a440:	60f0      	str	r0, [r6, #12]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1e4      	bne.n	800a412 <_Balloc+0x2e>
 800a448:	2000      	movs	r0, #0
 800a44a:	bd70      	pop	{r4, r5, r6, pc}
 800a44c:	6802      	ldr	r2, [r0, #0]
 800a44e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a452:	2300      	movs	r3, #0
 800a454:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a458:	e7f7      	b.n	800a44a <_Balloc+0x66>
 800a45a:	bf00      	nop
 800a45c:	0800d194 	.word	0x0800d194
 800a460:	0800d214 	.word	0x0800d214

0800a464 <_Bfree>:
 800a464:	b570      	push	{r4, r5, r6, lr}
 800a466:	69c6      	ldr	r6, [r0, #28]
 800a468:	4605      	mov	r5, r0
 800a46a:	460c      	mov	r4, r1
 800a46c:	b976      	cbnz	r6, 800a48c <_Bfree+0x28>
 800a46e:	2010      	movs	r0, #16
 800a470:	f7ff ff04 	bl	800a27c <malloc>
 800a474:	4602      	mov	r2, r0
 800a476:	61e8      	str	r0, [r5, #28]
 800a478:	b920      	cbnz	r0, 800a484 <_Bfree+0x20>
 800a47a:	4b09      	ldr	r3, [pc, #36]	; (800a4a0 <_Bfree+0x3c>)
 800a47c:	4809      	ldr	r0, [pc, #36]	; (800a4a4 <_Bfree+0x40>)
 800a47e:	218f      	movs	r1, #143	; 0x8f
 800a480:	f001 ff16 	bl	800c2b0 <__assert_func>
 800a484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a488:	6006      	str	r6, [r0, #0]
 800a48a:	60c6      	str	r6, [r0, #12]
 800a48c:	b13c      	cbz	r4, 800a49e <_Bfree+0x3a>
 800a48e:	69eb      	ldr	r3, [r5, #28]
 800a490:	6862      	ldr	r2, [r4, #4]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a498:	6021      	str	r1, [r4, #0]
 800a49a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a49e:	bd70      	pop	{r4, r5, r6, pc}
 800a4a0:	0800d194 	.word	0x0800d194
 800a4a4:	0800d214 	.word	0x0800d214

0800a4a8 <__multadd>:
 800a4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ac:	690d      	ldr	r5, [r1, #16]
 800a4ae:	4607      	mov	r7, r0
 800a4b0:	460c      	mov	r4, r1
 800a4b2:	461e      	mov	r6, r3
 800a4b4:	f101 0c14 	add.w	ip, r1, #20
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	f8dc 3000 	ldr.w	r3, [ip]
 800a4be:	b299      	uxth	r1, r3
 800a4c0:	fb02 6101 	mla	r1, r2, r1, r6
 800a4c4:	0c1e      	lsrs	r6, r3, #16
 800a4c6:	0c0b      	lsrs	r3, r1, #16
 800a4c8:	fb02 3306 	mla	r3, r2, r6, r3
 800a4cc:	b289      	uxth	r1, r1
 800a4ce:	3001      	adds	r0, #1
 800a4d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4d4:	4285      	cmp	r5, r0
 800a4d6:	f84c 1b04 	str.w	r1, [ip], #4
 800a4da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4de:	dcec      	bgt.n	800a4ba <__multadd+0x12>
 800a4e0:	b30e      	cbz	r6, 800a526 <__multadd+0x7e>
 800a4e2:	68a3      	ldr	r3, [r4, #8]
 800a4e4:	42ab      	cmp	r3, r5
 800a4e6:	dc19      	bgt.n	800a51c <__multadd+0x74>
 800a4e8:	6861      	ldr	r1, [r4, #4]
 800a4ea:	4638      	mov	r0, r7
 800a4ec:	3101      	adds	r1, #1
 800a4ee:	f7ff ff79 	bl	800a3e4 <_Balloc>
 800a4f2:	4680      	mov	r8, r0
 800a4f4:	b928      	cbnz	r0, 800a502 <__multadd+0x5a>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	4b0c      	ldr	r3, [pc, #48]	; (800a52c <__multadd+0x84>)
 800a4fa:	480d      	ldr	r0, [pc, #52]	; (800a530 <__multadd+0x88>)
 800a4fc:	21ba      	movs	r1, #186	; 0xba
 800a4fe:	f001 fed7 	bl	800c2b0 <__assert_func>
 800a502:	6922      	ldr	r2, [r4, #16]
 800a504:	3202      	adds	r2, #2
 800a506:	f104 010c 	add.w	r1, r4, #12
 800a50a:	0092      	lsls	r2, r2, #2
 800a50c:	300c      	adds	r0, #12
 800a50e:	f001 feb7 	bl	800c280 <memcpy>
 800a512:	4621      	mov	r1, r4
 800a514:	4638      	mov	r0, r7
 800a516:	f7ff ffa5 	bl	800a464 <_Bfree>
 800a51a:	4644      	mov	r4, r8
 800a51c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a520:	3501      	adds	r5, #1
 800a522:	615e      	str	r6, [r3, #20]
 800a524:	6125      	str	r5, [r4, #16]
 800a526:	4620      	mov	r0, r4
 800a528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a52c:	0800d203 	.word	0x0800d203
 800a530:	0800d214 	.word	0x0800d214

0800a534 <__s2b>:
 800a534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a538:	460c      	mov	r4, r1
 800a53a:	4615      	mov	r5, r2
 800a53c:	461f      	mov	r7, r3
 800a53e:	2209      	movs	r2, #9
 800a540:	3308      	adds	r3, #8
 800a542:	4606      	mov	r6, r0
 800a544:	fb93 f3f2 	sdiv	r3, r3, r2
 800a548:	2100      	movs	r1, #0
 800a54a:	2201      	movs	r2, #1
 800a54c:	429a      	cmp	r2, r3
 800a54e:	db09      	blt.n	800a564 <__s2b+0x30>
 800a550:	4630      	mov	r0, r6
 800a552:	f7ff ff47 	bl	800a3e4 <_Balloc>
 800a556:	b940      	cbnz	r0, 800a56a <__s2b+0x36>
 800a558:	4602      	mov	r2, r0
 800a55a:	4b19      	ldr	r3, [pc, #100]	; (800a5c0 <__s2b+0x8c>)
 800a55c:	4819      	ldr	r0, [pc, #100]	; (800a5c4 <__s2b+0x90>)
 800a55e:	21d3      	movs	r1, #211	; 0xd3
 800a560:	f001 fea6 	bl	800c2b0 <__assert_func>
 800a564:	0052      	lsls	r2, r2, #1
 800a566:	3101      	adds	r1, #1
 800a568:	e7f0      	b.n	800a54c <__s2b+0x18>
 800a56a:	9b08      	ldr	r3, [sp, #32]
 800a56c:	6143      	str	r3, [r0, #20]
 800a56e:	2d09      	cmp	r5, #9
 800a570:	f04f 0301 	mov.w	r3, #1
 800a574:	6103      	str	r3, [r0, #16]
 800a576:	dd16      	ble.n	800a5a6 <__s2b+0x72>
 800a578:	f104 0909 	add.w	r9, r4, #9
 800a57c:	46c8      	mov	r8, r9
 800a57e:	442c      	add	r4, r5
 800a580:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a584:	4601      	mov	r1, r0
 800a586:	3b30      	subs	r3, #48	; 0x30
 800a588:	220a      	movs	r2, #10
 800a58a:	4630      	mov	r0, r6
 800a58c:	f7ff ff8c 	bl	800a4a8 <__multadd>
 800a590:	45a0      	cmp	r8, r4
 800a592:	d1f5      	bne.n	800a580 <__s2b+0x4c>
 800a594:	f1a5 0408 	sub.w	r4, r5, #8
 800a598:	444c      	add	r4, r9
 800a59a:	1b2d      	subs	r5, r5, r4
 800a59c:	1963      	adds	r3, r4, r5
 800a59e:	42bb      	cmp	r3, r7
 800a5a0:	db04      	blt.n	800a5ac <__s2b+0x78>
 800a5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5a6:	340a      	adds	r4, #10
 800a5a8:	2509      	movs	r5, #9
 800a5aa:	e7f6      	b.n	800a59a <__s2b+0x66>
 800a5ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a5b0:	4601      	mov	r1, r0
 800a5b2:	3b30      	subs	r3, #48	; 0x30
 800a5b4:	220a      	movs	r2, #10
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	f7ff ff76 	bl	800a4a8 <__multadd>
 800a5bc:	e7ee      	b.n	800a59c <__s2b+0x68>
 800a5be:	bf00      	nop
 800a5c0:	0800d203 	.word	0x0800d203
 800a5c4:	0800d214 	.word	0x0800d214

0800a5c8 <__hi0bits>:
 800a5c8:	0c03      	lsrs	r3, r0, #16
 800a5ca:	041b      	lsls	r3, r3, #16
 800a5cc:	b9d3      	cbnz	r3, 800a604 <__hi0bits+0x3c>
 800a5ce:	0400      	lsls	r0, r0, #16
 800a5d0:	2310      	movs	r3, #16
 800a5d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a5d6:	bf04      	itt	eq
 800a5d8:	0200      	lsleq	r0, r0, #8
 800a5da:	3308      	addeq	r3, #8
 800a5dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a5e0:	bf04      	itt	eq
 800a5e2:	0100      	lsleq	r0, r0, #4
 800a5e4:	3304      	addeq	r3, #4
 800a5e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a5ea:	bf04      	itt	eq
 800a5ec:	0080      	lsleq	r0, r0, #2
 800a5ee:	3302      	addeq	r3, #2
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	db05      	blt.n	800a600 <__hi0bits+0x38>
 800a5f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a5f8:	f103 0301 	add.w	r3, r3, #1
 800a5fc:	bf08      	it	eq
 800a5fe:	2320      	moveq	r3, #32
 800a600:	4618      	mov	r0, r3
 800a602:	4770      	bx	lr
 800a604:	2300      	movs	r3, #0
 800a606:	e7e4      	b.n	800a5d2 <__hi0bits+0xa>

0800a608 <__lo0bits>:
 800a608:	6803      	ldr	r3, [r0, #0]
 800a60a:	f013 0207 	ands.w	r2, r3, #7
 800a60e:	d00c      	beq.n	800a62a <__lo0bits+0x22>
 800a610:	07d9      	lsls	r1, r3, #31
 800a612:	d422      	bmi.n	800a65a <__lo0bits+0x52>
 800a614:	079a      	lsls	r2, r3, #30
 800a616:	bf49      	itett	mi
 800a618:	085b      	lsrmi	r3, r3, #1
 800a61a:	089b      	lsrpl	r3, r3, #2
 800a61c:	6003      	strmi	r3, [r0, #0]
 800a61e:	2201      	movmi	r2, #1
 800a620:	bf5c      	itt	pl
 800a622:	6003      	strpl	r3, [r0, #0]
 800a624:	2202      	movpl	r2, #2
 800a626:	4610      	mov	r0, r2
 800a628:	4770      	bx	lr
 800a62a:	b299      	uxth	r1, r3
 800a62c:	b909      	cbnz	r1, 800a632 <__lo0bits+0x2a>
 800a62e:	0c1b      	lsrs	r3, r3, #16
 800a630:	2210      	movs	r2, #16
 800a632:	b2d9      	uxtb	r1, r3
 800a634:	b909      	cbnz	r1, 800a63a <__lo0bits+0x32>
 800a636:	3208      	adds	r2, #8
 800a638:	0a1b      	lsrs	r3, r3, #8
 800a63a:	0719      	lsls	r1, r3, #28
 800a63c:	bf04      	itt	eq
 800a63e:	091b      	lsreq	r3, r3, #4
 800a640:	3204      	addeq	r2, #4
 800a642:	0799      	lsls	r1, r3, #30
 800a644:	bf04      	itt	eq
 800a646:	089b      	lsreq	r3, r3, #2
 800a648:	3202      	addeq	r2, #2
 800a64a:	07d9      	lsls	r1, r3, #31
 800a64c:	d403      	bmi.n	800a656 <__lo0bits+0x4e>
 800a64e:	085b      	lsrs	r3, r3, #1
 800a650:	f102 0201 	add.w	r2, r2, #1
 800a654:	d003      	beq.n	800a65e <__lo0bits+0x56>
 800a656:	6003      	str	r3, [r0, #0]
 800a658:	e7e5      	b.n	800a626 <__lo0bits+0x1e>
 800a65a:	2200      	movs	r2, #0
 800a65c:	e7e3      	b.n	800a626 <__lo0bits+0x1e>
 800a65e:	2220      	movs	r2, #32
 800a660:	e7e1      	b.n	800a626 <__lo0bits+0x1e>
	...

0800a664 <__i2b>:
 800a664:	b510      	push	{r4, lr}
 800a666:	460c      	mov	r4, r1
 800a668:	2101      	movs	r1, #1
 800a66a:	f7ff febb 	bl	800a3e4 <_Balloc>
 800a66e:	4602      	mov	r2, r0
 800a670:	b928      	cbnz	r0, 800a67e <__i2b+0x1a>
 800a672:	4b05      	ldr	r3, [pc, #20]	; (800a688 <__i2b+0x24>)
 800a674:	4805      	ldr	r0, [pc, #20]	; (800a68c <__i2b+0x28>)
 800a676:	f240 1145 	movw	r1, #325	; 0x145
 800a67a:	f001 fe19 	bl	800c2b0 <__assert_func>
 800a67e:	2301      	movs	r3, #1
 800a680:	6144      	str	r4, [r0, #20]
 800a682:	6103      	str	r3, [r0, #16]
 800a684:	bd10      	pop	{r4, pc}
 800a686:	bf00      	nop
 800a688:	0800d203 	.word	0x0800d203
 800a68c:	0800d214 	.word	0x0800d214

0800a690 <__multiply>:
 800a690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a694:	4691      	mov	r9, r2
 800a696:	690a      	ldr	r2, [r1, #16]
 800a698:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	bfb8      	it	lt
 800a6a0:	460b      	movlt	r3, r1
 800a6a2:	460c      	mov	r4, r1
 800a6a4:	bfbc      	itt	lt
 800a6a6:	464c      	movlt	r4, r9
 800a6a8:	4699      	movlt	r9, r3
 800a6aa:	6927      	ldr	r7, [r4, #16]
 800a6ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a6b0:	68a3      	ldr	r3, [r4, #8]
 800a6b2:	6861      	ldr	r1, [r4, #4]
 800a6b4:	eb07 060a 	add.w	r6, r7, sl
 800a6b8:	42b3      	cmp	r3, r6
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	bfb8      	it	lt
 800a6be:	3101      	addlt	r1, #1
 800a6c0:	f7ff fe90 	bl	800a3e4 <_Balloc>
 800a6c4:	b930      	cbnz	r0, 800a6d4 <__multiply+0x44>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	4b44      	ldr	r3, [pc, #272]	; (800a7dc <__multiply+0x14c>)
 800a6ca:	4845      	ldr	r0, [pc, #276]	; (800a7e0 <__multiply+0x150>)
 800a6cc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a6d0:	f001 fdee 	bl	800c2b0 <__assert_func>
 800a6d4:	f100 0514 	add.w	r5, r0, #20
 800a6d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6dc:	462b      	mov	r3, r5
 800a6de:	2200      	movs	r2, #0
 800a6e0:	4543      	cmp	r3, r8
 800a6e2:	d321      	bcc.n	800a728 <__multiply+0x98>
 800a6e4:	f104 0314 	add.w	r3, r4, #20
 800a6e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a6ec:	f109 0314 	add.w	r3, r9, #20
 800a6f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a6f4:	9202      	str	r2, [sp, #8]
 800a6f6:	1b3a      	subs	r2, r7, r4
 800a6f8:	3a15      	subs	r2, #21
 800a6fa:	f022 0203 	bic.w	r2, r2, #3
 800a6fe:	3204      	adds	r2, #4
 800a700:	f104 0115 	add.w	r1, r4, #21
 800a704:	428f      	cmp	r7, r1
 800a706:	bf38      	it	cc
 800a708:	2204      	movcc	r2, #4
 800a70a:	9201      	str	r2, [sp, #4]
 800a70c:	9a02      	ldr	r2, [sp, #8]
 800a70e:	9303      	str	r3, [sp, #12]
 800a710:	429a      	cmp	r2, r3
 800a712:	d80c      	bhi.n	800a72e <__multiply+0x9e>
 800a714:	2e00      	cmp	r6, #0
 800a716:	dd03      	ble.n	800a720 <__multiply+0x90>
 800a718:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d05b      	beq.n	800a7d8 <__multiply+0x148>
 800a720:	6106      	str	r6, [r0, #16]
 800a722:	b005      	add	sp, #20
 800a724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a728:	f843 2b04 	str.w	r2, [r3], #4
 800a72c:	e7d8      	b.n	800a6e0 <__multiply+0x50>
 800a72e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a732:	f1ba 0f00 	cmp.w	sl, #0
 800a736:	d024      	beq.n	800a782 <__multiply+0xf2>
 800a738:	f104 0e14 	add.w	lr, r4, #20
 800a73c:	46a9      	mov	r9, r5
 800a73e:	f04f 0c00 	mov.w	ip, #0
 800a742:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a746:	f8d9 1000 	ldr.w	r1, [r9]
 800a74a:	fa1f fb82 	uxth.w	fp, r2
 800a74e:	b289      	uxth	r1, r1
 800a750:	fb0a 110b 	mla	r1, sl, fp, r1
 800a754:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a758:	f8d9 2000 	ldr.w	r2, [r9]
 800a75c:	4461      	add	r1, ip
 800a75e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a762:	fb0a c20b 	mla	r2, sl, fp, ip
 800a766:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a76a:	b289      	uxth	r1, r1
 800a76c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a770:	4577      	cmp	r7, lr
 800a772:	f849 1b04 	str.w	r1, [r9], #4
 800a776:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a77a:	d8e2      	bhi.n	800a742 <__multiply+0xb2>
 800a77c:	9a01      	ldr	r2, [sp, #4]
 800a77e:	f845 c002 	str.w	ip, [r5, r2]
 800a782:	9a03      	ldr	r2, [sp, #12]
 800a784:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a788:	3304      	adds	r3, #4
 800a78a:	f1b9 0f00 	cmp.w	r9, #0
 800a78e:	d021      	beq.n	800a7d4 <__multiply+0x144>
 800a790:	6829      	ldr	r1, [r5, #0]
 800a792:	f104 0c14 	add.w	ip, r4, #20
 800a796:	46ae      	mov	lr, r5
 800a798:	f04f 0a00 	mov.w	sl, #0
 800a79c:	f8bc b000 	ldrh.w	fp, [ip]
 800a7a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a7a4:	fb09 220b 	mla	r2, r9, fp, r2
 800a7a8:	4452      	add	r2, sl
 800a7aa:	b289      	uxth	r1, r1
 800a7ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a7b0:	f84e 1b04 	str.w	r1, [lr], #4
 800a7b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a7b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7bc:	f8be 1000 	ldrh.w	r1, [lr]
 800a7c0:	fb09 110a 	mla	r1, r9, sl, r1
 800a7c4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a7c8:	4567      	cmp	r7, ip
 800a7ca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7ce:	d8e5      	bhi.n	800a79c <__multiply+0x10c>
 800a7d0:	9a01      	ldr	r2, [sp, #4]
 800a7d2:	50a9      	str	r1, [r5, r2]
 800a7d4:	3504      	adds	r5, #4
 800a7d6:	e799      	b.n	800a70c <__multiply+0x7c>
 800a7d8:	3e01      	subs	r6, #1
 800a7da:	e79b      	b.n	800a714 <__multiply+0x84>
 800a7dc:	0800d203 	.word	0x0800d203
 800a7e0:	0800d214 	.word	0x0800d214

0800a7e4 <__pow5mult>:
 800a7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7e8:	4615      	mov	r5, r2
 800a7ea:	f012 0203 	ands.w	r2, r2, #3
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	460f      	mov	r7, r1
 800a7f2:	d007      	beq.n	800a804 <__pow5mult+0x20>
 800a7f4:	4c25      	ldr	r4, [pc, #148]	; (800a88c <__pow5mult+0xa8>)
 800a7f6:	3a01      	subs	r2, #1
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7fe:	f7ff fe53 	bl	800a4a8 <__multadd>
 800a802:	4607      	mov	r7, r0
 800a804:	10ad      	asrs	r5, r5, #2
 800a806:	d03d      	beq.n	800a884 <__pow5mult+0xa0>
 800a808:	69f4      	ldr	r4, [r6, #28]
 800a80a:	b97c      	cbnz	r4, 800a82c <__pow5mult+0x48>
 800a80c:	2010      	movs	r0, #16
 800a80e:	f7ff fd35 	bl	800a27c <malloc>
 800a812:	4602      	mov	r2, r0
 800a814:	61f0      	str	r0, [r6, #28]
 800a816:	b928      	cbnz	r0, 800a824 <__pow5mult+0x40>
 800a818:	4b1d      	ldr	r3, [pc, #116]	; (800a890 <__pow5mult+0xac>)
 800a81a:	481e      	ldr	r0, [pc, #120]	; (800a894 <__pow5mult+0xb0>)
 800a81c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a820:	f001 fd46 	bl	800c2b0 <__assert_func>
 800a824:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a828:	6004      	str	r4, [r0, #0]
 800a82a:	60c4      	str	r4, [r0, #12]
 800a82c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a830:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a834:	b94c      	cbnz	r4, 800a84a <__pow5mult+0x66>
 800a836:	f240 2171 	movw	r1, #625	; 0x271
 800a83a:	4630      	mov	r0, r6
 800a83c:	f7ff ff12 	bl	800a664 <__i2b>
 800a840:	2300      	movs	r3, #0
 800a842:	f8c8 0008 	str.w	r0, [r8, #8]
 800a846:	4604      	mov	r4, r0
 800a848:	6003      	str	r3, [r0, #0]
 800a84a:	f04f 0900 	mov.w	r9, #0
 800a84e:	07eb      	lsls	r3, r5, #31
 800a850:	d50a      	bpl.n	800a868 <__pow5mult+0x84>
 800a852:	4639      	mov	r1, r7
 800a854:	4622      	mov	r2, r4
 800a856:	4630      	mov	r0, r6
 800a858:	f7ff ff1a 	bl	800a690 <__multiply>
 800a85c:	4639      	mov	r1, r7
 800a85e:	4680      	mov	r8, r0
 800a860:	4630      	mov	r0, r6
 800a862:	f7ff fdff 	bl	800a464 <_Bfree>
 800a866:	4647      	mov	r7, r8
 800a868:	106d      	asrs	r5, r5, #1
 800a86a:	d00b      	beq.n	800a884 <__pow5mult+0xa0>
 800a86c:	6820      	ldr	r0, [r4, #0]
 800a86e:	b938      	cbnz	r0, 800a880 <__pow5mult+0x9c>
 800a870:	4622      	mov	r2, r4
 800a872:	4621      	mov	r1, r4
 800a874:	4630      	mov	r0, r6
 800a876:	f7ff ff0b 	bl	800a690 <__multiply>
 800a87a:	6020      	str	r0, [r4, #0]
 800a87c:	f8c0 9000 	str.w	r9, [r0]
 800a880:	4604      	mov	r4, r0
 800a882:	e7e4      	b.n	800a84e <__pow5mult+0x6a>
 800a884:	4638      	mov	r0, r7
 800a886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a88a:	bf00      	nop
 800a88c:	0800d360 	.word	0x0800d360
 800a890:	0800d194 	.word	0x0800d194
 800a894:	0800d214 	.word	0x0800d214

0800a898 <__lshift>:
 800a898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a89c:	460c      	mov	r4, r1
 800a89e:	6849      	ldr	r1, [r1, #4]
 800a8a0:	6923      	ldr	r3, [r4, #16]
 800a8a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8a6:	68a3      	ldr	r3, [r4, #8]
 800a8a8:	4607      	mov	r7, r0
 800a8aa:	4691      	mov	r9, r2
 800a8ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8b0:	f108 0601 	add.w	r6, r8, #1
 800a8b4:	42b3      	cmp	r3, r6
 800a8b6:	db0b      	blt.n	800a8d0 <__lshift+0x38>
 800a8b8:	4638      	mov	r0, r7
 800a8ba:	f7ff fd93 	bl	800a3e4 <_Balloc>
 800a8be:	4605      	mov	r5, r0
 800a8c0:	b948      	cbnz	r0, 800a8d6 <__lshift+0x3e>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	4b28      	ldr	r3, [pc, #160]	; (800a968 <__lshift+0xd0>)
 800a8c6:	4829      	ldr	r0, [pc, #164]	; (800a96c <__lshift+0xd4>)
 800a8c8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a8cc:	f001 fcf0 	bl	800c2b0 <__assert_func>
 800a8d0:	3101      	adds	r1, #1
 800a8d2:	005b      	lsls	r3, r3, #1
 800a8d4:	e7ee      	b.n	800a8b4 <__lshift+0x1c>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f100 0114 	add.w	r1, r0, #20
 800a8dc:	f100 0210 	add.w	r2, r0, #16
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	4553      	cmp	r3, sl
 800a8e4:	db33      	blt.n	800a94e <__lshift+0xb6>
 800a8e6:	6920      	ldr	r0, [r4, #16]
 800a8e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8ec:	f104 0314 	add.w	r3, r4, #20
 800a8f0:	f019 091f 	ands.w	r9, r9, #31
 800a8f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8fc:	d02b      	beq.n	800a956 <__lshift+0xbe>
 800a8fe:	f1c9 0e20 	rsb	lr, r9, #32
 800a902:	468a      	mov	sl, r1
 800a904:	2200      	movs	r2, #0
 800a906:	6818      	ldr	r0, [r3, #0]
 800a908:	fa00 f009 	lsl.w	r0, r0, r9
 800a90c:	4310      	orrs	r0, r2
 800a90e:	f84a 0b04 	str.w	r0, [sl], #4
 800a912:	f853 2b04 	ldr.w	r2, [r3], #4
 800a916:	459c      	cmp	ip, r3
 800a918:	fa22 f20e 	lsr.w	r2, r2, lr
 800a91c:	d8f3      	bhi.n	800a906 <__lshift+0x6e>
 800a91e:	ebac 0304 	sub.w	r3, ip, r4
 800a922:	3b15      	subs	r3, #21
 800a924:	f023 0303 	bic.w	r3, r3, #3
 800a928:	3304      	adds	r3, #4
 800a92a:	f104 0015 	add.w	r0, r4, #21
 800a92e:	4584      	cmp	ip, r0
 800a930:	bf38      	it	cc
 800a932:	2304      	movcc	r3, #4
 800a934:	50ca      	str	r2, [r1, r3]
 800a936:	b10a      	cbz	r2, 800a93c <__lshift+0xa4>
 800a938:	f108 0602 	add.w	r6, r8, #2
 800a93c:	3e01      	subs	r6, #1
 800a93e:	4638      	mov	r0, r7
 800a940:	612e      	str	r6, [r5, #16]
 800a942:	4621      	mov	r1, r4
 800a944:	f7ff fd8e 	bl	800a464 <_Bfree>
 800a948:	4628      	mov	r0, r5
 800a94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a94e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a952:	3301      	adds	r3, #1
 800a954:	e7c5      	b.n	800a8e2 <__lshift+0x4a>
 800a956:	3904      	subs	r1, #4
 800a958:	f853 2b04 	ldr.w	r2, [r3], #4
 800a95c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a960:	459c      	cmp	ip, r3
 800a962:	d8f9      	bhi.n	800a958 <__lshift+0xc0>
 800a964:	e7ea      	b.n	800a93c <__lshift+0xa4>
 800a966:	bf00      	nop
 800a968:	0800d203 	.word	0x0800d203
 800a96c:	0800d214 	.word	0x0800d214

0800a970 <__mcmp>:
 800a970:	b530      	push	{r4, r5, lr}
 800a972:	6902      	ldr	r2, [r0, #16]
 800a974:	690c      	ldr	r4, [r1, #16]
 800a976:	1b12      	subs	r2, r2, r4
 800a978:	d10e      	bne.n	800a998 <__mcmp+0x28>
 800a97a:	f100 0314 	add.w	r3, r0, #20
 800a97e:	3114      	adds	r1, #20
 800a980:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a984:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a988:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a98c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a990:	42a5      	cmp	r5, r4
 800a992:	d003      	beq.n	800a99c <__mcmp+0x2c>
 800a994:	d305      	bcc.n	800a9a2 <__mcmp+0x32>
 800a996:	2201      	movs	r2, #1
 800a998:	4610      	mov	r0, r2
 800a99a:	bd30      	pop	{r4, r5, pc}
 800a99c:	4283      	cmp	r3, r0
 800a99e:	d3f3      	bcc.n	800a988 <__mcmp+0x18>
 800a9a0:	e7fa      	b.n	800a998 <__mcmp+0x28>
 800a9a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9a6:	e7f7      	b.n	800a998 <__mcmp+0x28>

0800a9a8 <__mdiff>:
 800a9a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ac:	460c      	mov	r4, r1
 800a9ae:	4606      	mov	r6, r0
 800a9b0:	4611      	mov	r1, r2
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	4690      	mov	r8, r2
 800a9b6:	f7ff ffdb 	bl	800a970 <__mcmp>
 800a9ba:	1e05      	subs	r5, r0, #0
 800a9bc:	d110      	bne.n	800a9e0 <__mdiff+0x38>
 800a9be:	4629      	mov	r1, r5
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	f7ff fd0f 	bl	800a3e4 <_Balloc>
 800a9c6:	b930      	cbnz	r0, 800a9d6 <__mdiff+0x2e>
 800a9c8:	4b3a      	ldr	r3, [pc, #232]	; (800aab4 <__mdiff+0x10c>)
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	f240 2137 	movw	r1, #567	; 0x237
 800a9d0:	4839      	ldr	r0, [pc, #228]	; (800aab8 <__mdiff+0x110>)
 800a9d2:	f001 fc6d 	bl	800c2b0 <__assert_func>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e0:	bfa4      	itt	ge
 800a9e2:	4643      	movge	r3, r8
 800a9e4:	46a0      	movge	r8, r4
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a9ec:	bfa6      	itte	ge
 800a9ee:	461c      	movge	r4, r3
 800a9f0:	2500      	movge	r5, #0
 800a9f2:	2501      	movlt	r5, #1
 800a9f4:	f7ff fcf6 	bl	800a3e4 <_Balloc>
 800a9f8:	b920      	cbnz	r0, 800aa04 <__mdiff+0x5c>
 800a9fa:	4b2e      	ldr	r3, [pc, #184]	; (800aab4 <__mdiff+0x10c>)
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	f240 2145 	movw	r1, #581	; 0x245
 800aa02:	e7e5      	b.n	800a9d0 <__mdiff+0x28>
 800aa04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa08:	6926      	ldr	r6, [r4, #16]
 800aa0a:	60c5      	str	r5, [r0, #12]
 800aa0c:	f104 0914 	add.w	r9, r4, #20
 800aa10:	f108 0514 	add.w	r5, r8, #20
 800aa14:	f100 0e14 	add.w	lr, r0, #20
 800aa18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aa1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa20:	f108 0210 	add.w	r2, r8, #16
 800aa24:	46f2      	mov	sl, lr
 800aa26:	2100      	movs	r1, #0
 800aa28:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa30:	fa11 f88b 	uxtah	r8, r1, fp
 800aa34:	b299      	uxth	r1, r3
 800aa36:	0c1b      	lsrs	r3, r3, #16
 800aa38:	eba8 0801 	sub.w	r8, r8, r1
 800aa3c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa40:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa44:	fa1f f888 	uxth.w	r8, r8
 800aa48:	1419      	asrs	r1, r3, #16
 800aa4a:	454e      	cmp	r6, r9
 800aa4c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa50:	f84a 3b04 	str.w	r3, [sl], #4
 800aa54:	d8e8      	bhi.n	800aa28 <__mdiff+0x80>
 800aa56:	1b33      	subs	r3, r6, r4
 800aa58:	3b15      	subs	r3, #21
 800aa5a:	f023 0303 	bic.w	r3, r3, #3
 800aa5e:	3304      	adds	r3, #4
 800aa60:	3415      	adds	r4, #21
 800aa62:	42a6      	cmp	r6, r4
 800aa64:	bf38      	it	cc
 800aa66:	2304      	movcc	r3, #4
 800aa68:	441d      	add	r5, r3
 800aa6a:	4473      	add	r3, lr
 800aa6c:	469e      	mov	lr, r3
 800aa6e:	462e      	mov	r6, r5
 800aa70:	4566      	cmp	r6, ip
 800aa72:	d30e      	bcc.n	800aa92 <__mdiff+0xea>
 800aa74:	f10c 0203 	add.w	r2, ip, #3
 800aa78:	1b52      	subs	r2, r2, r5
 800aa7a:	f022 0203 	bic.w	r2, r2, #3
 800aa7e:	3d03      	subs	r5, #3
 800aa80:	45ac      	cmp	ip, r5
 800aa82:	bf38      	it	cc
 800aa84:	2200      	movcc	r2, #0
 800aa86:	4413      	add	r3, r2
 800aa88:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800aa8c:	b17a      	cbz	r2, 800aaae <__mdiff+0x106>
 800aa8e:	6107      	str	r7, [r0, #16]
 800aa90:	e7a4      	b.n	800a9dc <__mdiff+0x34>
 800aa92:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa96:	fa11 f288 	uxtah	r2, r1, r8
 800aa9a:	1414      	asrs	r4, r2, #16
 800aa9c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aaa0:	b292      	uxth	r2, r2
 800aaa2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aaa6:	f84e 2b04 	str.w	r2, [lr], #4
 800aaaa:	1421      	asrs	r1, r4, #16
 800aaac:	e7e0      	b.n	800aa70 <__mdiff+0xc8>
 800aaae:	3f01      	subs	r7, #1
 800aab0:	e7ea      	b.n	800aa88 <__mdiff+0xe0>
 800aab2:	bf00      	nop
 800aab4:	0800d203 	.word	0x0800d203
 800aab8:	0800d214 	.word	0x0800d214

0800aabc <__ulp>:
 800aabc:	b082      	sub	sp, #8
 800aabe:	ed8d 0b00 	vstr	d0, [sp]
 800aac2:	9a01      	ldr	r2, [sp, #4]
 800aac4:	4b0f      	ldr	r3, [pc, #60]	; (800ab04 <__ulp+0x48>)
 800aac6:	4013      	ands	r3, r2
 800aac8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	dc08      	bgt.n	800aae2 <__ulp+0x26>
 800aad0:	425b      	negs	r3, r3
 800aad2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800aad6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aada:	da04      	bge.n	800aae6 <__ulp+0x2a>
 800aadc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aae0:	4113      	asrs	r3, r2
 800aae2:	2200      	movs	r2, #0
 800aae4:	e008      	b.n	800aaf8 <__ulp+0x3c>
 800aae6:	f1a2 0314 	sub.w	r3, r2, #20
 800aaea:	2b1e      	cmp	r3, #30
 800aaec:	bfda      	itte	le
 800aaee:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800aaf2:	40da      	lsrle	r2, r3
 800aaf4:	2201      	movgt	r2, #1
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4610      	mov	r0, r2
 800aafc:	ec41 0b10 	vmov	d0, r0, r1
 800ab00:	b002      	add	sp, #8
 800ab02:	4770      	bx	lr
 800ab04:	7ff00000 	.word	0x7ff00000

0800ab08 <__b2d>:
 800ab08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0c:	6906      	ldr	r6, [r0, #16]
 800ab0e:	f100 0814 	add.w	r8, r0, #20
 800ab12:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ab16:	1f37      	subs	r7, r6, #4
 800ab18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	f7ff fd53 	bl	800a5c8 <__hi0bits>
 800ab22:	f1c0 0320 	rsb	r3, r0, #32
 800ab26:	280a      	cmp	r0, #10
 800ab28:	600b      	str	r3, [r1, #0]
 800ab2a:	491b      	ldr	r1, [pc, #108]	; (800ab98 <__b2d+0x90>)
 800ab2c:	dc15      	bgt.n	800ab5a <__b2d+0x52>
 800ab2e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ab32:	fa22 f30c 	lsr.w	r3, r2, ip
 800ab36:	45b8      	cmp	r8, r7
 800ab38:	ea43 0501 	orr.w	r5, r3, r1
 800ab3c:	bf34      	ite	cc
 800ab3e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab42:	2300      	movcs	r3, #0
 800ab44:	3015      	adds	r0, #21
 800ab46:	fa02 f000 	lsl.w	r0, r2, r0
 800ab4a:	fa23 f30c 	lsr.w	r3, r3, ip
 800ab4e:	4303      	orrs	r3, r0
 800ab50:	461c      	mov	r4, r3
 800ab52:	ec45 4b10 	vmov	d0, r4, r5
 800ab56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab5a:	45b8      	cmp	r8, r7
 800ab5c:	bf3a      	itte	cc
 800ab5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab62:	f1a6 0708 	subcc.w	r7, r6, #8
 800ab66:	2300      	movcs	r3, #0
 800ab68:	380b      	subs	r0, #11
 800ab6a:	d012      	beq.n	800ab92 <__b2d+0x8a>
 800ab6c:	f1c0 0120 	rsb	r1, r0, #32
 800ab70:	fa23 f401 	lsr.w	r4, r3, r1
 800ab74:	4082      	lsls	r2, r0
 800ab76:	4322      	orrs	r2, r4
 800ab78:	4547      	cmp	r7, r8
 800ab7a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ab7e:	bf8c      	ite	hi
 800ab80:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ab84:	2200      	movls	r2, #0
 800ab86:	4083      	lsls	r3, r0
 800ab88:	40ca      	lsrs	r2, r1
 800ab8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	e7de      	b.n	800ab50 <__b2d+0x48>
 800ab92:	ea42 0501 	orr.w	r5, r2, r1
 800ab96:	e7db      	b.n	800ab50 <__b2d+0x48>
 800ab98:	3ff00000 	.word	0x3ff00000

0800ab9c <__d2b>:
 800ab9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aba0:	460f      	mov	r7, r1
 800aba2:	2101      	movs	r1, #1
 800aba4:	ec59 8b10 	vmov	r8, r9, d0
 800aba8:	4616      	mov	r6, r2
 800abaa:	f7ff fc1b 	bl	800a3e4 <_Balloc>
 800abae:	4604      	mov	r4, r0
 800abb0:	b930      	cbnz	r0, 800abc0 <__d2b+0x24>
 800abb2:	4602      	mov	r2, r0
 800abb4:	4b24      	ldr	r3, [pc, #144]	; (800ac48 <__d2b+0xac>)
 800abb6:	4825      	ldr	r0, [pc, #148]	; (800ac4c <__d2b+0xb0>)
 800abb8:	f240 310f 	movw	r1, #783	; 0x30f
 800abbc:	f001 fb78 	bl	800c2b0 <__assert_func>
 800abc0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800abc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abc8:	bb2d      	cbnz	r5, 800ac16 <__d2b+0x7a>
 800abca:	9301      	str	r3, [sp, #4]
 800abcc:	f1b8 0300 	subs.w	r3, r8, #0
 800abd0:	d026      	beq.n	800ac20 <__d2b+0x84>
 800abd2:	4668      	mov	r0, sp
 800abd4:	9300      	str	r3, [sp, #0]
 800abd6:	f7ff fd17 	bl	800a608 <__lo0bits>
 800abda:	e9dd 1200 	ldrd	r1, r2, [sp]
 800abde:	b1e8      	cbz	r0, 800ac1c <__d2b+0x80>
 800abe0:	f1c0 0320 	rsb	r3, r0, #32
 800abe4:	fa02 f303 	lsl.w	r3, r2, r3
 800abe8:	430b      	orrs	r3, r1
 800abea:	40c2      	lsrs	r2, r0
 800abec:	6163      	str	r3, [r4, #20]
 800abee:	9201      	str	r2, [sp, #4]
 800abf0:	9b01      	ldr	r3, [sp, #4]
 800abf2:	61a3      	str	r3, [r4, #24]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	bf14      	ite	ne
 800abf8:	2202      	movne	r2, #2
 800abfa:	2201      	moveq	r2, #1
 800abfc:	6122      	str	r2, [r4, #16]
 800abfe:	b1bd      	cbz	r5, 800ac30 <__d2b+0x94>
 800ac00:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac04:	4405      	add	r5, r0
 800ac06:	603d      	str	r5, [r7, #0]
 800ac08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac0c:	6030      	str	r0, [r6, #0]
 800ac0e:	4620      	mov	r0, r4
 800ac10:	b003      	add	sp, #12
 800ac12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac1a:	e7d6      	b.n	800abca <__d2b+0x2e>
 800ac1c:	6161      	str	r1, [r4, #20]
 800ac1e:	e7e7      	b.n	800abf0 <__d2b+0x54>
 800ac20:	a801      	add	r0, sp, #4
 800ac22:	f7ff fcf1 	bl	800a608 <__lo0bits>
 800ac26:	9b01      	ldr	r3, [sp, #4]
 800ac28:	6163      	str	r3, [r4, #20]
 800ac2a:	3020      	adds	r0, #32
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	e7e5      	b.n	800abfc <__d2b+0x60>
 800ac30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac38:	6038      	str	r0, [r7, #0]
 800ac3a:	6918      	ldr	r0, [r3, #16]
 800ac3c:	f7ff fcc4 	bl	800a5c8 <__hi0bits>
 800ac40:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac44:	e7e2      	b.n	800ac0c <__d2b+0x70>
 800ac46:	bf00      	nop
 800ac48:	0800d203 	.word	0x0800d203
 800ac4c:	0800d214 	.word	0x0800d214

0800ac50 <__ratio>:
 800ac50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac54:	4688      	mov	r8, r1
 800ac56:	4669      	mov	r1, sp
 800ac58:	4681      	mov	r9, r0
 800ac5a:	f7ff ff55 	bl	800ab08 <__b2d>
 800ac5e:	a901      	add	r1, sp, #4
 800ac60:	4640      	mov	r0, r8
 800ac62:	ec55 4b10 	vmov	r4, r5, d0
 800ac66:	f7ff ff4f 	bl	800ab08 <__b2d>
 800ac6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ac72:	eba3 0c02 	sub.w	ip, r3, r2
 800ac76:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ac7a:	1a9b      	subs	r3, r3, r2
 800ac7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ac80:	ec51 0b10 	vmov	r0, r1, d0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	bfd6      	itet	le
 800ac88:	460a      	movle	r2, r1
 800ac8a:	462a      	movgt	r2, r5
 800ac8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ac90:	468b      	mov	fp, r1
 800ac92:	462f      	mov	r7, r5
 800ac94:	bfd4      	ite	le
 800ac96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ac9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ac9e:	4620      	mov	r0, r4
 800aca0:	ee10 2a10 	vmov	r2, s0
 800aca4:	465b      	mov	r3, fp
 800aca6:	4639      	mov	r1, r7
 800aca8:	f7f5 fe00 	bl	80008ac <__aeabi_ddiv>
 800acac:	ec41 0b10 	vmov	d0, r0, r1
 800acb0:	b003      	add	sp, #12
 800acb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800acb6 <__copybits>:
 800acb6:	3901      	subs	r1, #1
 800acb8:	b570      	push	{r4, r5, r6, lr}
 800acba:	1149      	asrs	r1, r1, #5
 800acbc:	6914      	ldr	r4, [r2, #16]
 800acbe:	3101      	adds	r1, #1
 800acc0:	f102 0314 	add.w	r3, r2, #20
 800acc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800acc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800accc:	1f05      	subs	r5, r0, #4
 800acce:	42a3      	cmp	r3, r4
 800acd0:	d30c      	bcc.n	800acec <__copybits+0x36>
 800acd2:	1aa3      	subs	r3, r4, r2
 800acd4:	3b11      	subs	r3, #17
 800acd6:	f023 0303 	bic.w	r3, r3, #3
 800acda:	3211      	adds	r2, #17
 800acdc:	42a2      	cmp	r2, r4
 800acde:	bf88      	it	hi
 800ace0:	2300      	movhi	r3, #0
 800ace2:	4418      	add	r0, r3
 800ace4:	2300      	movs	r3, #0
 800ace6:	4288      	cmp	r0, r1
 800ace8:	d305      	bcc.n	800acf6 <__copybits+0x40>
 800acea:	bd70      	pop	{r4, r5, r6, pc}
 800acec:	f853 6b04 	ldr.w	r6, [r3], #4
 800acf0:	f845 6f04 	str.w	r6, [r5, #4]!
 800acf4:	e7eb      	b.n	800acce <__copybits+0x18>
 800acf6:	f840 3b04 	str.w	r3, [r0], #4
 800acfa:	e7f4      	b.n	800ace6 <__copybits+0x30>

0800acfc <__any_on>:
 800acfc:	f100 0214 	add.w	r2, r0, #20
 800ad00:	6900      	ldr	r0, [r0, #16]
 800ad02:	114b      	asrs	r3, r1, #5
 800ad04:	4298      	cmp	r0, r3
 800ad06:	b510      	push	{r4, lr}
 800ad08:	db11      	blt.n	800ad2e <__any_on+0x32>
 800ad0a:	dd0a      	ble.n	800ad22 <__any_on+0x26>
 800ad0c:	f011 011f 	ands.w	r1, r1, #31
 800ad10:	d007      	beq.n	800ad22 <__any_on+0x26>
 800ad12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ad16:	fa24 f001 	lsr.w	r0, r4, r1
 800ad1a:	fa00 f101 	lsl.w	r1, r0, r1
 800ad1e:	428c      	cmp	r4, r1
 800ad20:	d10b      	bne.n	800ad3a <__any_on+0x3e>
 800ad22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d803      	bhi.n	800ad32 <__any_on+0x36>
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	bd10      	pop	{r4, pc}
 800ad2e:	4603      	mov	r3, r0
 800ad30:	e7f7      	b.n	800ad22 <__any_on+0x26>
 800ad32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad36:	2900      	cmp	r1, #0
 800ad38:	d0f5      	beq.n	800ad26 <__any_on+0x2a>
 800ad3a:	2001      	movs	r0, #1
 800ad3c:	e7f6      	b.n	800ad2c <__any_on+0x30>

0800ad3e <sulp>:
 800ad3e:	b570      	push	{r4, r5, r6, lr}
 800ad40:	4604      	mov	r4, r0
 800ad42:	460d      	mov	r5, r1
 800ad44:	ec45 4b10 	vmov	d0, r4, r5
 800ad48:	4616      	mov	r6, r2
 800ad4a:	f7ff feb7 	bl	800aabc <__ulp>
 800ad4e:	ec51 0b10 	vmov	r0, r1, d0
 800ad52:	b17e      	cbz	r6, 800ad74 <sulp+0x36>
 800ad54:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ad58:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	dd09      	ble.n	800ad74 <sulp+0x36>
 800ad60:	051b      	lsls	r3, r3, #20
 800ad62:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ad66:	2400      	movs	r4, #0
 800ad68:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ad6c:	4622      	mov	r2, r4
 800ad6e:	462b      	mov	r3, r5
 800ad70:	f7f5 fc72 	bl	8000658 <__aeabi_dmul>
 800ad74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad78 <_strtod_l>:
 800ad78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad7c:	ed2d 8b02 	vpush	{d8}
 800ad80:	b09b      	sub	sp, #108	; 0x6c
 800ad82:	4604      	mov	r4, r0
 800ad84:	9213      	str	r2, [sp, #76]	; 0x4c
 800ad86:	2200      	movs	r2, #0
 800ad88:	9216      	str	r2, [sp, #88]	; 0x58
 800ad8a:	460d      	mov	r5, r1
 800ad8c:	f04f 0800 	mov.w	r8, #0
 800ad90:	f04f 0900 	mov.w	r9, #0
 800ad94:	460a      	mov	r2, r1
 800ad96:	9215      	str	r2, [sp, #84]	; 0x54
 800ad98:	7811      	ldrb	r1, [r2, #0]
 800ad9a:	292b      	cmp	r1, #43	; 0x2b
 800ad9c:	d04c      	beq.n	800ae38 <_strtod_l+0xc0>
 800ad9e:	d83a      	bhi.n	800ae16 <_strtod_l+0x9e>
 800ada0:	290d      	cmp	r1, #13
 800ada2:	d834      	bhi.n	800ae0e <_strtod_l+0x96>
 800ada4:	2908      	cmp	r1, #8
 800ada6:	d834      	bhi.n	800ae12 <_strtod_l+0x9a>
 800ada8:	2900      	cmp	r1, #0
 800adaa:	d03d      	beq.n	800ae28 <_strtod_l+0xb0>
 800adac:	2200      	movs	r2, #0
 800adae:	920a      	str	r2, [sp, #40]	; 0x28
 800adb0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800adb2:	7832      	ldrb	r2, [r6, #0]
 800adb4:	2a30      	cmp	r2, #48	; 0x30
 800adb6:	f040 80b4 	bne.w	800af22 <_strtod_l+0x1aa>
 800adba:	7872      	ldrb	r2, [r6, #1]
 800adbc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800adc0:	2a58      	cmp	r2, #88	; 0x58
 800adc2:	d170      	bne.n	800aea6 <_strtod_l+0x12e>
 800adc4:	9302      	str	r3, [sp, #8]
 800adc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adc8:	9301      	str	r3, [sp, #4]
 800adca:	ab16      	add	r3, sp, #88	; 0x58
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	4a8e      	ldr	r2, [pc, #568]	; (800b008 <_strtod_l+0x290>)
 800add0:	ab17      	add	r3, sp, #92	; 0x5c
 800add2:	a915      	add	r1, sp, #84	; 0x54
 800add4:	4620      	mov	r0, r4
 800add6:	f001 fb07 	bl	800c3e8 <__gethex>
 800adda:	f010 070f 	ands.w	r7, r0, #15
 800adde:	4605      	mov	r5, r0
 800ade0:	d005      	beq.n	800adee <_strtod_l+0x76>
 800ade2:	2f06      	cmp	r7, #6
 800ade4:	d12a      	bne.n	800ae3c <_strtod_l+0xc4>
 800ade6:	3601      	adds	r6, #1
 800ade8:	2300      	movs	r3, #0
 800adea:	9615      	str	r6, [sp, #84]	; 0x54
 800adec:	930a      	str	r3, [sp, #40]	; 0x28
 800adee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f040 857f 	bne.w	800b8f4 <_strtod_l+0xb7c>
 800adf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adf8:	b1db      	cbz	r3, 800ae32 <_strtod_l+0xba>
 800adfa:	4642      	mov	r2, r8
 800adfc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ae00:	ec43 2b10 	vmov	d0, r2, r3
 800ae04:	b01b      	add	sp, #108	; 0x6c
 800ae06:	ecbd 8b02 	vpop	{d8}
 800ae0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae0e:	2920      	cmp	r1, #32
 800ae10:	d1cc      	bne.n	800adac <_strtod_l+0x34>
 800ae12:	3201      	adds	r2, #1
 800ae14:	e7bf      	b.n	800ad96 <_strtod_l+0x1e>
 800ae16:	292d      	cmp	r1, #45	; 0x2d
 800ae18:	d1c8      	bne.n	800adac <_strtod_l+0x34>
 800ae1a:	2101      	movs	r1, #1
 800ae1c:	910a      	str	r1, [sp, #40]	; 0x28
 800ae1e:	1c51      	adds	r1, r2, #1
 800ae20:	9115      	str	r1, [sp, #84]	; 0x54
 800ae22:	7852      	ldrb	r2, [r2, #1]
 800ae24:	2a00      	cmp	r2, #0
 800ae26:	d1c3      	bne.n	800adb0 <_strtod_l+0x38>
 800ae28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae2a:	9515      	str	r5, [sp, #84]	; 0x54
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f040 855f 	bne.w	800b8f0 <_strtod_l+0xb78>
 800ae32:	4642      	mov	r2, r8
 800ae34:	464b      	mov	r3, r9
 800ae36:	e7e3      	b.n	800ae00 <_strtod_l+0x88>
 800ae38:	2100      	movs	r1, #0
 800ae3a:	e7ef      	b.n	800ae1c <_strtod_l+0xa4>
 800ae3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ae3e:	b13a      	cbz	r2, 800ae50 <_strtod_l+0xd8>
 800ae40:	2135      	movs	r1, #53	; 0x35
 800ae42:	a818      	add	r0, sp, #96	; 0x60
 800ae44:	f7ff ff37 	bl	800acb6 <__copybits>
 800ae48:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f7ff fb0a 	bl	800a464 <_Bfree>
 800ae50:	3f01      	subs	r7, #1
 800ae52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ae54:	2f04      	cmp	r7, #4
 800ae56:	d806      	bhi.n	800ae66 <_strtod_l+0xee>
 800ae58:	e8df f007 	tbb	[pc, r7]
 800ae5c:	201d0314 	.word	0x201d0314
 800ae60:	14          	.byte	0x14
 800ae61:	00          	.byte	0x00
 800ae62:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ae66:	05e9      	lsls	r1, r5, #23
 800ae68:	bf48      	it	mi
 800ae6a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ae6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae72:	0d1b      	lsrs	r3, r3, #20
 800ae74:	051b      	lsls	r3, r3, #20
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d1b9      	bne.n	800adee <_strtod_l+0x76>
 800ae7a:	f7fe fb05 	bl	8009488 <__errno>
 800ae7e:	2322      	movs	r3, #34	; 0x22
 800ae80:	6003      	str	r3, [r0, #0]
 800ae82:	e7b4      	b.n	800adee <_strtod_l+0x76>
 800ae84:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ae88:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ae8c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ae90:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ae94:	e7e7      	b.n	800ae66 <_strtod_l+0xee>
 800ae96:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b010 <_strtod_l+0x298>
 800ae9a:	e7e4      	b.n	800ae66 <_strtod_l+0xee>
 800ae9c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800aea0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800aea4:	e7df      	b.n	800ae66 <_strtod_l+0xee>
 800aea6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aea8:	1c5a      	adds	r2, r3, #1
 800aeaa:	9215      	str	r2, [sp, #84]	; 0x54
 800aeac:	785b      	ldrb	r3, [r3, #1]
 800aeae:	2b30      	cmp	r3, #48	; 0x30
 800aeb0:	d0f9      	beq.n	800aea6 <_strtod_l+0x12e>
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d09b      	beq.n	800adee <_strtod_l+0x76>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	f04f 0a00 	mov.w	sl, #0
 800aebc:	9304      	str	r3, [sp, #16]
 800aebe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aec0:	930b      	str	r3, [sp, #44]	; 0x2c
 800aec2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800aec6:	46d3      	mov	fp, sl
 800aec8:	220a      	movs	r2, #10
 800aeca:	9815      	ldr	r0, [sp, #84]	; 0x54
 800aecc:	7806      	ldrb	r6, [r0, #0]
 800aece:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800aed2:	b2d9      	uxtb	r1, r3
 800aed4:	2909      	cmp	r1, #9
 800aed6:	d926      	bls.n	800af26 <_strtod_l+0x1ae>
 800aed8:	494c      	ldr	r1, [pc, #304]	; (800b00c <_strtod_l+0x294>)
 800aeda:	2201      	movs	r2, #1
 800aedc:	f001 f98c 	bl	800c1f8 <strncmp>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	d030      	beq.n	800af46 <_strtod_l+0x1ce>
 800aee4:	2000      	movs	r0, #0
 800aee6:	4632      	mov	r2, r6
 800aee8:	9005      	str	r0, [sp, #20]
 800aeea:	465e      	mov	r6, fp
 800aeec:	4603      	mov	r3, r0
 800aeee:	2a65      	cmp	r2, #101	; 0x65
 800aef0:	d001      	beq.n	800aef6 <_strtod_l+0x17e>
 800aef2:	2a45      	cmp	r2, #69	; 0x45
 800aef4:	d113      	bne.n	800af1e <_strtod_l+0x1a6>
 800aef6:	b91e      	cbnz	r6, 800af00 <_strtod_l+0x188>
 800aef8:	9a04      	ldr	r2, [sp, #16]
 800aefa:	4302      	orrs	r2, r0
 800aefc:	d094      	beq.n	800ae28 <_strtod_l+0xb0>
 800aefe:	2600      	movs	r6, #0
 800af00:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800af02:	1c6a      	adds	r2, r5, #1
 800af04:	9215      	str	r2, [sp, #84]	; 0x54
 800af06:	786a      	ldrb	r2, [r5, #1]
 800af08:	2a2b      	cmp	r2, #43	; 0x2b
 800af0a:	d074      	beq.n	800aff6 <_strtod_l+0x27e>
 800af0c:	2a2d      	cmp	r2, #45	; 0x2d
 800af0e:	d078      	beq.n	800b002 <_strtod_l+0x28a>
 800af10:	f04f 0c00 	mov.w	ip, #0
 800af14:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800af18:	2909      	cmp	r1, #9
 800af1a:	d97f      	bls.n	800b01c <_strtod_l+0x2a4>
 800af1c:	9515      	str	r5, [sp, #84]	; 0x54
 800af1e:	2700      	movs	r7, #0
 800af20:	e09e      	b.n	800b060 <_strtod_l+0x2e8>
 800af22:	2300      	movs	r3, #0
 800af24:	e7c8      	b.n	800aeb8 <_strtod_l+0x140>
 800af26:	f1bb 0f08 	cmp.w	fp, #8
 800af2a:	bfd8      	it	le
 800af2c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800af2e:	f100 0001 	add.w	r0, r0, #1
 800af32:	bfda      	itte	le
 800af34:	fb02 3301 	mlale	r3, r2, r1, r3
 800af38:	9309      	strle	r3, [sp, #36]	; 0x24
 800af3a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800af3e:	f10b 0b01 	add.w	fp, fp, #1
 800af42:	9015      	str	r0, [sp, #84]	; 0x54
 800af44:	e7c1      	b.n	800aeca <_strtod_l+0x152>
 800af46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af48:	1c5a      	adds	r2, r3, #1
 800af4a:	9215      	str	r2, [sp, #84]	; 0x54
 800af4c:	785a      	ldrb	r2, [r3, #1]
 800af4e:	f1bb 0f00 	cmp.w	fp, #0
 800af52:	d037      	beq.n	800afc4 <_strtod_l+0x24c>
 800af54:	9005      	str	r0, [sp, #20]
 800af56:	465e      	mov	r6, fp
 800af58:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800af5c:	2b09      	cmp	r3, #9
 800af5e:	d912      	bls.n	800af86 <_strtod_l+0x20e>
 800af60:	2301      	movs	r3, #1
 800af62:	e7c4      	b.n	800aeee <_strtod_l+0x176>
 800af64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af66:	1c5a      	adds	r2, r3, #1
 800af68:	9215      	str	r2, [sp, #84]	; 0x54
 800af6a:	785a      	ldrb	r2, [r3, #1]
 800af6c:	3001      	adds	r0, #1
 800af6e:	2a30      	cmp	r2, #48	; 0x30
 800af70:	d0f8      	beq.n	800af64 <_strtod_l+0x1ec>
 800af72:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800af76:	2b08      	cmp	r3, #8
 800af78:	f200 84c1 	bhi.w	800b8fe <_strtod_l+0xb86>
 800af7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af7e:	9005      	str	r0, [sp, #20]
 800af80:	2000      	movs	r0, #0
 800af82:	930b      	str	r3, [sp, #44]	; 0x2c
 800af84:	4606      	mov	r6, r0
 800af86:	3a30      	subs	r2, #48	; 0x30
 800af88:	f100 0301 	add.w	r3, r0, #1
 800af8c:	d014      	beq.n	800afb8 <_strtod_l+0x240>
 800af8e:	9905      	ldr	r1, [sp, #20]
 800af90:	4419      	add	r1, r3
 800af92:	9105      	str	r1, [sp, #20]
 800af94:	4633      	mov	r3, r6
 800af96:	eb00 0c06 	add.w	ip, r0, r6
 800af9a:	210a      	movs	r1, #10
 800af9c:	4563      	cmp	r3, ip
 800af9e:	d113      	bne.n	800afc8 <_strtod_l+0x250>
 800afa0:	1833      	adds	r3, r6, r0
 800afa2:	2b08      	cmp	r3, #8
 800afa4:	f106 0601 	add.w	r6, r6, #1
 800afa8:	4406      	add	r6, r0
 800afaa:	dc1a      	bgt.n	800afe2 <_strtod_l+0x26a>
 800afac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800afae:	230a      	movs	r3, #10
 800afb0:	fb03 2301 	mla	r3, r3, r1, r2
 800afb4:	9309      	str	r3, [sp, #36]	; 0x24
 800afb6:	2300      	movs	r3, #0
 800afb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800afba:	1c51      	adds	r1, r2, #1
 800afbc:	9115      	str	r1, [sp, #84]	; 0x54
 800afbe:	7852      	ldrb	r2, [r2, #1]
 800afc0:	4618      	mov	r0, r3
 800afc2:	e7c9      	b.n	800af58 <_strtod_l+0x1e0>
 800afc4:	4658      	mov	r0, fp
 800afc6:	e7d2      	b.n	800af6e <_strtod_l+0x1f6>
 800afc8:	2b08      	cmp	r3, #8
 800afca:	f103 0301 	add.w	r3, r3, #1
 800afce:	dc03      	bgt.n	800afd8 <_strtod_l+0x260>
 800afd0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800afd2:	434f      	muls	r7, r1
 800afd4:	9709      	str	r7, [sp, #36]	; 0x24
 800afd6:	e7e1      	b.n	800af9c <_strtod_l+0x224>
 800afd8:	2b10      	cmp	r3, #16
 800afda:	bfd8      	it	le
 800afdc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800afe0:	e7dc      	b.n	800af9c <_strtod_l+0x224>
 800afe2:	2e10      	cmp	r6, #16
 800afe4:	bfdc      	itt	le
 800afe6:	230a      	movle	r3, #10
 800afe8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800afec:	e7e3      	b.n	800afb6 <_strtod_l+0x23e>
 800afee:	2300      	movs	r3, #0
 800aff0:	9305      	str	r3, [sp, #20]
 800aff2:	2301      	movs	r3, #1
 800aff4:	e780      	b.n	800aef8 <_strtod_l+0x180>
 800aff6:	f04f 0c00 	mov.w	ip, #0
 800affa:	1caa      	adds	r2, r5, #2
 800affc:	9215      	str	r2, [sp, #84]	; 0x54
 800affe:	78aa      	ldrb	r2, [r5, #2]
 800b000:	e788      	b.n	800af14 <_strtod_l+0x19c>
 800b002:	f04f 0c01 	mov.w	ip, #1
 800b006:	e7f8      	b.n	800affa <_strtod_l+0x282>
 800b008:	0800d370 	.word	0x0800d370
 800b00c:	0800d36c 	.word	0x0800d36c
 800b010:	7ff00000 	.word	0x7ff00000
 800b014:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b016:	1c51      	adds	r1, r2, #1
 800b018:	9115      	str	r1, [sp, #84]	; 0x54
 800b01a:	7852      	ldrb	r2, [r2, #1]
 800b01c:	2a30      	cmp	r2, #48	; 0x30
 800b01e:	d0f9      	beq.n	800b014 <_strtod_l+0x29c>
 800b020:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b024:	2908      	cmp	r1, #8
 800b026:	f63f af7a 	bhi.w	800af1e <_strtod_l+0x1a6>
 800b02a:	3a30      	subs	r2, #48	; 0x30
 800b02c:	9208      	str	r2, [sp, #32]
 800b02e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b030:	920c      	str	r2, [sp, #48]	; 0x30
 800b032:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b034:	1c57      	adds	r7, r2, #1
 800b036:	9715      	str	r7, [sp, #84]	; 0x54
 800b038:	7852      	ldrb	r2, [r2, #1]
 800b03a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b03e:	f1be 0f09 	cmp.w	lr, #9
 800b042:	d938      	bls.n	800b0b6 <_strtod_l+0x33e>
 800b044:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b046:	1a7f      	subs	r7, r7, r1
 800b048:	2f08      	cmp	r7, #8
 800b04a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b04e:	dc03      	bgt.n	800b058 <_strtod_l+0x2e0>
 800b050:	9908      	ldr	r1, [sp, #32]
 800b052:	428f      	cmp	r7, r1
 800b054:	bfa8      	it	ge
 800b056:	460f      	movge	r7, r1
 800b058:	f1bc 0f00 	cmp.w	ip, #0
 800b05c:	d000      	beq.n	800b060 <_strtod_l+0x2e8>
 800b05e:	427f      	negs	r7, r7
 800b060:	2e00      	cmp	r6, #0
 800b062:	d14f      	bne.n	800b104 <_strtod_l+0x38c>
 800b064:	9904      	ldr	r1, [sp, #16]
 800b066:	4301      	orrs	r1, r0
 800b068:	f47f aec1 	bne.w	800adee <_strtod_l+0x76>
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f47f aedb 	bne.w	800ae28 <_strtod_l+0xb0>
 800b072:	2a69      	cmp	r2, #105	; 0x69
 800b074:	d029      	beq.n	800b0ca <_strtod_l+0x352>
 800b076:	dc26      	bgt.n	800b0c6 <_strtod_l+0x34e>
 800b078:	2a49      	cmp	r2, #73	; 0x49
 800b07a:	d026      	beq.n	800b0ca <_strtod_l+0x352>
 800b07c:	2a4e      	cmp	r2, #78	; 0x4e
 800b07e:	f47f aed3 	bne.w	800ae28 <_strtod_l+0xb0>
 800b082:	499b      	ldr	r1, [pc, #620]	; (800b2f0 <_strtod_l+0x578>)
 800b084:	a815      	add	r0, sp, #84	; 0x54
 800b086:	f001 fbef 	bl	800c868 <__match>
 800b08a:	2800      	cmp	r0, #0
 800b08c:	f43f aecc 	beq.w	800ae28 <_strtod_l+0xb0>
 800b090:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	2b28      	cmp	r3, #40	; 0x28
 800b096:	d12f      	bne.n	800b0f8 <_strtod_l+0x380>
 800b098:	4996      	ldr	r1, [pc, #600]	; (800b2f4 <_strtod_l+0x57c>)
 800b09a:	aa18      	add	r2, sp, #96	; 0x60
 800b09c:	a815      	add	r0, sp, #84	; 0x54
 800b09e:	f001 fbf7 	bl	800c890 <__hexnan>
 800b0a2:	2805      	cmp	r0, #5
 800b0a4:	d128      	bne.n	800b0f8 <_strtod_l+0x380>
 800b0a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b0a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b0ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b0b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b0b4:	e69b      	b.n	800adee <_strtod_l+0x76>
 800b0b6:	9f08      	ldr	r7, [sp, #32]
 800b0b8:	210a      	movs	r1, #10
 800b0ba:	fb01 2107 	mla	r1, r1, r7, r2
 800b0be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b0c2:	9208      	str	r2, [sp, #32]
 800b0c4:	e7b5      	b.n	800b032 <_strtod_l+0x2ba>
 800b0c6:	2a6e      	cmp	r2, #110	; 0x6e
 800b0c8:	e7d9      	b.n	800b07e <_strtod_l+0x306>
 800b0ca:	498b      	ldr	r1, [pc, #556]	; (800b2f8 <_strtod_l+0x580>)
 800b0cc:	a815      	add	r0, sp, #84	; 0x54
 800b0ce:	f001 fbcb 	bl	800c868 <__match>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	f43f aea8 	beq.w	800ae28 <_strtod_l+0xb0>
 800b0d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0da:	4988      	ldr	r1, [pc, #544]	; (800b2fc <_strtod_l+0x584>)
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	a815      	add	r0, sp, #84	; 0x54
 800b0e0:	9315      	str	r3, [sp, #84]	; 0x54
 800b0e2:	f001 fbc1 	bl	800c868 <__match>
 800b0e6:	b910      	cbnz	r0, 800b0ee <_strtod_l+0x376>
 800b0e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	9315      	str	r3, [sp, #84]	; 0x54
 800b0ee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b30c <_strtod_l+0x594>
 800b0f2:	f04f 0800 	mov.w	r8, #0
 800b0f6:	e67a      	b.n	800adee <_strtod_l+0x76>
 800b0f8:	4881      	ldr	r0, [pc, #516]	; (800b300 <_strtod_l+0x588>)
 800b0fa:	f001 f8d1 	bl	800c2a0 <nan>
 800b0fe:	ec59 8b10 	vmov	r8, r9, d0
 800b102:	e674      	b.n	800adee <_strtod_l+0x76>
 800b104:	9b05      	ldr	r3, [sp, #20]
 800b106:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b108:	1afb      	subs	r3, r7, r3
 800b10a:	f1bb 0f00 	cmp.w	fp, #0
 800b10e:	bf08      	it	eq
 800b110:	46b3      	moveq	fp, r6
 800b112:	2e10      	cmp	r6, #16
 800b114:	9308      	str	r3, [sp, #32]
 800b116:	4635      	mov	r5, r6
 800b118:	bfa8      	it	ge
 800b11a:	2510      	movge	r5, #16
 800b11c:	f7f5 fa22 	bl	8000564 <__aeabi_ui2d>
 800b120:	2e09      	cmp	r6, #9
 800b122:	4680      	mov	r8, r0
 800b124:	4689      	mov	r9, r1
 800b126:	dd13      	ble.n	800b150 <_strtod_l+0x3d8>
 800b128:	4b76      	ldr	r3, [pc, #472]	; (800b304 <_strtod_l+0x58c>)
 800b12a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b12e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b132:	f7f5 fa91 	bl	8000658 <__aeabi_dmul>
 800b136:	4680      	mov	r8, r0
 800b138:	4650      	mov	r0, sl
 800b13a:	4689      	mov	r9, r1
 800b13c:	f7f5 fa12 	bl	8000564 <__aeabi_ui2d>
 800b140:	4602      	mov	r2, r0
 800b142:	460b      	mov	r3, r1
 800b144:	4640      	mov	r0, r8
 800b146:	4649      	mov	r1, r9
 800b148:	f7f5 f8d0 	bl	80002ec <__adddf3>
 800b14c:	4680      	mov	r8, r0
 800b14e:	4689      	mov	r9, r1
 800b150:	2e0f      	cmp	r6, #15
 800b152:	dc38      	bgt.n	800b1c6 <_strtod_l+0x44e>
 800b154:	9b08      	ldr	r3, [sp, #32]
 800b156:	2b00      	cmp	r3, #0
 800b158:	f43f ae49 	beq.w	800adee <_strtod_l+0x76>
 800b15c:	dd24      	ble.n	800b1a8 <_strtod_l+0x430>
 800b15e:	2b16      	cmp	r3, #22
 800b160:	dc0b      	bgt.n	800b17a <_strtod_l+0x402>
 800b162:	4968      	ldr	r1, [pc, #416]	; (800b304 <_strtod_l+0x58c>)
 800b164:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b16c:	4642      	mov	r2, r8
 800b16e:	464b      	mov	r3, r9
 800b170:	f7f5 fa72 	bl	8000658 <__aeabi_dmul>
 800b174:	4680      	mov	r8, r0
 800b176:	4689      	mov	r9, r1
 800b178:	e639      	b.n	800adee <_strtod_l+0x76>
 800b17a:	9a08      	ldr	r2, [sp, #32]
 800b17c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b180:	4293      	cmp	r3, r2
 800b182:	db20      	blt.n	800b1c6 <_strtod_l+0x44e>
 800b184:	4c5f      	ldr	r4, [pc, #380]	; (800b304 <_strtod_l+0x58c>)
 800b186:	f1c6 060f 	rsb	r6, r6, #15
 800b18a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b18e:	4642      	mov	r2, r8
 800b190:	464b      	mov	r3, r9
 800b192:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b196:	f7f5 fa5f 	bl	8000658 <__aeabi_dmul>
 800b19a:	9b08      	ldr	r3, [sp, #32]
 800b19c:	1b9e      	subs	r6, r3, r6
 800b19e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b1a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b1a6:	e7e3      	b.n	800b170 <_strtod_l+0x3f8>
 800b1a8:	9b08      	ldr	r3, [sp, #32]
 800b1aa:	3316      	adds	r3, #22
 800b1ac:	db0b      	blt.n	800b1c6 <_strtod_l+0x44e>
 800b1ae:	9b05      	ldr	r3, [sp, #20]
 800b1b0:	1bdf      	subs	r7, r3, r7
 800b1b2:	4b54      	ldr	r3, [pc, #336]	; (800b304 <_strtod_l+0x58c>)
 800b1b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b1b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1bc:	4640      	mov	r0, r8
 800b1be:	4649      	mov	r1, r9
 800b1c0:	f7f5 fb74 	bl	80008ac <__aeabi_ddiv>
 800b1c4:	e7d6      	b.n	800b174 <_strtod_l+0x3fc>
 800b1c6:	9b08      	ldr	r3, [sp, #32]
 800b1c8:	1b75      	subs	r5, r6, r5
 800b1ca:	441d      	add	r5, r3
 800b1cc:	2d00      	cmp	r5, #0
 800b1ce:	dd70      	ble.n	800b2b2 <_strtod_l+0x53a>
 800b1d0:	f015 030f 	ands.w	r3, r5, #15
 800b1d4:	d00a      	beq.n	800b1ec <_strtod_l+0x474>
 800b1d6:	494b      	ldr	r1, [pc, #300]	; (800b304 <_strtod_l+0x58c>)
 800b1d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b1dc:	4642      	mov	r2, r8
 800b1de:	464b      	mov	r3, r9
 800b1e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1e4:	f7f5 fa38 	bl	8000658 <__aeabi_dmul>
 800b1e8:	4680      	mov	r8, r0
 800b1ea:	4689      	mov	r9, r1
 800b1ec:	f035 050f 	bics.w	r5, r5, #15
 800b1f0:	d04d      	beq.n	800b28e <_strtod_l+0x516>
 800b1f2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b1f6:	dd22      	ble.n	800b23e <_strtod_l+0x4c6>
 800b1f8:	2500      	movs	r5, #0
 800b1fa:	46ab      	mov	fp, r5
 800b1fc:	9509      	str	r5, [sp, #36]	; 0x24
 800b1fe:	9505      	str	r5, [sp, #20]
 800b200:	2322      	movs	r3, #34	; 0x22
 800b202:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b30c <_strtod_l+0x594>
 800b206:	6023      	str	r3, [r4, #0]
 800b208:	f04f 0800 	mov.w	r8, #0
 800b20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b20e:	2b00      	cmp	r3, #0
 800b210:	f43f aded 	beq.w	800adee <_strtod_l+0x76>
 800b214:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b216:	4620      	mov	r0, r4
 800b218:	f7ff f924 	bl	800a464 <_Bfree>
 800b21c:	9905      	ldr	r1, [sp, #20]
 800b21e:	4620      	mov	r0, r4
 800b220:	f7ff f920 	bl	800a464 <_Bfree>
 800b224:	4659      	mov	r1, fp
 800b226:	4620      	mov	r0, r4
 800b228:	f7ff f91c 	bl	800a464 <_Bfree>
 800b22c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b22e:	4620      	mov	r0, r4
 800b230:	f7ff f918 	bl	800a464 <_Bfree>
 800b234:	4629      	mov	r1, r5
 800b236:	4620      	mov	r0, r4
 800b238:	f7ff f914 	bl	800a464 <_Bfree>
 800b23c:	e5d7      	b.n	800adee <_strtod_l+0x76>
 800b23e:	4b32      	ldr	r3, [pc, #200]	; (800b308 <_strtod_l+0x590>)
 800b240:	9304      	str	r3, [sp, #16]
 800b242:	2300      	movs	r3, #0
 800b244:	112d      	asrs	r5, r5, #4
 800b246:	4640      	mov	r0, r8
 800b248:	4649      	mov	r1, r9
 800b24a:	469a      	mov	sl, r3
 800b24c:	2d01      	cmp	r5, #1
 800b24e:	dc21      	bgt.n	800b294 <_strtod_l+0x51c>
 800b250:	b10b      	cbz	r3, 800b256 <_strtod_l+0x4de>
 800b252:	4680      	mov	r8, r0
 800b254:	4689      	mov	r9, r1
 800b256:	492c      	ldr	r1, [pc, #176]	; (800b308 <_strtod_l+0x590>)
 800b258:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b25c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b260:	4642      	mov	r2, r8
 800b262:	464b      	mov	r3, r9
 800b264:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b268:	f7f5 f9f6 	bl	8000658 <__aeabi_dmul>
 800b26c:	4b27      	ldr	r3, [pc, #156]	; (800b30c <_strtod_l+0x594>)
 800b26e:	460a      	mov	r2, r1
 800b270:	400b      	ands	r3, r1
 800b272:	4927      	ldr	r1, [pc, #156]	; (800b310 <_strtod_l+0x598>)
 800b274:	428b      	cmp	r3, r1
 800b276:	4680      	mov	r8, r0
 800b278:	d8be      	bhi.n	800b1f8 <_strtod_l+0x480>
 800b27a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b27e:	428b      	cmp	r3, r1
 800b280:	bf86      	itte	hi
 800b282:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b314 <_strtod_l+0x59c>
 800b286:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800b28a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b28e:	2300      	movs	r3, #0
 800b290:	9304      	str	r3, [sp, #16]
 800b292:	e07b      	b.n	800b38c <_strtod_l+0x614>
 800b294:	07ea      	lsls	r2, r5, #31
 800b296:	d505      	bpl.n	800b2a4 <_strtod_l+0x52c>
 800b298:	9b04      	ldr	r3, [sp, #16]
 800b29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29e:	f7f5 f9db 	bl	8000658 <__aeabi_dmul>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	9a04      	ldr	r2, [sp, #16]
 800b2a6:	3208      	adds	r2, #8
 800b2a8:	f10a 0a01 	add.w	sl, sl, #1
 800b2ac:	106d      	asrs	r5, r5, #1
 800b2ae:	9204      	str	r2, [sp, #16]
 800b2b0:	e7cc      	b.n	800b24c <_strtod_l+0x4d4>
 800b2b2:	d0ec      	beq.n	800b28e <_strtod_l+0x516>
 800b2b4:	426d      	negs	r5, r5
 800b2b6:	f015 020f 	ands.w	r2, r5, #15
 800b2ba:	d00a      	beq.n	800b2d2 <_strtod_l+0x55a>
 800b2bc:	4b11      	ldr	r3, [pc, #68]	; (800b304 <_strtod_l+0x58c>)
 800b2be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2c2:	4640      	mov	r0, r8
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ca:	f7f5 faef 	bl	80008ac <__aeabi_ddiv>
 800b2ce:	4680      	mov	r8, r0
 800b2d0:	4689      	mov	r9, r1
 800b2d2:	112d      	asrs	r5, r5, #4
 800b2d4:	d0db      	beq.n	800b28e <_strtod_l+0x516>
 800b2d6:	2d1f      	cmp	r5, #31
 800b2d8:	dd1e      	ble.n	800b318 <_strtod_l+0x5a0>
 800b2da:	2500      	movs	r5, #0
 800b2dc:	46ab      	mov	fp, r5
 800b2de:	9509      	str	r5, [sp, #36]	; 0x24
 800b2e0:	9505      	str	r5, [sp, #20]
 800b2e2:	2322      	movs	r3, #34	; 0x22
 800b2e4:	f04f 0800 	mov.w	r8, #0
 800b2e8:	f04f 0900 	mov.w	r9, #0
 800b2ec:	6023      	str	r3, [r4, #0]
 800b2ee:	e78d      	b.n	800b20c <_strtod_l+0x494>
 800b2f0:	0800d15b 	.word	0x0800d15b
 800b2f4:	0800d384 	.word	0x0800d384
 800b2f8:	0800d153 	.word	0x0800d153
 800b2fc:	0800d18a 	.word	0x0800d18a
 800b300:	0800d515 	.word	0x0800d515
 800b304:	0800d298 	.word	0x0800d298
 800b308:	0800d270 	.word	0x0800d270
 800b30c:	7ff00000 	.word	0x7ff00000
 800b310:	7ca00000 	.word	0x7ca00000
 800b314:	7fefffff 	.word	0x7fefffff
 800b318:	f015 0310 	ands.w	r3, r5, #16
 800b31c:	bf18      	it	ne
 800b31e:	236a      	movne	r3, #106	; 0x6a
 800b320:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b6c4 <_strtod_l+0x94c>
 800b324:	9304      	str	r3, [sp, #16]
 800b326:	4640      	mov	r0, r8
 800b328:	4649      	mov	r1, r9
 800b32a:	2300      	movs	r3, #0
 800b32c:	07ea      	lsls	r2, r5, #31
 800b32e:	d504      	bpl.n	800b33a <_strtod_l+0x5c2>
 800b330:	e9da 2300 	ldrd	r2, r3, [sl]
 800b334:	f7f5 f990 	bl	8000658 <__aeabi_dmul>
 800b338:	2301      	movs	r3, #1
 800b33a:	106d      	asrs	r5, r5, #1
 800b33c:	f10a 0a08 	add.w	sl, sl, #8
 800b340:	d1f4      	bne.n	800b32c <_strtod_l+0x5b4>
 800b342:	b10b      	cbz	r3, 800b348 <_strtod_l+0x5d0>
 800b344:	4680      	mov	r8, r0
 800b346:	4689      	mov	r9, r1
 800b348:	9b04      	ldr	r3, [sp, #16]
 800b34a:	b1bb      	cbz	r3, 800b37c <_strtod_l+0x604>
 800b34c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b350:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b354:	2b00      	cmp	r3, #0
 800b356:	4649      	mov	r1, r9
 800b358:	dd10      	ble.n	800b37c <_strtod_l+0x604>
 800b35a:	2b1f      	cmp	r3, #31
 800b35c:	f340 811e 	ble.w	800b59c <_strtod_l+0x824>
 800b360:	2b34      	cmp	r3, #52	; 0x34
 800b362:	bfde      	ittt	le
 800b364:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800b368:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b36c:	4093      	lslle	r3, r2
 800b36e:	f04f 0800 	mov.w	r8, #0
 800b372:	bfcc      	ite	gt
 800b374:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b378:	ea03 0901 	andle.w	r9, r3, r1
 800b37c:	2200      	movs	r2, #0
 800b37e:	2300      	movs	r3, #0
 800b380:	4640      	mov	r0, r8
 800b382:	4649      	mov	r1, r9
 800b384:	f7f5 fbd0 	bl	8000b28 <__aeabi_dcmpeq>
 800b388:	2800      	cmp	r0, #0
 800b38a:	d1a6      	bne.n	800b2da <_strtod_l+0x562>
 800b38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b38e:	9300      	str	r3, [sp, #0]
 800b390:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b392:	4633      	mov	r3, r6
 800b394:	465a      	mov	r2, fp
 800b396:	4620      	mov	r0, r4
 800b398:	f7ff f8cc 	bl	800a534 <__s2b>
 800b39c:	9009      	str	r0, [sp, #36]	; 0x24
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	f43f af2a 	beq.w	800b1f8 <_strtod_l+0x480>
 800b3a4:	9a08      	ldr	r2, [sp, #32]
 800b3a6:	9b05      	ldr	r3, [sp, #20]
 800b3a8:	2a00      	cmp	r2, #0
 800b3aa:	eba3 0307 	sub.w	r3, r3, r7
 800b3ae:	bfa8      	it	ge
 800b3b0:	2300      	movge	r3, #0
 800b3b2:	930c      	str	r3, [sp, #48]	; 0x30
 800b3b4:	2500      	movs	r5, #0
 800b3b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b3ba:	9312      	str	r3, [sp, #72]	; 0x48
 800b3bc:	46ab      	mov	fp, r5
 800b3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	6859      	ldr	r1, [r3, #4]
 800b3c4:	f7ff f80e 	bl	800a3e4 <_Balloc>
 800b3c8:	9005      	str	r0, [sp, #20]
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	f43f af18 	beq.w	800b200 <_strtod_l+0x488>
 800b3d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3d2:	691a      	ldr	r2, [r3, #16]
 800b3d4:	3202      	adds	r2, #2
 800b3d6:	f103 010c 	add.w	r1, r3, #12
 800b3da:	0092      	lsls	r2, r2, #2
 800b3dc:	300c      	adds	r0, #12
 800b3de:	f000 ff4f 	bl	800c280 <memcpy>
 800b3e2:	ec49 8b10 	vmov	d0, r8, r9
 800b3e6:	aa18      	add	r2, sp, #96	; 0x60
 800b3e8:	a917      	add	r1, sp, #92	; 0x5c
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f7ff fbd6 	bl	800ab9c <__d2b>
 800b3f0:	ec49 8b18 	vmov	d8, r8, r9
 800b3f4:	9016      	str	r0, [sp, #88]	; 0x58
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	f43f af02 	beq.w	800b200 <_strtod_l+0x488>
 800b3fc:	2101      	movs	r1, #1
 800b3fe:	4620      	mov	r0, r4
 800b400:	f7ff f930 	bl	800a664 <__i2b>
 800b404:	4683      	mov	fp, r0
 800b406:	2800      	cmp	r0, #0
 800b408:	f43f aefa 	beq.w	800b200 <_strtod_l+0x488>
 800b40c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b40e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b410:	2e00      	cmp	r6, #0
 800b412:	bfab      	itete	ge
 800b414:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b416:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b418:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b41a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b41e:	bfac      	ite	ge
 800b420:	eb06 0a03 	addge.w	sl, r6, r3
 800b424:	1b9f      	sublt	r7, r3, r6
 800b426:	9b04      	ldr	r3, [sp, #16]
 800b428:	1af6      	subs	r6, r6, r3
 800b42a:	4416      	add	r6, r2
 800b42c:	4ba0      	ldr	r3, [pc, #640]	; (800b6b0 <_strtod_l+0x938>)
 800b42e:	3e01      	subs	r6, #1
 800b430:	429e      	cmp	r6, r3
 800b432:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b436:	f280 80c4 	bge.w	800b5c2 <_strtod_l+0x84a>
 800b43a:	1b9b      	subs	r3, r3, r6
 800b43c:	2b1f      	cmp	r3, #31
 800b43e:	eba2 0203 	sub.w	r2, r2, r3
 800b442:	f04f 0101 	mov.w	r1, #1
 800b446:	f300 80b0 	bgt.w	800b5aa <_strtod_l+0x832>
 800b44a:	fa01 f303 	lsl.w	r3, r1, r3
 800b44e:	930e      	str	r3, [sp, #56]	; 0x38
 800b450:	2300      	movs	r3, #0
 800b452:	930d      	str	r3, [sp, #52]	; 0x34
 800b454:	eb0a 0602 	add.w	r6, sl, r2
 800b458:	9b04      	ldr	r3, [sp, #16]
 800b45a:	45b2      	cmp	sl, r6
 800b45c:	4417      	add	r7, r2
 800b45e:	441f      	add	r7, r3
 800b460:	4653      	mov	r3, sl
 800b462:	bfa8      	it	ge
 800b464:	4633      	movge	r3, r6
 800b466:	42bb      	cmp	r3, r7
 800b468:	bfa8      	it	ge
 800b46a:	463b      	movge	r3, r7
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	bfc2      	ittt	gt
 800b470:	1af6      	subgt	r6, r6, r3
 800b472:	1aff      	subgt	r7, r7, r3
 800b474:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	dd17      	ble.n	800b4ae <_strtod_l+0x736>
 800b47e:	4659      	mov	r1, fp
 800b480:	461a      	mov	r2, r3
 800b482:	4620      	mov	r0, r4
 800b484:	f7ff f9ae 	bl	800a7e4 <__pow5mult>
 800b488:	4683      	mov	fp, r0
 800b48a:	2800      	cmp	r0, #0
 800b48c:	f43f aeb8 	beq.w	800b200 <_strtod_l+0x488>
 800b490:	4601      	mov	r1, r0
 800b492:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b494:	4620      	mov	r0, r4
 800b496:	f7ff f8fb 	bl	800a690 <__multiply>
 800b49a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b49c:	2800      	cmp	r0, #0
 800b49e:	f43f aeaf 	beq.w	800b200 <_strtod_l+0x488>
 800b4a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	f7fe ffdd 	bl	800a464 <_Bfree>
 800b4aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4ac:	9316      	str	r3, [sp, #88]	; 0x58
 800b4ae:	2e00      	cmp	r6, #0
 800b4b0:	f300 808c 	bgt.w	800b5cc <_strtod_l+0x854>
 800b4b4:	9b08      	ldr	r3, [sp, #32]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	dd08      	ble.n	800b4cc <_strtod_l+0x754>
 800b4ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4bc:	9905      	ldr	r1, [sp, #20]
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f7ff f990 	bl	800a7e4 <__pow5mult>
 800b4c4:	9005      	str	r0, [sp, #20]
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	f43f ae9a 	beq.w	800b200 <_strtod_l+0x488>
 800b4cc:	2f00      	cmp	r7, #0
 800b4ce:	dd08      	ble.n	800b4e2 <_strtod_l+0x76a>
 800b4d0:	9905      	ldr	r1, [sp, #20]
 800b4d2:	463a      	mov	r2, r7
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	f7ff f9df 	bl	800a898 <__lshift>
 800b4da:	9005      	str	r0, [sp, #20]
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	f43f ae8f 	beq.w	800b200 <_strtod_l+0x488>
 800b4e2:	f1ba 0f00 	cmp.w	sl, #0
 800b4e6:	dd08      	ble.n	800b4fa <_strtod_l+0x782>
 800b4e8:	4659      	mov	r1, fp
 800b4ea:	4652      	mov	r2, sl
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f7ff f9d3 	bl	800a898 <__lshift>
 800b4f2:	4683      	mov	fp, r0
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	f43f ae83 	beq.w	800b200 <_strtod_l+0x488>
 800b4fa:	9a05      	ldr	r2, [sp, #20]
 800b4fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b4fe:	4620      	mov	r0, r4
 800b500:	f7ff fa52 	bl	800a9a8 <__mdiff>
 800b504:	4605      	mov	r5, r0
 800b506:	2800      	cmp	r0, #0
 800b508:	f43f ae7a 	beq.w	800b200 <_strtod_l+0x488>
 800b50c:	68c3      	ldr	r3, [r0, #12]
 800b50e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b510:	2300      	movs	r3, #0
 800b512:	60c3      	str	r3, [r0, #12]
 800b514:	4659      	mov	r1, fp
 800b516:	f7ff fa2b 	bl	800a970 <__mcmp>
 800b51a:	2800      	cmp	r0, #0
 800b51c:	da60      	bge.n	800b5e0 <_strtod_l+0x868>
 800b51e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b520:	ea53 0308 	orrs.w	r3, r3, r8
 800b524:	f040 8084 	bne.w	800b630 <_strtod_l+0x8b8>
 800b528:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d17f      	bne.n	800b630 <_strtod_l+0x8b8>
 800b530:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b534:	0d1b      	lsrs	r3, r3, #20
 800b536:	051b      	lsls	r3, r3, #20
 800b538:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b53c:	d978      	bls.n	800b630 <_strtod_l+0x8b8>
 800b53e:	696b      	ldr	r3, [r5, #20]
 800b540:	b913      	cbnz	r3, 800b548 <_strtod_l+0x7d0>
 800b542:	692b      	ldr	r3, [r5, #16]
 800b544:	2b01      	cmp	r3, #1
 800b546:	dd73      	ble.n	800b630 <_strtod_l+0x8b8>
 800b548:	4629      	mov	r1, r5
 800b54a:	2201      	movs	r2, #1
 800b54c:	4620      	mov	r0, r4
 800b54e:	f7ff f9a3 	bl	800a898 <__lshift>
 800b552:	4659      	mov	r1, fp
 800b554:	4605      	mov	r5, r0
 800b556:	f7ff fa0b 	bl	800a970 <__mcmp>
 800b55a:	2800      	cmp	r0, #0
 800b55c:	dd68      	ble.n	800b630 <_strtod_l+0x8b8>
 800b55e:	9904      	ldr	r1, [sp, #16]
 800b560:	4a54      	ldr	r2, [pc, #336]	; (800b6b4 <_strtod_l+0x93c>)
 800b562:	464b      	mov	r3, r9
 800b564:	2900      	cmp	r1, #0
 800b566:	f000 8084 	beq.w	800b672 <_strtod_l+0x8fa>
 800b56a:	ea02 0109 	and.w	r1, r2, r9
 800b56e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b572:	dc7e      	bgt.n	800b672 <_strtod_l+0x8fa>
 800b574:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b578:	f77f aeb3 	ble.w	800b2e2 <_strtod_l+0x56a>
 800b57c:	4b4e      	ldr	r3, [pc, #312]	; (800b6b8 <_strtod_l+0x940>)
 800b57e:	4640      	mov	r0, r8
 800b580:	4649      	mov	r1, r9
 800b582:	2200      	movs	r2, #0
 800b584:	f7f5 f868 	bl	8000658 <__aeabi_dmul>
 800b588:	4b4a      	ldr	r3, [pc, #296]	; (800b6b4 <_strtod_l+0x93c>)
 800b58a:	400b      	ands	r3, r1
 800b58c:	4680      	mov	r8, r0
 800b58e:	4689      	mov	r9, r1
 800b590:	2b00      	cmp	r3, #0
 800b592:	f47f ae3f 	bne.w	800b214 <_strtod_l+0x49c>
 800b596:	2322      	movs	r3, #34	; 0x22
 800b598:	6023      	str	r3, [r4, #0]
 800b59a:	e63b      	b.n	800b214 <_strtod_l+0x49c>
 800b59c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a4:	ea03 0808 	and.w	r8, r3, r8
 800b5a8:	e6e8      	b.n	800b37c <_strtod_l+0x604>
 800b5aa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b5ae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b5b2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b5b6:	36e2      	adds	r6, #226	; 0xe2
 800b5b8:	fa01 f306 	lsl.w	r3, r1, r6
 800b5bc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b5c0:	e748      	b.n	800b454 <_strtod_l+0x6dc>
 800b5c2:	2100      	movs	r1, #0
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b5ca:	e743      	b.n	800b454 <_strtod_l+0x6dc>
 800b5cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b5ce:	4632      	mov	r2, r6
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f7ff f961 	bl	800a898 <__lshift>
 800b5d6:	9016      	str	r0, [sp, #88]	; 0x58
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	f47f af6b 	bne.w	800b4b4 <_strtod_l+0x73c>
 800b5de:	e60f      	b.n	800b200 <_strtod_l+0x488>
 800b5e0:	46ca      	mov	sl, r9
 800b5e2:	d171      	bne.n	800b6c8 <_strtod_l+0x950>
 800b5e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5ea:	b352      	cbz	r2, 800b642 <_strtod_l+0x8ca>
 800b5ec:	4a33      	ldr	r2, [pc, #204]	; (800b6bc <_strtod_l+0x944>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d12a      	bne.n	800b648 <_strtod_l+0x8d0>
 800b5f2:	9b04      	ldr	r3, [sp, #16]
 800b5f4:	4641      	mov	r1, r8
 800b5f6:	b1fb      	cbz	r3, 800b638 <_strtod_l+0x8c0>
 800b5f8:	4b2e      	ldr	r3, [pc, #184]	; (800b6b4 <_strtod_l+0x93c>)
 800b5fa:	ea09 0303 	and.w	r3, r9, r3
 800b5fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b602:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b606:	d81a      	bhi.n	800b63e <_strtod_l+0x8c6>
 800b608:	0d1b      	lsrs	r3, r3, #20
 800b60a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b60e:	fa02 f303 	lsl.w	r3, r2, r3
 800b612:	4299      	cmp	r1, r3
 800b614:	d118      	bne.n	800b648 <_strtod_l+0x8d0>
 800b616:	4b2a      	ldr	r3, [pc, #168]	; (800b6c0 <_strtod_l+0x948>)
 800b618:	459a      	cmp	sl, r3
 800b61a:	d102      	bne.n	800b622 <_strtod_l+0x8aa>
 800b61c:	3101      	adds	r1, #1
 800b61e:	f43f adef 	beq.w	800b200 <_strtod_l+0x488>
 800b622:	4b24      	ldr	r3, [pc, #144]	; (800b6b4 <_strtod_l+0x93c>)
 800b624:	ea0a 0303 	and.w	r3, sl, r3
 800b628:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b62c:	f04f 0800 	mov.w	r8, #0
 800b630:	9b04      	ldr	r3, [sp, #16]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1a2      	bne.n	800b57c <_strtod_l+0x804>
 800b636:	e5ed      	b.n	800b214 <_strtod_l+0x49c>
 800b638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b63c:	e7e9      	b.n	800b612 <_strtod_l+0x89a>
 800b63e:	4613      	mov	r3, r2
 800b640:	e7e7      	b.n	800b612 <_strtod_l+0x89a>
 800b642:	ea53 0308 	orrs.w	r3, r3, r8
 800b646:	d08a      	beq.n	800b55e <_strtod_l+0x7e6>
 800b648:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b64a:	b1e3      	cbz	r3, 800b686 <_strtod_l+0x90e>
 800b64c:	ea13 0f0a 	tst.w	r3, sl
 800b650:	d0ee      	beq.n	800b630 <_strtod_l+0x8b8>
 800b652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b654:	9a04      	ldr	r2, [sp, #16]
 800b656:	4640      	mov	r0, r8
 800b658:	4649      	mov	r1, r9
 800b65a:	b1c3      	cbz	r3, 800b68e <_strtod_l+0x916>
 800b65c:	f7ff fb6f 	bl	800ad3e <sulp>
 800b660:	4602      	mov	r2, r0
 800b662:	460b      	mov	r3, r1
 800b664:	ec51 0b18 	vmov	r0, r1, d8
 800b668:	f7f4 fe40 	bl	80002ec <__adddf3>
 800b66c:	4680      	mov	r8, r0
 800b66e:	4689      	mov	r9, r1
 800b670:	e7de      	b.n	800b630 <_strtod_l+0x8b8>
 800b672:	4013      	ands	r3, r2
 800b674:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b678:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b67c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b680:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b684:	e7d4      	b.n	800b630 <_strtod_l+0x8b8>
 800b686:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b688:	ea13 0f08 	tst.w	r3, r8
 800b68c:	e7e0      	b.n	800b650 <_strtod_l+0x8d8>
 800b68e:	f7ff fb56 	bl	800ad3e <sulp>
 800b692:	4602      	mov	r2, r0
 800b694:	460b      	mov	r3, r1
 800b696:	ec51 0b18 	vmov	r0, r1, d8
 800b69a:	f7f4 fe25 	bl	80002e8 <__aeabi_dsub>
 800b69e:	2200      	movs	r2, #0
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4680      	mov	r8, r0
 800b6a4:	4689      	mov	r9, r1
 800b6a6:	f7f5 fa3f 	bl	8000b28 <__aeabi_dcmpeq>
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	d0c0      	beq.n	800b630 <_strtod_l+0x8b8>
 800b6ae:	e618      	b.n	800b2e2 <_strtod_l+0x56a>
 800b6b0:	fffffc02 	.word	0xfffffc02
 800b6b4:	7ff00000 	.word	0x7ff00000
 800b6b8:	39500000 	.word	0x39500000
 800b6bc:	000fffff 	.word	0x000fffff
 800b6c0:	7fefffff 	.word	0x7fefffff
 800b6c4:	0800d398 	.word	0x0800d398
 800b6c8:	4659      	mov	r1, fp
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	f7ff fac0 	bl	800ac50 <__ratio>
 800b6d0:	ec57 6b10 	vmov	r6, r7, d0
 800b6d4:	ee10 0a10 	vmov	r0, s0
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6de:	4639      	mov	r1, r7
 800b6e0:	f7f5 fa36 	bl	8000b50 <__aeabi_dcmple>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	d071      	beq.n	800b7cc <_strtod_l+0xa54>
 800b6e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d17c      	bne.n	800b7e8 <_strtod_l+0xa70>
 800b6ee:	f1b8 0f00 	cmp.w	r8, #0
 800b6f2:	d15a      	bne.n	800b7aa <_strtod_l+0xa32>
 800b6f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d15d      	bne.n	800b7b8 <_strtod_l+0xa40>
 800b6fc:	4b90      	ldr	r3, [pc, #576]	; (800b940 <_strtod_l+0xbc8>)
 800b6fe:	2200      	movs	r2, #0
 800b700:	4630      	mov	r0, r6
 800b702:	4639      	mov	r1, r7
 800b704:	f7f5 fa1a 	bl	8000b3c <__aeabi_dcmplt>
 800b708:	2800      	cmp	r0, #0
 800b70a:	d15c      	bne.n	800b7c6 <_strtod_l+0xa4e>
 800b70c:	4630      	mov	r0, r6
 800b70e:	4639      	mov	r1, r7
 800b710:	4b8c      	ldr	r3, [pc, #560]	; (800b944 <_strtod_l+0xbcc>)
 800b712:	2200      	movs	r2, #0
 800b714:	f7f4 ffa0 	bl	8000658 <__aeabi_dmul>
 800b718:	4606      	mov	r6, r0
 800b71a:	460f      	mov	r7, r1
 800b71c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b720:	9606      	str	r6, [sp, #24]
 800b722:	9307      	str	r3, [sp, #28]
 800b724:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b728:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b72c:	4b86      	ldr	r3, [pc, #536]	; (800b948 <_strtod_l+0xbd0>)
 800b72e:	ea0a 0303 	and.w	r3, sl, r3
 800b732:	930d      	str	r3, [sp, #52]	; 0x34
 800b734:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b736:	4b85      	ldr	r3, [pc, #532]	; (800b94c <_strtod_l+0xbd4>)
 800b738:	429a      	cmp	r2, r3
 800b73a:	f040 8090 	bne.w	800b85e <_strtod_l+0xae6>
 800b73e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b742:	ec49 8b10 	vmov	d0, r8, r9
 800b746:	f7ff f9b9 	bl	800aabc <__ulp>
 800b74a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b74e:	ec51 0b10 	vmov	r0, r1, d0
 800b752:	f7f4 ff81 	bl	8000658 <__aeabi_dmul>
 800b756:	4642      	mov	r2, r8
 800b758:	464b      	mov	r3, r9
 800b75a:	f7f4 fdc7 	bl	80002ec <__adddf3>
 800b75e:	460b      	mov	r3, r1
 800b760:	4979      	ldr	r1, [pc, #484]	; (800b948 <_strtod_l+0xbd0>)
 800b762:	4a7b      	ldr	r2, [pc, #492]	; (800b950 <_strtod_l+0xbd8>)
 800b764:	4019      	ands	r1, r3
 800b766:	4291      	cmp	r1, r2
 800b768:	4680      	mov	r8, r0
 800b76a:	d944      	bls.n	800b7f6 <_strtod_l+0xa7e>
 800b76c:	ee18 2a90 	vmov	r2, s17
 800b770:	4b78      	ldr	r3, [pc, #480]	; (800b954 <_strtod_l+0xbdc>)
 800b772:	429a      	cmp	r2, r3
 800b774:	d104      	bne.n	800b780 <_strtod_l+0xa08>
 800b776:	ee18 3a10 	vmov	r3, s16
 800b77a:	3301      	adds	r3, #1
 800b77c:	f43f ad40 	beq.w	800b200 <_strtod_l+0x488>
 800b780:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b954 <_strtod_l+0xbdc>
 800b784:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b788:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b78a:	4620      	mov	r0, r4
 800b78c:	f7fe fe6a 	bl	800a464 <_Bfree>
 800b790:	9905      	ldr	r1, [sp, #20]
 800b792:	4620      	mov	r0, r4
 800b794:	f7fe fe66 	bl	800a464 <_Bfree>
 800b798:	4659      	mov	r1, fp
 800b79a:	4620      	mov	r0, r4
 800b79c:	f7fe fe62 	bl	800a464 <_Bfree>
 800b7a0:	4629      	mov	r1, r5
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f7fe fe5e 	bl	800a464 <_Bfree>
 800b7a8:	e609      	b.n	800b3be <_strtod_l+0x646>
 800b7aa:	f1b8 0f01 	cmp.w	r8, #1
 800b7ae:	d103      	bne.n	800b7b8 <_strtod_l+0xa40>
 800b7b0:	f1b9 0f00 	cmp.w	r9, #0
 800b7b4:	f43f ad95 	beq.w	800b2e2 <_strtod_l+0x56a>
 800b7b8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b910 <_strtod_l+0xb98>
 800b7bc:	4f60      	ldr	r7, [pc, #384]	; (800b940 <_strtod_l+0xbc8>)
 800b7be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b7c2:	2600      	movs	r6, #0
 800b7c4:	e7ae      	b.n	800b724 <_strtod_l+0x9ac>
 800b7c6:	4f5f      	ldr	r7, [pc, #380]	; (800b944 <_strtod_l+0xbcc>)
 800b7c8:	2600      	movs	r6, #0
 800b7ca:	e7a7      	b.n	800b71c <_strtod_l+0x9a4>
 800b7cc:	4b5d      	ldr	r3, [pc, #372]	; (800b944 <_strtod_l+0xbcc>)
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	4639      	mov	r1, r7
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f7f4 ff40 	bl	8000658 <__aeabi_dmul>
 800b7d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7da:	4606      	mov	r6, r0
 800b7dc:	460f      	mov	r7, r1
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d09c      	beq.n	800b71c <_strtod_l+0x9a4>
 800b7e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b7e6:	e79d      	b.n	800b724 <_strtod_l+0x9ac>
 800b7e8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b918 <_strtod_l+0xba0>
 800b7ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b7f0:	ec57 6b17 	vmov	r6, r7, d7
 800b7f4:	e796      	b.n	800b724 <_strtod_l+0x9ac>
 800b7f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b7fa:	9b04      	ldr	r3, [sp, #16]
 800b7fc:	46ca      	mov	sl, r9
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d1c2      	bne.n	800b788 <_strtod_l+0xa10>
 800b802:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b806:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b808:	0d1b      	lsrs	r3, r3, #20
 800b80a:	051b      	lsls	r3, r3, #20
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d1bb      	bne.n	800b788 <_strtod_l+0xa10>
 800b810:	4630      	mov	r0, r6
 800b812:	4639      	mov	r1, r7
 800b814:	f7f5 fa80 	bl	8000d18 <__aeabi_d2lz>
 800b818:	f7f4 fef0 	bl	80005fc <__aeabi_l2d>
 800b81c:	4602      	mov	r2, r0
 800b81e:	460b      	mov	r3, r1
 800b820:	4630      	mov	r0, r6
 800b822:	4639      	mov	r1, r7
 800b824:	f7f4 fd60 	bl	80002e8 <__aeabi_dsub>
 800b828:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b82a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b82e:	ea43 0308 	orr.w	r3, r3, r8
 800b832:	4313      	orrs	r3, r2
 800b834:	4606      	mov	r6, r0
 800b836:	460f      	mov	r7, r1
 800b838:	d054      	beq.n	800b8e4 <_strtod_l+0xb6c>
 800b83a:	a339      	add	r3, pc, #228	; (adr r3, 800b920 <_strtod_l+0xba8>)
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f7f5 f97c 	bl	8000b3c <__aeabi_dcmplt>
 800b844:	2800      	cmp	r0, #0
 800b846:	f47f ace5 	bne.w	800b214 <_strtod_l+0x49c>
 800b84a:	a337      	add	r3, pc, #220	; (adr r3, 800b928 <_strtod_l+0xbb0>)
 800b84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b850:	4630      	mov	r0, r6
 800b852:	4639      	mov	r1, r7
 800b854:	f7f5 f990 	bl	8000b78 <__aeabi_dcmpgt>
 800b858:	2800      	cmp	r0, #0
 800b85a:	d095      	beq.n	800b788 <_strtod_l+0xa10>
 800b85c:	e4da      	b.n	800b214 <_strtod_l+0x49c>
 800b85e:	9b04      	ldr	r3, [sp, #16]
 800b860:	b333      	cbz	r3, 800b8b0 <_strtod_l+0xb38>
 800b862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b864:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b868:	d822      	bhi.n	800b8b0 <_strtod_l+0xb38>
 800b86a:	a331      	add	r3, pc, #196	; (adr r3, 800b930 <_strtod_l+0xbb8>)
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	4630      	mov	r0, r6
 800b872:	4639      	mov	r1, r7
 800b874:	f7f5 f96c 	bl	8000b50 <__aeabi_dcmple>
 800b878:	b1a0      	cbz	r0, 800b8a4 <_strtod_l+0xb2c>
 800b87a:	4639      	mov	r1, r7
 800b87c:	4630      	mov	r0, r6
 800b87e:	f7f5 f9c3 	bl	8000c08 <__aeabi_d2uiz>
 800b882:	2801      	cmp	r0, #1
 800b884:	bf38      	it	cc
 800b886:	2001      	movcc	r0, #1
 800b888:	f7f4 fe6c 	bl	8000564 <__aeabi_ui2d>
 800b88c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b88e:	4606      	mov	r6, r0
 800b890:	460f      	mov	r7, r1
 800b892:	bb23      	cbnz	r3, 800b8de <_strtod_l+0xb66>
 800b894:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b898:	9010      	str	r0, [sp, #64]	; 0x40
 800b89a:	9311      	str	r3, [sp, #68]	; 0x44
 800b89c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b8a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b8a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b8ac:	1a9b      	subs	r3, r3, r2
 800b8ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b8b4:	eeb0 0a48 	vmov.f32	s0, s16
 800b8b8:	eef0 0a68 	vmov.f32	s1, s17
 800b8bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b8c0:	f7ff f8fc 	bl	800aabc <__ulp>
 800b8c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b8c8:	ec53 2b10 	vmov	r2, r3, d0
 800b8cc:	f7f4 fec4 	bl	8000658 <__aeabi_dmul>
 800b8d0:	ec53 2b18 	vmov	r2, r3, d8
 800b8d4:	f7f4 fd0a 	bl	80002ec <__adddf3>
 800b8d8:	4680      	mov	r8, r0
 800b8da:	4689      	mov	r9, r1
 800b8dc:	e78d      	b.n	800b7fa <_strtod_l+0xa82>
 800b8de:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b8e2:	e7db      	b.n	800b89c <_strtod_l+0xb24>
 800b8e4:	a314      	add	r3, pc, #80	; (adr r3, 800b938 <_strtod_l+0xbc0>)
 800b8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ea:	f7f5 f927 	bl	8000b3c <__aeabi_dcmplt>
 800b8ee:	e7b3      	b.n	800b858 <_strtod_l+0xae0>
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	930a      	str	r3, [sp, #40]	; 0x28
 800b8f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b8f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8f8:	6013      	str	r3, [r2, #0]
 800b8fa:	f7ff ba7c 	b.w	800adf6 <_strtod_l+0x7e>
 800b8fe:	2a65      	cmp	r2, #101	; 0x65
 800b900:	f43f ab75 	beq.w	800afee <_strtod_l+0x276>
 800b904:	2a45      	cmp	r2, #69	; 0x45
 800b906:	f43f ab72 	beq.w	800afee <_strtod_l+0x276>
 800b90a:	2301      	movs	r3, #1
 800b90c:	f7ff bbaa 	b.w	800b064 <_strtod_l+0x2ec>
 800b910:	00000000 	.word	0x00000000
 800b914:	bff00000 	.word	0xbff00000
 800b918:	00000000 	.word	0x00000000
 800b91c:	3ff00000 	.word	0x3ff00000
 800b920:	94a03595 	.word	0x94a03595
 800b924:	3fdfffff 	.word	0x3fdfffff
 800b928:	35afe535 	.word	0x35afe535
 800b92c:	3fe00000 	.word	0x3fe00000
 800b930:	ffc00000 	.word	0xffc00000
 800b934:	41dfffff 	.word	0x41dfffff
 800b938:	94a03595 	.word	0x94a03595
 800b93c:	3fcfffff 	.word	0x3fcfffff
 800b940:	3ff00000 	.word	0x3ff00000
 800b944:	3fe00000 	.word	0x3fe00000
 800b948:	7ff00000 	.word	0x7ff00000
 800b94c:	7fe00000 	.word	0x7fe00000
 800b950:	7c9fffff 	.word	0x7c9fffff
 800b954:	7fefffff 	.word	0x7fefffff

0800b958 <_strtod_r>:
 800b958:	4b01      	ldr	r3, [pc, #4]	; (800b960 <_strtod_r+0x8>)
 800b95a:	f7ff ba0d 	b.w	800ad78 <_strtod_l>
 800b95e:	bf00      	nop
 800b960:	20000090 	.word	0x20000090

0800b964 <_strtol_l.constprop.0>:
 800b964:	2b01      	cmp	r3, #1
 800b966:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b96a:	d001      	beq.n	800b970 <_strtol_l.constprop.0+0xc>
 800b96c:	2b24      	cmp	r3, #36	; 0x24
 800b96e:	d906      	bls.n	800b97e <_strtol_l.constprop.0+0x1a>
 800b970:	f7fd fd8a 	bl	8009488 <__errno>
 800b974:	2316      	movs	r3, #22
 800b976:	6003      	str	r3, [r0, #0]
 800b978:	2000      	movs	r0, #0
 800b97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b97e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ba64 <_strtol_l.constprop.0+0x100>
 800b982:	460d      	mov	r5, r1
 800b984:	462e      	mov	r6, r5
 800b986:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b98a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b98e:	f017 0708 	ands.w	r7, r7, #8
 800b992:	d1f7      	bne.n	800b984 <_strtol_l.constprop.0+0x20>
 800b994:	2c2d      	cmp	r4, #45	; 0x2d
 800b996:	d132      	bne.n	800b9fe <_strtol_l.constprop.0+0x9a>
 800b998:	782c      	ldrb	r4, [r5, #0]
 800b99a:	2701      	movs	r7, #1
 800b99c:	1cb5      	adds	r5, r6, #2
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d05b      	beq.n	800ba5a <_strtol_l.constprop.0+0xf6>
 800b9a2:	2b10      	cmp	r3, #16
 800b9a4:	d109      	bne.n	800b9ba <_strtol_l.constprop.0+0x56>
 800b9a6:	2c30      	cmp	r4, #48	; 0x30
 800b9a8:	d107      	bne.n	800b9ba <_strtol_l.constprop.0+0x56>
 800b9aa:	782c      	ldrb	r4, [r5, #0]
 800b9ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b9b0:	2c58      	cmp	r4, #88	; 0x58
 800b9b2:	d14d      	bne.n	800ba50 <_strtol_l.constprop.0+0xec>
 800b9b4:	786c      	ldrb	r4, [r5, #1]
 800b9b6:	2310      	movs	r3, #16
 800b9b8:	3502      	adds	r5, #2
 800b9ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b9be:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b9c2:	f04f 0e00 	mov.w	lr, #0
 800b9c6:	fbb8 f9f3 	udiv	r9, r8, r3
 800b9ca:	4676      	mov	r6, lr
 800b9cc:	fb03 8a19 	mls	sl, r3, r9, r8
 800b9d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b9d4:	f1bc 0f09 	cmp.w	ip, #9
 800b9d8:	d816      	bhi.n	800ba08 <_strtol_l.constprop.0+0xa4>
 800b9da:	4664      	mov	r4, ip
 800b9dc:	42a3      	cmp	r3, r4
 800b9de:	dd24      	ble.n	800ba2a <_strtol_l.constprop.0+0xc6>
 800b9e0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800b9e4:	d008      	beq.n	800b9f8 <_strtol_l.constprop.0+0x94>
 800b9e6:	45b1      	cmp	r9, r6
 800b9e8:	d31c      	bcc.n	800ba24 <_strtol_l.constprop.0+0xc0>
 800b9ea:	d101      	bne.n	800b9f0 <_strtol_l.constprop.0+0x8c>
 800b9ec:	45a2      	cmp	sl, r4
 800b9ee:	db19      	blt.n	800ba24 <_strtol_l.constprop.0+0xc0>
 800b9f0:	fb06 4603 	mla	r6, r6, r3, r4
 800b9f4:	f04f 0e01 	mov.w	lr, #1
 800b9f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9fc:	e7e8      	b.n	800b9d0 <_strtol_l.constprop.0+0x6c>
 800b9fe:	2c2b      	cmp	r4, #43	; 0x2b
 800ba00:	bf04      	itt	eq
 800ba02:	782c      	ldrbeq	r4, [r5, #0]
 800ba04:	1cb5      	addeq	r5, r6, #2
 800ba06:	e7ca      	b.n	800b99e <_strtol_l.constprop.0+0x3a>
 800ba08:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ba0c:	f1bc 0f19 	cmp.w	ip, #25
 800ba10:	d801      	bhi.n	800ba16 <_strtol_l.constprop.0+0xb2>
 800ba12:	3c37      	subs	r4, #55	; 0x37
 800ba14:	e7e2      	b.n	800b9dc <_strtol_l.constprop.0+0x78>
 800ba16:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ba1a:	f1bc 0f19 	cmp.w	ip, #25
 800ba1e:	d804      	bhi.n	800ba2a <_strtol_l.constprop.0+0xc6>
 800ba20:	3c57      	subs	r4, #87	; 0x57
 800ba22:	e7db      	b.n	800b9dc <_strtol_l.constprop.0+0x78>
 800ba24:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800ba28:	e7e6      	b.n	800b9f8 <_strtol_l.constprop.0+0x94>
 800ba2a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800ba2e:	d105      	bne.n	800ba3c <_strtol_l.constprop.0+0xd8>
 800ba30:	2322      	movs	r3, #34	; 0x22
 800ba32:	6003      	str	r3, [r0, #0]
 800ba34:	4646      	mov	r6, r8
 800ba36:	b942      	cbnz	r2, 800ba4a <_strtol_l.constprop.0+0xe6>
 800ba38:	4630      	mov	r0, r6
 800ba3a:	e79e      	b.n	800b97a <_strtol_l.constprop.0+0x16>
 800ba3c:	b107      	cbz	r7, 800ba40 <_strtol_l.constprop.0+0xdc>
 800ba3e:	4276      	negs	r6, r6
 800ba40:	2a00      	cmp	r2, #0
 800ba42:	d0f9      	beq.n	800ba38 <_strtol_l.constprop.0+0xd4>
 800ba44:	f1be 0f00 	cmp.w	lr, #0
 800ba48:	d000      	beq.n	800ba4c <_strtol_l.constprop.0+0xe8>
 800ba4a:	1e69      	subs	r1, r5, #1
 800ba4c:	6011      	str	r1, [r2, #0]
 800ba4e:	e7f3      	b.n	800ba38 <_strtol_l.constprop.0+0xd4>
 800ba50:	2430      	movs	r4, #48	; 0x30
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1b1      	bne.n	800b9ba <_strtol_l.constprop.0+0x56>
 800ba56:	2308      	movs	r3, #8
 800ba58:	e7af      	b.n	800b9ba <_strtol_l.constprop.0+0x56>
 800ba5a:	2c30      	cmp	r4, #48	; 0x30
 800ba5c:	d0a5      	beq.n	800b9aa <_strtol_l.constprop.0+0x46>
 800ba5e:	230a      	movs	r3, #10
 800ba60:	e7ab      	b.n	800b9ba <_strtol_l.constprop.0+0x56>
 800ba62:	bf00      	nop
 800ba64:	0800d3c1 	.word	0x0800d3c1

0800ba68 <_strtol_r>:
 800ba68:	f7ff bf7c 	b.w	800b964 <_strtol_l.constprop.0>

0800ba6c <__ssputs_r>:
 800ba6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba70:	688e      	ldr	r6, [r1, #8]
 800ba72:	461f      	mov	r7, r3
 800ba74:	42be      	cmp	r6, r7
 800ba76:	680b      	ldr	r3, [r1, #0]
 800ba78:	4682      	mov	sl, r0
 800ba7a:	460c      	mov	r4, r1
 800ba7c:	4690      	mov	r8, r2
 800ba7e:	d82c      	bhi.n	800bada <__ssputs_r+0x6e>
 800ba80:	898a      	ldrh	r2, [r1, #12]
 800ba82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba86:	d026      	beq.n	800bad6 <__ssputs_r+0x6a>
 800ba88:	6965      	ldr	r5, [r4, #20]
 800ba8a:	6909      	ldr	r1, [r1, #16]
 800ba8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba90:	eba3 0901 	sub.w	r9, r3, r1
 800ba94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba98:	1c7b      	adds	r3, r7, #1
 800ba9a:	444b      	add	r3, r9
 800ba9c:	106d      	asrs	r5, r5, #1
 800ba9e:	429d      	cmp	r5, r3
 800baa0:	bf38      	it	cc
 800baa2:	461d      	movcc	r5, r3
 800baa4:	0553      	lsls	r3, r2, #21
 800baa6:	d527      	bpl.n	800baf8 <__ssputs_r+0x8c>
 800baa8:	4629      	mov	r1, r5
 800baaa:	f7fe fc0f 	bl	800a2cc <_malloc_r>
 800baae:	4606      	mov	r6, r0
 800bab0:	b360      	cbz	r0, 800bb0c <__ssputs_r+0xa0>
 800bab2:	6921      	ldr	r1, [r4, #16]
 800bab4:	464a      	mov	r2, r9
 800bab6:	f000 fbe3 	bl	800c280 <memcpy>
 800baba:	89a3      	ldrh	r3, [r4, #12]
 800babc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bac4:	81a3      	strh	r3, [r4, #12]
 800bac6:	6126      	str	r6, [r4, #16]
 800bac8:	6165      	str	r5, [r4, #20]
 800baca:	444e      	add	r6, r9
 800bacc:	eba5 0509 	sub.w	r5, r5, r9
 800bad0:	6026      	str	r6, [r4, #0]
 800bad2:	60a5      	str	r5, [r4, #8]
 800bad4:	463e      	mov	r6, r7
 800bad6:	42be      	cmp	r6, r7
 800bad8:	d900      	bls.n	800badc <__ssputs_r+0x70>
 800bada:	463e      	mov	r6, r7
 800badc:	6820      	ldr	r0, [r4, #0]
 800bade:	4632      	mov	r2, r6
 800bae0:	4641      	mov	r1, r8
 800bae2:	f000 fb6f 	bl	800c1c4 <memmove>
 800bae6:	68a3      	ldr	r3, [r4, #8]
 800bae8:	1b9b      	subs	r3, r3, r6
 800baea:	60a3      	str	r3, [r4, #8]
 800baec:	6823      	ldr	r3, [r4, #0]
 800baee:	4433      	add	r3, r6
 800baf0:	6023      	str	r3, [r4, #0]
 800baf2:	2000      	movs	r0, #0
 800baf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baf8:	462a      	mov	r2, r5
 800bafa:	f000 ff76 	bl	800c9ea <_realloc_r>
 800bafe:	4606      	mov	r6, r0
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d1e0      	bne.n	800bac6 <__ssputs_r+0x5a>
 800bb04:	6921      	ldr	r1, [r4, #16]
 800bb06:	4650      	mov	r0, sl
 800bb08:	f7fe fb6c 	bl	800a1e4 <_free_r>
 800bb0c:	230c      	movs	r3, #12
 800bb0e:	f8ca 3000 	str.w	r3, [sl]
 800bb12:	89a3      	ldrh	r3, [r4, #12]
 800bb14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb18:	81a3      	strh	r3, [r4, #12]
 800bb1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb1e:	e7e9      	b.n	800baf4 <__ssputs_r+0x88>

0800bb20 <_svfiprintf_r>:
 800bb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb24:	4698      	mov	r8, r3
 800bb26:	898b      	ldrh	r3, [r1, #12]
 800bb28:	061b      	lsls	r3, r3, #24
 800bb2a:	b09d      	sub	sp, #116	; 0x74
 800bb2c:	4607      	mov	r7, r0
 800bb2e:	460d      	mov	r5, r1
 800bb30:	4614      	mov	r4, r2
 800bb32:	d50e      	bpl.n	800bb52 <_svfiprintf_r+0x32>
 800bb34:	690b      	ldr	r3, [r1, #16]
 800bb36:	b963      	cbnz	r3, 800bb52 <_svfiprintf_r+0x32>
 800bb38:	2140      	movs	r1, #64	; 0x40
 800bb3a:	f7fe fbc7 	bl	800a2cc <_malloc_r>
 800bb3e:	6028      	str	r0, [r5, #0]
 800bb40:	6128      	str	r0, [r5, #16]
 800bb42:	b920      	cbnz	r0, 800bb4e <_svfiprintf_r+0x2e>
 800bb44:	230c      	movs	r3, #12
 800bb46:	603b      	str	r3, [r7, #0]
 800bb48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb4c:	e0d0      	b.n	800bcf0 <_svfiprintf_r+0x1d0>
 800bb4e:	2340      	movs	r3, #64	; 0x40
 800bb50:	616b      	str	r3, [r5, #20]
 800bb52:	2300      	movs	r3, #0
 800bb54:	9309      	str	r3, [sp, #36]	; 0x24
 800bb56:	2320      	movs	r3, #32
 800bb58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb60:	2330      	movs	r3, #48	; 0x30
 800bb62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bd08 <_svfiprintf_r+0x1e8>
 800bb66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb6a:	f04f 0901 	mov.w	r9, #1
 800bb6e:	4623      	mov	r3, r4
 800bb70:	469a      	mov	sl, r3
 800bb72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb76:	b10a      	cbz	r2, 800bb7c <_svfiprintf_r+0x5c>
 800bb78:	2a25      	cmp	r2, #37	; 0x25
 800bb7a:	d1f9      	bne.n	800bb70 <_svfiprintf_r+0x50>
 800bb7c:	ebba 0b04 	subs.w	fp, sl, r4
 800bb80:	d00b      	beq.n	800bb9a <_svfiprintf_r+0x7a>
 800bb82:	465b      	mov	r3, fp
 800bb84:	4622      	mov	r2, r4
 800bb86:	4629      	mov	r1, r5
 800bb88:	4638      	mov	r0, r7
 800bb8a:	f7ff ff6f 	bl	800ba6c <__ssputs_r>
 800bb8e:	3001      	adds	r0, #1
 800bb90:	f000 80a9 	beq.w	800bce6 <_svfiprintf_r+0x1c6>
 800bb94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb96:	445a      	add	r2, fp
 800bb98:	9209      	str	r2, [sp, #36]	; 0x24
 800bb9a:	f89a 3000 	ldrb.w	r3, [sl]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	f000 80a1 	beq.w	800bce6 <_svfiprintf_r+0x1c6>
 800bba4:	2300      	movs	r3, #0
 800bba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbae:	f10a 0a01 	add.w	sl, sl, #1
 800bbb2:	9304      	str	r3, [sp, #16]
 800bbb4:	9307      	str	r3, [sp, #28]
 800bbb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbba:	931a      	str	r3, [sp, #104]	; 0x68
 800bbbc:	4654      	mov	r4, sl
 800bbbe:	2205      	movs	r2, #5
 800bbc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbc4:	4850      	ldr	r0, [pc, #320]	; (800bd08 <_svfiprintf_r+0x1e8>)
 800bbc6:	f7f4 fb33 	bl	8000230 <memchr>
 800bbca:	9a04      	ldr	r2, [sp, #16]
 800bbcc:	b9d8      	cbnz	r0, 800bc06 <_svfiprintf_r+0xe6>
 800bbce:	06d0      	lsls	r0, r2, #27
 800bbd0:	bf44      	itt	mi
 800bbd2:	2320      	movmi	r3, #32
 800bbd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbd8:	0711      	lsls	r1, r2, #28
 800bbda:	bf44      	itt	mi
 800bbdc:	232b      	movmi	r3, #43	; 0x2b
 800bbde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbe2:	f89a 3000 	ldrb.w	r3, [sl]
 800bbe6:	2b2a      	cmp	r3, #42	; 0x2a
 800bbe8:	d015      	beq.n	800bc16 <_svfiprintf_r+0xf6>
 800bbea:	9a07      	ldr	r2, [sp, #28]
 800bbec:	4654      	mov	r4, sl
 800bbee:	2000      	movs	r0, #0
 800bbf0:	f04f 0c0a 	mov.w	ip, #10
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbfa:	3b30      	subs	r3, #48	; 0x30
 800bbfc:	2b09      	cmp	r3, #9
 800bbfe:	d94d      	bls.n	800bc9c <_svfiprintf_r+0x17c>
 800bc00:	b1b0      	cbz	r0, 800bc30 <_svfiprintf_r+0x110>
 800bc02:	9207      	str	r2, [sp, #28]
 800bc04:	e014      	b.n	800bc30 <_svfiprintf_r+0x110>
 800bc06:	eba0 0308 	sub.w	r3, r0, r8
 800bc0a:	fa09 f303 	lsl.w	r3, r9, r3
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	9304      	str	r3, [sp, #16]
 800bc12:	46a2      	mov	sl, r4
 800bc14:	e7d2      	b.n	800bbbc <_svfiprintf_r+0x9c>
 800bc16:	9b03      	ldr	r3, [sp, #12]
 800bc18:	1d19      	adds	r1, r3, #4
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	9103      	str	r1, [sp, #12]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	bfbb      	ittet	lt
 800bc22:	425b      	neglt	r3, r3
 800bc24:	f042 0202 	orrlt.w	r2, r2, #2
 800bc28:	9307      	strge	r3, [sp, #28]
 800bc2a:	9307      	strlt	r3, [sp, #28]
 800bc2c:	bfb8      	it	lt
 800bc2e:	9204      	strlt	r2, [sp, #16]
 800bc30:	7823      	ldrb	r3, [r4, #0]
 800bc32:	2b2e      	cmp	r3, #46	; 0x2e
 800bc34:	d10c      	bne.n	800bc50 <_svfiprintf_r+0x130>
 800bc36:	7863      	ldrb	r3, [r4, #1]
 800bc38:	2b2a      	cmp	r3, #42	; 0x2a
 800bc3a:	d134      	bne.n	800bca6 <_svfiprintf_r+0x186>
 800bc3c:	9b03      	ldr	r3, [sp, #12]
 800bc3e:	1d1a      	adds	r2, r3, #4
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	9203      	str	r2, [sp, #12]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	bfb8      	it	lt
 800bc48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bc4c:	3402      	adds	r4, #2
 800bc4e:	9305      	str	r3, [sp, #20]
 800bc50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bd18 <_svfiprintf_r+0x1f8>
 800bc54:	7821      	ldrb	r1, [r4, #0]
 800bc56:	2203      	movs	r2, #3
 800bc58:	4650      	mov	r0, sl
 800bc5a:	f7f4 fae9 	bl	8000230 <memchr>
 800bc5e:	b138      	cbz	r0, 800bc70 <_svfiprintf_r+0x150>
 800bc60:	9b04      	ldr	r3, [sp, #16]
 800bc62:	eba0 000a 	sub.w	r0, r0, sl
 800bc66:	2240      	movs	r2, #64	; 0x40
 800bc68:	4082      	lsls	r2, r0
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	3401      	adds	r4, #1
 800bc6e:	9304      	str	r3, [sp, #16]
 800bc70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc74:	4825      	ldr	r0, [pc, #148]	; (800bd0c <_svfiprintf_r+0x1ec>)
 800bc76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc7a:	2206      	movs	r2, #6
 800bc7c:	f7f4 fad8 	bl	8000230 <memchr>
 800bc80:	2800      	cmp	r0, #0
 800bc82:	d038      	beq.n	800bcf6 <_svfiprintf_r+0x1d6>
 800bc84:	4b22      	ldr	r3, [pc, #136]	; (800bd10 <_svfiprintf_r+0x1f0>)
 800bc86:	bb1b      	cbnz	r3, 800bcd0 <_svfiprintf_r+0x1b0>
 800bc88:	9b03      	ldr	r3, [sp, #12]
 800bc8a:	3307      	adds	r3, #7
 800bc8c:	f023 0307 	bic.w	r3, r3, #7
 800bc90:	3308      	adds	r3, #8
 800bc92:	9303      	str	r3, [sp, #12]
 800bc94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc96:	4433      	add	r3, r6
 800bc98:	9309      	str	r3, [sp, #36]	; 0x24
 800bc9a:	e768      	b.n	800bb6e <_svfiprintf_r+0x4e>
 800bc9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bca0:	460c      	mov	r4, r1
 800bca2:	2001      	movs	r0, #1
 800bca4:	e7a6      	b.n	800bbf4 <_svfiprintf_r+0xd4>
 800bca6:	2300      	movs	r3, #0
 800bca8:	3401      	adds	r4, #1
 800bcaa:	9305      	str	r3, [sp, #20]
 800bcac:	4619      	mov	r1, r3
 800bcae:	f04f 0c0a 	mov.w	ip, #10
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcb8:	3a30      	subs	r2, #48	; 0x30
 800bcba:	2a09      	cmp	r2, #9
 800bcbc:	d903      	bls.n	800bcc6 <_svfiprintf_r+0x1a6>
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d0c6      	beq.n	800bc50 <_svfiprintf_r+0x130>
 800bcc2:	9105      	str	r1, [sp, #20]
 800bcc4:	e7c4      	b.n	800bc50 <_svfiprintf_r+0x130>
 800bcc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcca:	4604      	mov	r4, r0
 800bccc:	2301      	movs	r3, #1
 800bcce:	e7f0      	b.n	800bcb2 <_svfiprintf_r+0x192>
 800bcd0:	ab03      	add	r3, sp, #12
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	462a      	mov	r2, r5
 800bcd6:	4b0f      	ldr	r3, [pc, #60]	; (800bd14 <_svfiprintf_r+0x1f4>)
 800bcd8:	a904      	add	r1, sp, #16
 800bcda:	4638      	mov	r0, r7
 800bcdc:	f7fc fb84 	bl	80083e8 <_printf_float>
 800bce0:	1c42      	adds	r2, r0, #1
 800bce2:	4606      	mov	r6, r0
 800bce4:	d1d6      	bne.n	800bc94 <_svfiprintf_r+0x174>
 800bce6:	89ab      	ldrh	r3, [r5, #12]
 800bce8:	065b      	lsls	r3, r3, #25
 800bcea:	f53f af2d 	bmi.w	800bb48 <_svfiprintf_r+0x28>
 800bcee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcf0:	b01d      	add	sp, #116	; 0x74
 800bcf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf6:	ab03      	add	r3, sp, #12
 800bcf8:	9300      	str	r3, [sp, #0]
 800bcfa:	462a      	mov	r2, r5
 800bcfc:	4b05      	ldr	r3, [pc, #20]	; (800bd14 <_svfiprintf_r+0x1f4>)
 800bcfe:	a904      	add	r1, sp, #16
 800bd00:	4638      	mov	r0, r7
 800bd02:	f7fc fe15 	bl	8008930 <_printf_i>
 800bd06:	e7eb      	b.n	800bce0 <_svfiprintf_r+0x1c0>
 800bd08:	0800d4c1 	.word	0x0800d4c1
 800bd0c:	0800d4cb 	.word	0x0800d4cb
 800bd10:	080083e9 	.word	0x080083e9
 800bd14:	0800ba6d 	.word	0x0800ba6d
 800bd18:	0800d4c7 	.word	0x0800d4c7

0800bd1c <__sfputc_r>:
 800bd1c:	6893      	ldr	r3, [r2, #8]
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	b410      	push	{r4}
 800bd24:	6093      	str	r3, [r2, #8]
 800bd26:	da08      	bge.n	800bd3a <__sfputc_r+0x1e>
 800bd28:	6994      	ldr	r4, [r2, #24]
 800bd2a:	42a3      	cmp	r3, r4
 800bd2c:	db01      	blt.n	800bd32 <__sfputc_r+0x16>
 800bd2e:	290a      	cmp	r1, #10
 800bd30:	d103      	bne.n	800bd3a <__sfputc_r+0x1e>
 800bd32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd36:	f7fd bac0 	b.w	80092ba <__swbuf_r>
 800bd3a:	6813      	ldr	r3, [r2, #0]
 800bd3c:	1c58      	adds	r0, r3, #1
 800bd3e:	6010      	str	r0, [r2, #0]
 800bd40:	7019      	strb	r1, [r3, #0]
 800bd42:	4608      	mov	r0, r1
 800bd44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd48:	4770      	bx	lr

0800bd4a <__sfputs_r>:
 800bd4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd4c:	4606      	mov	r6, r0
 800bd4e:	460f      	mov	r7, r1
 800bd50:	4614      	mov	r4, r2
 800bd52:	18d5      	adds	r5, r2, r3
 800bd54:	42ac      	cmp	r4, r5
 800bd56:	d101      	bne.n	800bd5c <__sfputs_r+0x12>
 800bd58:	2000      	movs	r0, #0
 800bd5a:	e007      	b.n	800bd6c <__sfputs_r+0x22>
 800bd5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd60:	463a      	mov	r2, r7
 800bd62:	4630      	mov	r0, r6
 800bd64:	f7ff ffda 	bl	800bd1c <__sfputc_r>
 800bd68:	1c43      	adds	r3, r0, #1
 800bd6a:	d1f3      	bne.n	800bd54 <__sfputs_r+0xa>
 800bd6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd70 <_vfiprintf_r>:
 800bd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd74:	460d      	mov	r5, r1
 800bd76:	b09d      	sub	sp, #116	; 0x74
 800bd78:	4614      	mov	r4, r2
 800bd7a:	4698      	mov	r8, r3
 800bd7c:	4606      	mov	r6, r0
 800bd7e:	b118      	cbz	r0, 800bd88 <_vfiprintf_r+0x18>
 800bd80:	6a03      	ldr	r3, [r0, #32]
 800bd82:	b90b      	cbnz	r3, 800bd88 <_vfiprintf_r+0x18>
 800bd84:	f7fd f992 	bl	80090ac <__sinit>
 800bd88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd8a:	07d9      	lsls	r1, r3, #31
 800bd8c:	d405      	bmi.n	800bd9a <_vfiprintf_r+0x2a>
 800bd8e:	89ab      	ldrh	r3, [r5, #12]
 800bd90:	059a      	lsls	r2, r3, #22
 800bd92:	d402      	bmi.n	800bd9a <_vfiprintf_r+0x2a>
 800bd94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd96:	f7fd fba2 	bl	80094de <__retarget_lock_acquire_recursive>
 800bd9a:	89ab      	ldrh	r3, [r5, #12]
 800bd9c:	071b      	lsls	r3, r3, #28
 800bd9e:	d501      	bpl.n	800bda4 <_vfiprintf_r+0x34>
 800bda0:	692b      	ldr	r3, [r5, #16]
 800bda2:	b99b      	cbnz	r3, 800bdcc <_vfiprintf_r+0x5c>
 800bda4:	4629      	mov	r1, r5
 800bda6:	4630      	mov	r0, r6
 800bda8:	f7fd fac4 	bl	8009334 <__swsetup_r>
 800bdac:	b170      	cbz	r0, 800bdcc <_vfiprintf_r+0x5c>
 800bdae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdb0:	07dc      	lsls	r4, r3, #31
 800bdb2:	d504      	bpl.n	800bdbe <_vfiprintf_r+0x4e>
 800bdb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdb8:	b01d      	add	sp, #116	; 0x74
 800bdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdbe:	89ab      	ldrh	r3, [r5, #12]
 800bdc0:	0598      	lsls	r0, r3, #22
 800bdc2:	d4f7      	bmi.n	800bdb4 <_vfiprintf_r+0x44>
 800bdc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdc6:	f7fd fb8b 	bl	80094e0 <__retarget_lock_release_recursive>
 800bdca:	e7f3      	b.n	800bdb4 <_vfiprintf_r+0x44>
 800bdcc:	2300      	movs	r3, #0
 800bdce:	9309      	str	r3, [sp, #36]	; 0x24
 800bdd0:	2320      	movs	r3, #32
 800bdd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdda:	2330      	movs	r3, #48	; 0x30
 800bddc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bf90 <_vfiprintf_r+0x220>
 800bde0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bde4:	f04f 0901 	mov.w	r9, #1
 800bde8:	4623      	mov	r3, r4
 800bdea:	469a      	mov	sl, r3
 800bdec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdf0:	b10a      	cbz	r2, 800bdf6 <_vfiprintf_r+0x86>
 800bdf2:	2a25      	cmp	r2, #37	; 0x25
 800bdf4:	d1f9      	bne.n	800bdea <_vfiprintf_r+0x7a>
 800bdf6:	ebba 0b04 	subs.w	fp, sl, r4
 800bdfa:	d00b      	beq.n	800be14 <_vfiprintf_r+0xa4>
 800bdfc:	465b      	mov	r3, fp
 800bdfe:	4622      	mov	r2, r4
 800be00:	4629      	mov	r1, r5
 800be02:	4630      	mov	r0, r6
 800be04:	f7ff ffa1 	bl	800bd4a <__sfputs_r>
 800be08:	3001      	adds	r0, #1
 800be0a:	f000 80a9 	beq.w	800bf60 <_vfiprintf_r+0x1f0>
 800be0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be10:	445a      	add	r2, fp
 800be12:	9209      	str	r2, [sp, #36]	; 0x24
 800be14:	f89a 3000 	ldrb.w	r3, [sl]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f000 80a1 	beq.w	800bf60 <_vfiprintf_r+0x1f0>
 800be1e:	2300      	movs	r3, #0
 800be20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be28:	f10a 0a01 	add.w	sl, sl, #1
 800be2c:	9304      	str	r3, [sp, #16]
 800be2e:	9307      	str	r3, [sp, #28]
 800be30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be34:	931a      	str	r3, [sp, #104]	; 0x68
 800be36:	4654      	mov	r4, sl
 800be38:	2205      	movs	r2, #5
 800be3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be3e:	4854      	ldr	r0, [pc, #336]	; (800bf90 <_vfiprintf_r+0x220>)
 800be40:	f7f4 f9f6 	bl	8000230 <memchr>
 800be44:	9a04      	ldr	r2, [sp, #16]
 800be46:	b9d8      	cbnz	r0, 800be80 <_vfiprintf_r+0x110>
 800be48:	06d1      	lsls	r1, r2, #27
 800be4a:	bf44      	itt	mi
 800be4c:	2320      	movmi	r3, #32
 800be4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be52:	0713      	lsls	r3, r2, #28
 800be54:	bf44      	itt	mi
 800be56:	232b      	movmi	r3, #43	; 0x2b
 800be58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be5c:	f89a 3000 	ldrb.w	r3, [sl]
 800be60:	2b2a      	cmp	r3, #42	; 0x2a
 800be62:	d015      	beq.n	800be90 <_vfiprintf_r+0x120>
 800be64:	9a07      	ldr	r2, [sp, #28]
 800be66:	4654      	mov	r4, sl
 800be68:	2000      	movs	r0, #0
 800be6a:	f04f 0c0a 	mov.w	ip, #10
 800be6e:	4621      	mov	r1, r4
 800be70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be74:	3b30      	subs	r3, #48	; 0x30
 800be76:	2b09      	cmp	r3, #9
 800be78:	d94d      	bls.n	800bf16 <_vfiprintf_r+0x1a6>
 800be7a:	b1b0      	cbz	r0, 800beaa <_vfiprintf_r+0x13a>
 800be7c:	9207      	str	r2, [sp, #28]
 800be7e:	e014      	b.n	800beaa <_vfiprintf_r+0x13a>
 800be80:	eba0 0308 	sub.w	r3, r0, r8
 800be84:	fa09 f303 	lsl.w	r3, r9, r3
 800be88:	4313      	orrs	r3, r2
 800be8a:	9304      	str	r3, [sp, #16]
 800be8c:	46a2      	mov	sl, r4
 800be8e:	e7d2      	b.n	800be36 <_vfiprintf_r+0xc6>
 800be90:	9b03      	ldr	r3, [sp, #12]
 800be92:	1d19      	adds	r1, r3, #4
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	9103      	str	r1, [sp, #12]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	bfbb      	ittet	lt
 800be9c:	425b      	neglt	r3, r3
 800be9e:	f042 0202 	orrlt.w	r2, r2, #2
 800bea2:	9307      	strge	r3, [sp, #28]
 800bea4:	9307      	strlt	r3, [sp, #28]
 800bea6:	bfb8      	it	lt
 800bea8:	9204      	strlt	r2, [sp, #16]
 800beaa:	7823      	ldrb	r3, [r4, #0]
 800beac:	2b2e      	cmp	r3, #46	; 0x2e
 800beae:	d10c      	bne.n	800beca <_vfiprintf_r+0x15a>
 800beb0:	7863      	ldrb	r3, [r4, #1]
 800beb2:	2b2a      	cmp	r3, #42	; 0x2a
 800beb4:	d134      	bne.n	800bf20 <_vfiprintf_r+0x1b0>
 800beb6:	9b03      	ldr	r3, [sp, #12]
 800beb8:	1d1a      	adds	r2, r3, #4
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	9203      	str	r2, [sp, #12]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	bfb8      	it	lt
 800bec2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bec6:	3402      	adds	r4, #2
 800bec8:	9305      	str	r3, [sp, #20]
 800beca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bfa0 <_vfiprintf_r+0x230>
 800bece:	7821      	ldrb	r1, [r4, #0]
 800bed0:	2203      	movs	r2, #3
 800bed2:	4650      	mov	r0, sl
 800bed4:	f7f4 f9ac 	bl	8000230 <memchr>
 800bed8:	b138      	cbz	r0, 800beea <_vfiprintf_r+0x17a>
 800beda:	9b04      	ldr	r3, [sp, #16]
 800bedc:	eba0 000a 	sub.w	r0, r0, sl
 800bee0:	2240      	movs	r2, #64	; 0x40
 800bee2:	4082      	lsls	r2, r0
 800bee4:	4313      	orrs	r3, r2
 800bee6:	3401      	adds	r4, #1
 800bee8:	9304      	str	r3, [sp, #16]
 800beea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beee:	4829      	ldr	r0, [pc, #164]	; (800bf94 <_vfiprintf_r+0x224>)
 800bef0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bef4:	2206      	movs	r2, #6
 800bef6:	f7f4 f99b 	bl	8000230 <memchr>
 800befa:	2800      	cmp	r0, #0
 800befc:	d03f      	beq.n	800bf7e <_vfiprintf_r+0x20e>
 800befe:	4b26      	ldr	r3, [pc, #152]	; (800bf98 <_vfiprintf_r+0x228>)
 800bf00:	bb1b      	cbnz	r3, 800bf4a <_vfiprintf_r+0x1da>
 800bf02:	9b03      	ldr	r3, [sp, #12]
 800bf04:	3307      	adds	r3, #7
 800bf06:	f023 0307 	bic.w	r3, r3, #7
 800bf0a:	3308      	adds	r3, #8
 800bf0c:	9303      	str	r3, [sp, #12]
 800bf0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf10:	443b      	add	r3, r7
 800bf12:	9309      	str	r3, [sp, #36]	; 0x24
 800bf14:	e768      	b.n	800bde8 <_vfiprintf_r+0x78>
 800bf16:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf1a:	460c      	mov	r4, r1
 800bf1c:	2001      	movs	r0, #1
 800bf1e:	e7a6      	b.n	800be6e <_vfiprintf_r+0xfe>
 800bf20:	2300      	movs	r3, #0
 800bf22:	3401      	adds	r4, #1
 800bf24:	9305      	str	r3, [sp, #20]
 800bf26:	4619      	mov	r1, r3
 800bf28:	f04f 0c0a 	mov.w	ip, #10
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf32:	3a30      	subs	r2, #48	; 0x30
 800bf34:	2a09      	cmp	r2, #9
 800bf36:	d903      	bls.n	800bf40 <_vfiprintf_r+0x1d0>
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d0c6      	beq.n	800beca <_vfiprintf_r+0x15a>
 800bf3c:	9105      	str	r1, [sp, #20]
 800bf3e:	e7c4      	b.n	800beca <_vfiprintf_r+0x15a>
 800bf40:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf44:	4604      	mov	r4, r0
 800bf46:	2301      	movs	r3, #1
 800bf48:	e7f0      	b.n	800bf2c <_vfiprintf_r+0x1bc>
 800bf4a:	ab03      	add	r3, sp, #12
 800bf4c:	9300      	str	r3, [sp, #0]
 800bf4e:	462a      	mov	r2, r5
 800bf50:	4b12      	ldr	r3, [pc, #72]	; (800bf9c <_vfiprintf_r+0x22c>)
 800bf52:	a904      	add	r1, sp, #16
 800bf54:	4630      	mov	r0, r6
 800bf56:	f7fc fa47 	bl	80083e8 <_printf_float>
 800bf5a:	4607      	mov	r7, r0
 800bf5c:	1c78      	adds	r0, r7, #1
 800bf5e:	d1d6      	bne.n	800bf0e <_vfiprintf_r+0x19e>
 800bf60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf62:	07d9      	lsls	r1, r3, #31
 800bf64:	d405      	bmi.n	800bf72 <_vfiprintf_r+0x202>
 800bf66:	89ab      	ldrh	r3, [r5, #12]
 800bf68:	059a      	lsls	r2, r3, #22
 800bf6a:	d402      	bmi.n	800bf72 <_vfiprintf_r+0x202>
 800bf6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf6e:	f7fd fab7 	bl	80094e0 <__retarget_lock_release_recursive>
 800bf72:	89ab      	ldrh	r3, [r5, #12]
 800bf74:	065b      	lsls	r3, r3, #25
 800bf76:	f53f af1d 	bmi.w	800bdb4 <_vfiprintf_r+0x44>
 800bf7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf7c:	e71c      	b.n	800bdb8 <_vfiprintf_r+0x48>
 800bf7e:	ab03      	add	r3, sp, #12
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	462a      	mov	r2, r5
 800bf84:	4b05      	ldr	r3, [pc, #20]	; (800bf9c <_vfiprintf_r+0x22c>)
 800bf86:	a904      	add	r1, sp, #16
 800bf88:	4630      	mov	r0, r6
 800bf8a:	f7fc fcd1 	bl	8008930 <_printf_i>
 800bf8e:	e7e4      	b.n	800bf5a <_vfiprintf_r+0x1ea>
 800bf90:	0800d4c1 	.word	0x0800d4c1
 800bf94:	0800d4cb 	.word	0x0800d4cb
 800bf98:	080083e9 	.word	0x080083e9
 800bf9c:	0800bd4b 	.word	0x0800bd4b
 800bfa0:	0800d4c7 	.word	0x0800d4c7

0800bfa4 <__sflush_r>:
 800bfa4:	898a      	ldrh	r2, [r1, #12]
 800bfa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfaa:	4605      	mov	r5, r0
 800bfac:	0710      	lsls	r0, r2, #28
 800bfae:	460c      	mov	r4, r1
 800bfb0:	d458      	bmi.n	800c064 <__sflush_r+0xc0>
 800bfb2:	684b      	ldr	r3, [r1, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	dc05      	bgt.n	800bfc4 <__sflush_r+0x20>
 800bfb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	dc02      	bgt.n	800bfc4 <__sflush_r+0x20>
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfc6:	2e00      	cmp	r6, #0
 800bfc8:	d0f9      	beq.n	800bfbe <__sflush_r+0x1a>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfd0:	682f      	ldr	r7, [r5, #0]
 800bfd2:	6a21      	ldr	r1, [r4, #32]
 800bfd4:	602b      	str	r3, [r5, #0]
 800bfd6:	d032      	beq.n	800c03e <__sflush_r+0x9a>
 800bfd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfda:	89a3      	ldrh	r3, [r4, #12]
 800bfdc:	075a      	lsls	r2, r3, #29
 800bfde:	d505      	bpl.n	800bfec <__sflush_r+0x48>
 800bfe0:	6863      	ldr	r3, [r4, #4]
 800bfe2:	1ac0      	subs	r0, r0, r3
 800bfe4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfe6:	b10b      	cbz	r3, 800bfec <__sflush_r+0x48>
 800bfe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfea:	1ac0      	subs	r0, r0, r3
 800bfec:	2300      	movs	r3, #0
 800bfee:	4602      	mov	r2, r0
 800bff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bff2:	6a21      	ldr	r1, [r4, #32]
 800bff4:	4628      	mov	r0, r5
 800bff6:	47b0      	blx	r6
 800bff8:	1c43      	adds	r3, r0, #1
 800bffa:	89a3      	ldrh	r3, [r4, #12]
 800bffc:	d106      	bne.n	800c00c <__sflush_r+0x68>
 800bffe:	6829      	ldr	r1, [r5, #0]
 800c000:	291d      	cmp	r1, #29
 800c002:	d82b      	bhi.n	800c05c <__sflush_r+0xb8>
 800c004:	4a29      	ldr	r2, [pc, #164]	; (800c0ac <__sflush_r+0x108>)
 800c006:	410a      	asrs	r2, r1
 800c008:	07d6      	lsls	r6, r2, #31
 800c00a:	d427      	bmi.n	800c05c <__sflush_r+0xb8>
 800c00c:	2200      	movs	r2, #0
 800c00e:	6062      	str	r2, [r4, #4]
 800c010:	04d9      	lsls	r1, r3, #19
 800c012:	6922      	ldr	r2, [r4, #16]
 800c014:	6022      	str	r2, [r4, #0]
 800c016:	d504      	bpl.n	800c022 <__sflush_r+0x7e>
 800c018:	1c42      	adds	r2, r0, #1
 800c01a:	d101      	bne.n	800c020 <__sflush_r+0x7c>
 800c01c:	682b      	ldr	r3, [r5, #0]
 800c01e:	b903      	cbnz	r3, 800c022 <__sflush_r+0x7e>
 800c020:	6560      	str	r0, [r4, #84]	; 0x54
 800c022:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c024:	602f      	str	r7, [r5, #0]
 800c026:	2900      	cmp	r1, #0
 800c028:	d0c9      	beq.n	800bfbe <__sflush_r+0x1a>
 800c02a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c02e:	4299      	cmp	r1, r3
 800c030:	d002      	beq.n	800c038 <__sflush_r+0x94>
 800c032:	4628      	mov	r0, r5
 800c034:	f7fe f8d6 	bl	800a1e4 <_free_r>
 800c038:	2000      	movs	r0, #0
 800c03a:	6360      	str	r0, [r4, #52]	; 0x34
 800c03c:	e7c0      	b.n	800bfc0 <__sflush_r+0x1c>
 800c03e:	2301      	movs	r3, #1
 800c040:	4628      	mov	r0, r5
 800c042:	47b0      	blx	r6
 800c044:	1c41      	adds	r1, r0, #1
 800c046:	d1c8      	bne.n	800bfda <__sflush_r+0x36>
 800c048:	682b      	ldr	r3, [r5, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d0c5      	beq.n	800bfda <__sflush_r+0x36>
 800c04e:	2b1d      	cmp	r3, #29
 800c050:	d001      	beq.n	800c056 <__sflush_r+0xb2>
 800c052:	2b16      	cmp	r3, #22
 800c054:	d101      	bne.n	800c05a <__sflush_r+0xb6>
 800c056:	602f      	str	r7, [r5, #0]
 800c058:	e7b1      	b.n	800bfbe <__sflush_r+0x1a>
 800c05a:	89a3      	ldrh	r3, [r4, #12]
 800c05c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c060:	81a3      	strh	r3, [r4, #12]
 800c062:	e7ad      	b.n	800bfc0 <__sflush_r+0x1c>
 800c064:	690f      	ldr	r7, [r1, #16]
 800c066:	2f00      	cmp	r7, #0
 800c068:	d0a9      	beq.n	800bfbe <__sflush_r+0x1a>
 800c06a:	0793      	lsls	r3, r2, #30
 800c06c:	680e      	ldr	r6, [r1, #0]
 800c06e:	bf08      	it	eq
 800c070:	694b      	ldreq	r3, [r1, #20]
 800c072:	600f      	str	r7, [r1, #0]
 800c074:	bf18      	it	ne
 800c076:	2300      	movne	r3, #0
 800c078:	eba6 0807 	sub.w	r8, r6, r7
 800c07c:	608b      	str	r3, [r1, #8]
 800c07e:	f1b8 0f00 	cmp.w	r8, #0
 800c082:	dd9c      	ble.n	800bfbe <__sflush_r+0x1a>
 800c084:	6a21      	ldr	r1, [r4, #32]
 800c086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c088:	4643      	mov	r3, r8
 800c08a:	463a      	mov	r2, r7
 800c08c:	4628      	mov	r0, r5
 800c08e:	47b0      	blx	r6
 800c090:	2800      	cmp	r0, #0
 800c092:	dc06      	bgt.n	800c0a2 <__sflush_r+0xfe>
 800c094:	89a3      	ldrh	r3, [r4, #12]
 800c096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c09a:	81a3      	strh	r3, [r4, #12]
 800c09c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0a0:	e78e      	b.n	800bfc0 <__sflush_r+0x1c>
 800c0a2:	4407      	add	r7, r0
 800c0a4:	eba8 0800 	sub.w	r8, r8, r0
 800c0a8:	e7e9      	b.n	800c07e <__sflush_r+0xda>
 800c0aa:	bf00      	nop
 800c0ac:	dfbffffe 	.word	0xdfbffffe

0800c0b0 <_fflush_r>:
 800c0b0:	b538      	push	{r3, r4, r5, lr}
 800c0b2:	690b      	ldr	r3, [r1, #16]
 800c0b4:	4605      	mov	r5, r0
 800c0b6:	460c      	mov	r4, r1
 800c0b8:	b913      	cbnz	r3, 800c0c0 <_fflush_r+0x10>
 800c0ba:	2500      	movs	r5, #0
 800c0bc:	4628      	mov	r0, r5
 800c0be:	bd38      	pop	{r3, r4, r5, pc}
 800c0c0:	b118      	cbz	r0, 800c0ca <_fflush_r+0x1a>
 800c0c2:	6a03      	ldr	r3, [r0, #32]
 800c0c4:	b90b      	cbnz	r3, 800c0ca <_fflush_r+0x1a>
 800c0c6:	f7fc fff1 	bl	80090ac <__sinit>
 800c0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d0f3      	beq.n	800c0ba <_fflush_r+0xa>
 800c0d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0d4:	07d0      	lsls	r0, r2, #31
 800c0d6:	d404      	bmi.n	800c0e2 <_fflush_r+0x32>
 800c0d8:	0599      	lsls	r1, r3, #22
 800c0da:	d402      	bmi.n	800c0e2 <_fflush_r+0x32>
 800c0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0de:	f7fd f9fe 	bl	80094de <__retarget_lock_acquire_recursive>
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	4621      	mov	r1, r4
 800c0e6:	f7ff ff5d 	bl	800bfa4 <__sflush_r>
 800c0ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0ec:	07da      	lsls	r2, r3, #31
 800c0ee:	4605      	mov	r5, r0
 800c0f0:	d4e4      	bmi.n	800c0bc <_fflush_r+0xc>
 800c0f2:	89a3      	ldrh	r3, [r4, #12]
 800c0f4:	059b      	lsls	r3, r3, #22
 800c0f6:	d4e1      	bmi.n	800c0bc <_fflush_r+0xc>
 800c0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0fa:	f7fd f9f1 	bl	80094e0 <__retarget_lock_release_recursive>
 800c0fe:	e7dd      	b.n	800c0bc <_fflush_r+0xc>

0800c100 <__swhatbuf_r>:
 800c100:	b570      	push	{r4, r5, r6, lr}
 800c102:	460c      	mov	r4, r1
 800c104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c108:	2900      	cmp	r1, #0
 800c10a:	b096      	sub	sp, #88	; 0x58
 800c10c:	4615      	mov	r5, r2
 800c10e:	461e      	mov	r6, r3
 800c110:	da0d      	bge.n	800c12e <__swhatbuf_r+0x2e>
 800c112:	89a3      	ldrh	r3, [r4, #12]
 800c114:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c118:	f04f 0100 	mov.w	r1, #0
 800c11c:	bf0c      	ite	eq
 800c11e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c122:	2340      	movne	r3, #64	; 0x40
 800c124:	2000      	movs	r0, #0
 800c126:	6031      	str	r1, [r6, #0]
 800c128:	602b      	str	r3, [r5, #0]
 800c12a:	b016      	add	sp, #88	; 0x58
 800c12c:	bd70      	pop	{r4, r5, r6, pc}
 800c12e:	466a      	mov	r2, sp
 800c130:	f000 f874 	bl	800c21c <_fstat_r>
 800c134:	2800      	cmp	r0, #0
 800c136:	dbec      	blt.n	800c112 <__swhatbuf_r+0x12>
 800c138:	9901      	ldr	r1, [sp, #4]
 800c13a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c13e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c142:	4259      	negs	r1, r3
 800c144:	4159      	adcs	r1, r3
 800c146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c14a:	e7eb      	b.n	800c124 <__swhatbuf_r+0x24>

0800c14c <__smakebuf_r>:
 800c14c:	898b      	ldrh	r3, [r1, #12]
 800c14e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c150:	079d      	lsls	r5, r3, #30
 800c152:	4606      	mov	r6, r0
 800c154:	460c      	mov	r4, r1
 800c156:	d507      	bpl.n	800c168 <__smakebuf_r+0x1c>
 800c158:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c15c:	6023      	str	r3, [r4, #0]
 800c15e:	6123      	str	r3, [r4, #16]
 800c160:	2301      	movs	r3, #1
 800c162:	6163      	str	r3, [r4, #20]
 800c164:	b002      	add	sp, #8
 800c166:	bd70      	pop	{r4, r5, r6, pc}
 800c168:	ab01      	add	r3, sp, #4
 800c16a:	466a      	mov	r2, sp
 800c16c:	f7ff ffc8 	bl	800c100 <__swhatbuf_r>
 800c170:	9900      	ldr	r1, [sp, #0]
 800c172:	4605      	mov	r5, r0
 800c174:	4630      	mov	r0, r6
 800c176:	f7fe f8a9 	bl	800a2cc <_malloc_r>
 800c17a:	b948      	cbnz	r0, 800c190 <__smakebuf_r+0x44>
 800c17c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c180:	059a      	lsls	r2, r3, #22
 800c182:	d4ef      	bmi.n	800c164 <__smakebuf_r+0x18>
 800c184:	f023 0303 	bic.w	r3, r3, #3
 800c188:	f043 0302 	orr.w	r3, r3, #2
 800c18c:	81a3      	strh	r3, [r4, #12]
 800c18e:	e7e3      	b.n	800c158 <__smakebuf_r+0xc>
 800c190:	89a3      	ldrh	r3, [r4, #12]
 800c192:	6020      	str	r0, [r4, #0]
 800c194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c198:	81a3      	strh	r3, [r4, #12]
 800c19a:	9b00      	ldr	r3, [sp, #0]
 800c19c:	6163      	str	r3, [r4, #20]
 800c19e:	9b01      	ldr	r3, [sp, #4]
 800c1a0:	6120      	str	r0, [r4, #16]
 800c1a2:	b15b      	cbz	r3, 800c1bc <__smakebuf_r+0x70>
 800c1a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f000 f849 	bl	800c240 <_isatty_r>
 800c1ae:	b128      	cbz	r0, 800c1bc <__smakebuf_r+0x70>
 800c1b0:	89a3      	ldrh	r3, [r4, #12]
 800c1b2:	f023 0303 	bic.w	r3, r3, #3
 800c1b6:	f043 0301 	orr.w	r3, r3, #1
 800c1ba:	81a3      	strh	r3, [r4, #12]
 800c1bc:	89a3      	ldrh	r3, [r4, #12]
 800c1be:	431d      	orrs	r5, r3
 800c1c0:	81a5      	strh	r5, [r4, #12]
 800c1c2:	e7cf      	b.n	800c164 <__smakebuf_r+0x18>

0800c1c4 <memmove>:
 800c1c4:	4288      	cmp	r0, r1
 800c1c6:	b510      	push	{r4, lr}
 800c1c8:	eb01 0402 	add.w	r4, r1, r2
 800c1cc:	d902      	bls.n	800c1d4 <memmove+0x10>
 800c1ce:	4284      	cmp	r4, r0
 800c1d0:	4623      	mov	r3, r4
 800c1d2:	d807      	bhi.n	800c1e4 <memmove+0x20>
 800c1d4:	1e43      	subs	r3, r0, #1
 800c1d6:	42a1      	cmp	r1, r4
 800c1d8:	d008      	beq.n	800c1ec <memmove+0x28>
 800c1da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1e2:	e7f8      	b.n	800c1d6 <memmove+0x12>
 800c1e4:	4402      	add	r2, r0
 800c1e6:	4601      	mov	r1, r0
 800c1e8:	428a      	cmp	r2, r1
 800c1ea:	d100      	bne.n	800c1ee <memmove+0x2a>
 800c1ec:	bd10      	pop	{r4, pc}
 800c1ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1f6:	e7f7      	b.n	800c1e8 <memmove+0x24>

0800c1f8 <strncmp>:
 800c1f8:	b510      	push	{r4, lr}
 800c1fa:	b16a      	cbz	r2, 800c218 <strncmp+0x20>
 800c1fc:	3901      	subs	r1, #1
 800c1fe:	1884      	adds	r4, r0, r2
 800c200:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c204:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c208:	429a      	cmp	r2, r3
 800c20a:	d103      	bne.n	800c214 <strncmp+0x1c>
 800c20c:	42a0      	cmp	r0, r4
 800c20e:	d001      	beq.n	800c214 <strncmp+0x1c>
 800c210:	2a00      	cmp	r2, #0
 800c212:	d1f5      	bne.n	800c200 <strncmp+0x8>
 800c214:	1ad0      	subs	r0, r2, r3
 800c216:	bd10      	pop	{r4, pc}
 800c218:	4610      	mov	r0, r2
 800c21a:	e7fc      	b.n	800c216 <strncmp+0x1e>

0800c21c <_fstat_r>:
 800c21c:	b538      	push	{r3, r4, r5, lr}
 800c21e:	4d07      	ldr	r5, [pc, #28]	; (800c23c <_fstat_r+0x20>)
 800c220:	2300      	movs	r3, #0
 800c222:	4604      	mov	r4, r0
 800c224:	4608      	mov	r0, r1
 800c226:	4611      	mov	r1, r2
 800c228:	602b      	str	r3, [r5, #0]
 800c22a:	f7f5 fd1e 	bl	8001c6a <_fstat>
 800c22e:	1c43      	adds	r3, r0, #1
 800c230:	d102      	bne.n	800c238 <_fstat_r+0x1c>
 800c232:	682b      	ldr	r3, [r5, #0]
 800c234:	b103      	cbz	r3, 800c238 <_fstat_r+0x1c>
 800c236:	6023      	str	r3, [r4, #0]
 800c238:	bd38      	pop	{r3, r4, r5, pc}
 800c23a:	bf00      	nop
 800c23c:	20000594 	.word	0x20000594

0800c240 <_isatty_r>:
 800c240:	b538      	push	{r3, r4, r5, lr}
 800c242:	4d06      	ldr	r5, [pc, #24]	; (800c25c <_isatty_r+0x1c>)
 800c244:	2300      	movs	r3, #0
 800c246:	4604      	mov	r4, r0
 800c248:	4608      	mov	r0, r1
 800c24a:	602b      	str	r3, [r5, #0]
 800c24c:	f7f5 fd1d 	bl	8001c8a <_isatty>
 800c250:	1c43      	adds	r3, r0, #1
 800c252:	d102      	bne.n	800c25a <_isatty_r+0x1a>
 800c254:	682b      	ldr	r3, [r5, #0]
 800c256:	b103      	cbz	r3, 800c25a <_isatty_r+0x1a>
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	bd38      	pop	{r3, r4, r5, pc}
 800c25c:	20000594 	.word	0x20000594

0800c260 <_sbrk_r>:
 800c260:	b538      	push	{r3, r4, r5, lr}
 800c262:	4d06      	ldr	r5, [pc, #24]	; (800c27c <_sbrk_r+0x1c>)
 800c264:	2300      	movs	r3, #0
 800c266:	4604      	mov	r4, r0
 800c268:	4608      	mov	r0, r1
 800c26a:	602b      	str	r3, [r5, #0]
 800c26c:	f7f5 fd26 	bl	8001cbc <_sbrk>
 800c270:	1c43      	adds	r3, r0, #1
 800c272:	d102      	bne.n	800c27a <_sbrk_r+0x1a>
 800c274:	682b      	ldr	r3, [r5, #0]
 800c276:	b103      	cbz	r3, 800c27a <_sbrk_r+0x1a>
 800c278:	6023      	str	r3, [r4, #0]
 800c27a:	bd38      	pop	{r3, r4, r5, pc}
 800c27c:	20000594 	.word	0x20000594

0800c280 <memcpy>:
 800c280:	440a      	add	r2, r1
 800c282:	4291      	cmp	r1, r2
 800c284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c288:	d100      	bne.n	800c28c <memcpy+0xc>
 800c28a:	4770      	bx	lr
 800c28c:	b510      	push	{r4, lr}
 800c28e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c292:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c296:	4291      	cmp	r1, r2
 800c298:	d1f9      	bne.n	800c28e <memcpy+0xe>
 800c29a:	bd10      	pop	{r4, pc}
 800c29c:	0000      	movs	r0, r0
	...

0800c2a0 <nan>:
 800c2a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c2a8 <nan+0x8>
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop
 800c2a8:	00000000 	.word	0x00000000
 800c2ac:	7ff80000 	.word	0x7ff80000

0800c2b0 <__assert_func>:
 800c2b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2b2:	4614      	mov	r4, r2
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	4b09      	ldr	r3, [pc, #36]	; (800c2dc <__assert_func+0x2c>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4605      	mov	r5, r0
 800c2bc:	68d8      	ldr	r0, [r3, #12]
 800c2be:	b14c      	cbz	r4, 800c2d4 <__assert_func+0x24>
 800c2c0:	4b07      	ldr	r3, [pc, #28]	; (800c2e0 <__assert_func+0x30>)
 800c2c2:	9100      	str	r1, [sp, #0]
 800c2c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2c8:	4906      	ldr	r1, [pc, #24]	; (800c2e4 <__assert_func+0x34>)
 800c2ca:	462b      	mov	r3, r5
 800c2cc:	f000 fbca 	bl	800ca64 <fiprintf>
 800c2d0:	f000 fbda 	bl	800ca88 <abort>
 800c2d4:	4b04      	ldr	r3, [pc, #16]	; (800c2e8 <__assert_func+0x38>)
 800c2d6:	461c      	mov	r4, r3
 800c2d8:	e7f3      	b.n	800c2c2 <__assert_func+0x12>
 800c2da:	bf00      	nop
 800c2dc:	2000008c 	.word	0x2000008c
 800c2e0:	0800d4da 	.word	0x0800d4da
 800c2e4:	0800d4e7 	.word	0x0800d4e7
 800c2e8:	0800d515 	.word	0x0800d515

0800c2ec <_calloc_r>:
 800c2ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2ee:	fba1 2402 	umull	r2, r4, r1, r2
 800c2f2:	b94c      	cbnz	r4, 800c308 <_calloc_r+0x1c>
 800c2f4:	4611      	mov	r1, r2
 800c2f6:	9201      	str	r2, [sp, #4]
 800c2f8:	f7fd ffe8 	bl	800a2cc <_malloc_r>
 800c2fc:	9a01      	ldr	r2, [sp, #4]
 800c2fe:	4605      	mov	r5, r0
 800c300:	b930      	cbnz	r0, 800c310 <_calloc_r+0x24>
 800c302:	4628      	mov	r0, r5
 800c304:	b003      	add	sp, #12
 800c306:	bd30      	pop	{r4, r5, pc}
 800c308:	220c      	movs	r2, #12
 800c30a:	6002      	str	r2, [r0, #0]
 800c30c:	2500      	movs	r5, #0
 800c30e:	e7f8      	b.n	800c302 <_calloc_r+0x16>
 800c310:	4621      	mov	r1, r4
 800c312:	f7fd f867 	bl	80093e4 <memset>
 800c316:	e7f4      	b.n	800c302 <_calloc_r+0x16>

0800c318 <rshift>:
 800c318:	6903      	ldr	r3, [r0, #16]
 800c31a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c31e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c322:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c326:	f100 0414 	add.w	r4, r0, #20
 800c32a:	dd45      	ble.n	800c3b8 <rshift+0xa0>
 800c32c:	f011 011f 	ands.w	r1, r1, #31
 800c330:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c334:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c338:	d10c      	bne.n	800c354 <rshift+0x3c>
 800c33a:	f100 0710 	add.w	r7, r0, #16
 800c33e:	4629      	mov	r1, r5
 800c340:	42b1      	cmp	r1, r6
 800c342:	d334      	bcc.n	800c3ae <rshift+0x96>
 800c344:	1a9b      	subs	r3, r3, r2
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	1eea      	subs	r2, r5, #3
 800c34a:	4296      	cmp	r6, r2
 800c34c:	bf38      	it	cc
 800c34e:	2300      	movcc	r3, #0
 800c350:	4423      	add	r3, r4
 800c352:	e015      	b.n	800c380 <rshift+0x68>
 800c354:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c358:	f1c1 0820 	rsb	r8, r1, #32
 800c35c:	40cf      	lsrs	r7, r1
 800c35e:	f105 0e04 	add.w	lr, r5, #4
 800c362:	46a1      	mov	r9, r4
 800c364:	4576      	cmp	r6, lr
 800c366:	46f4      	mov	ip, lr
 800c368:	d815      	bhi.n	800c396 <rshift+0x7e>
 800c36a:	1a9a      	subs	r2, r3, r2
 800c36c:	0092      	lsls	r2, r2, #2
 800c36e:	3a04      	subs	r2, #4
 800c370:	3501      	adds	r5, #1
 800c372:	42ae      	cmp	r6, r5
 800c374:	bf38      	it	cc
 800c376:	2200      	movcc	r2, #0
 800c378:	18a3      	adds	r3, r4, r2
 800c37a:	50a7      	str	r7, [r4, r2]
 800c37c:	b107      	cbz	r7, 800c380 <rshift+0x68>
 800c37e:	3304      	adds	r3, #4
 800c380:	1b1a      	subs	r2, r3, r4
 800c382:	42a3      	cmp	r3, r4
 800c384:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c388:	bf08      	it	eq
 800c38a:	2300      	moveq	r3, #0
 800c38c:	6102      	str	r2, [r0, #16]
 800c38e:	bf08      	it	eq
 800c390:	6143      	streq	r3, [r0, #20]
 800c392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c396:	f8dc c000 	ldr.w	ip, [ip]
 800c39a:	fa0c fc08 	lsl.w	ip, ip, r8
 800c39e:	ea4c 0707 	orr.w	r7, ip, r7
 800c3a2:	f849 7b04 	str.w	r7, [r9], #4
 800c3a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c3aa:	40cf      	lsrs	r7, r1
 800c3ac:	e7da      	b.n	800c364 <rshift+0x4c>
 800c3ae:	f851 cb04 	ldr.w	ip, [r1], #4
 800c3b2:	f847 cf04 	str.w	ip, [r7, #4]!
 800c3b6:	e7c3      	b.n	800c340 <rshift+0x28>
 800c3b8:	4623      	mov	r3, r4
 800c3ba:	e7e1      	b.n	800c380 <rshift+0x68>

0800c3bc <__hexdig_fun>:
 800c3bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c3c0:	2b09      	cmp	r3, #9
 800c3c2:	d802      	bhi.n	800c3ca <__hexdig_fun+0xe>
 800c3c4:	3820      	subs	r0, #32
 800c3c6:	b2c0      	uxtb	r0, r0
 800c3c8:	4770      	bx	lr
 800c3ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c3ce:	2b05      	cmp	r3, #5
 800c3d0:	d801      	bhi.n	800c3d6 <__hexdig_fun+0x1a>
 800c3d2:	3847      	subs	r0, #71	; 0x47
 800c3d4:	e7f7      	b.n	800c3c6 <__hexdig_fun+0xa>
 800c3d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c3da:	2b05      	cmp	r3, #5
 800c3dc:	d801      	bhi.n	800c3e2 <__hexdig_fun+0x26>
 800c3de:	3827      	subs	r0, #39	; 0x27
 800c3e0:	e7f1      	b.n	800c3c6 <__hexdig_fun+0xa>
 800c3e2:	2000      	movs	r0, #0
 800c3e4:	4770      	bx	lr
	...

0800c3e8 <__gethex>:
 800c3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ec:	4617      	mov	r7, r2
 800c3ee:	680a      	ldr	r2, [r1, #0]
 800c3f0:	b085      	sub	sp, #20
 800c3f2:	f102 0b02 	add.w	fp, r2, #2
 800c3f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c3fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c3fe:	4681      	mov	r9, r0
 800c400:	468a      	mov	sl, r1
 800c402:	9302      	str	r3, [sp, #8]
 800c404:	32fe      	adds	r2, #254	; 0xfe
 800c406:	eb02 030b 	add.w	r3, r2, fp
 800c40a:	46d8      	mov	r8, fp
 800c40c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c410:	9301      	str	r3, [sp, #4]
 800c412:	2830      	cmp	r0, #48	; 0x30
 800c414:	d0f7      	beq.n	800c406 <__gethex+0x1e>
 800c416:	f7ff ffd1 	bl	800c3bc <__hexdig_fun>
 800c41a:	4604      	mov	r4, r0
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d138      	bne.n	800c492 <__gethex+0xaa>
 800c420:	49a7      	ldr	r1, [pc, #668]	; (800c6c0 <__gethex+0x2d8>)
 800c422:	2201      	movs	r2, #1
 800c424:	4640      	mov	r0, r8
 800c426:	f7ff fee7 	bl	800c1f8 <strncmp>
 800c42a:	4606      	mov	r6, r0
 800c42c:	2800      	cmp	r0, #0
 800c42e:	d169      	bne.n	800c504 <__gethex+0x11c>
 800c430:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c434:	465d      	mov	r5, fp
 800c436:	f7ff ffc1 	bl	800c3bc <__hexdig_fun>
 800c43a:	2800      	cmp	r0, #0
 800c43c:	d064      	beq.n	800c508 <__gethex+0x120>
 800c43e:	465a      	mov	r2, fp
 800c440:	7810      	ldrb	r0, [r2, #0]
 800c442:	2830      	cmp	r0, #48	; 0x30
 800c444:	4690      	mov	r8, r2
 800c446:	f102 0201 	add.w	r2, r2, #1
 800c44a:	d0f9      	beq.n	800c440 <__gethex+0x58>
 800c44c:	f7ff ffb6 	bl	800c3bc <__hexdig_fun>
 800c450:	2301      	movs	r3, #1
 800c452:	fab0 f480 	clz	r4, r0
 800c456:	0964      	lsrs	r4, r4, #5
 800c458:	465e      	mov	r6, fp
 800c45a:	9301      	str	r3, [sp, #4]
 800c45c:	4642      	mov	r2, r8
 800c45e:	4615      	mov	r5, r2
 800c460:	3201      	adds	r2, #1
 800c462:	7828      	ldrb	r0, [r5, #0]
 800c464:	f7ff ffaa 	bl	800c3bc <__hexdig_fun>
 800c468:	2800      	cmp	r0, #0
 800c46a:	d1f8      	bne.n	800c45e <__gethex+0x76>
 800c46c:	4994      	ldr	r1, [pc, #592]	; (800c6c0 <__gethex+0x2d8>)
 800c46e:	2201      	movs	r2, #1
 800c470:	4628      	mov	r0, r5
 800c472:	f7ff fec1 	bl	800c1f8 <strncmp>
 800c476:	b978      	cbnz	r0, 800c498 <__gethex+0xb0>
 800c478:	b946      	cbnz	r6, 800c48c <__gethex+0xa4>
 800c47a:	1c6e      	adds	r6, r5, #1
 800c47c:	4632      	mov	r2, r6
 800c47e:	4615      	mov	r5, r2
 800c480:	3201      	adds	r2, #1
 800c482:	7828      	ldrb	r0, [r5, #0]
 800c484:	f7ff ff9a 	bl	800c3bc <__hexdig_fun>
 800c488:	2800      	cmp	r0, #0
 800c48a:	d1f8      	bne.n	800c47e <__gethex+0x96>
 800c48c:	1b73      	subs	r3, r6, r5
 800c48e:	009e      	lsls	r6, r3, #2
 800c490:	e004      	b.n	800c49c <__gethex+0xb4>
 800c492:	2400      	movs	r4, #0
 800c494:	4626      	mov	r6, r4
 800c496:	e7e1      	b.n	800c45c <__gethex+0x74>
 800c498:	2e00      	cmp	r6, #0
 800c49a:	d1f7      	bne.n	800c48c <__gethex+0xa4>
 800c49c:	782b      	ldrb	r3, [r5, #0]
 800c49e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c4a2:	2b50      	cmp	r3, #80	; 0x50
 800c4a4:	d13d      	bne.n	800c522 <__gethex+0x13a>
 800c4a6:	786b      	ldrb	r3, [r5, #1]
 800c4a8:	2b2b      	cmp	r3, #43	; 0x2b
 800c4aa:	d02f      	beq.n	800c50c <__gethex+0x124>
 800c4ac:	2b2d      	cmp	r3, #45	; 0x2d
 800c4ae:	d031      	beq.n	800c514 <__gethex+0x12c>
 800c4b0:	1c69      	adds	r1, r5, #1
 800c4b2:	f04f 0b00 	mov.w	fp, #0
 800c4b6:	7808      	ldrb	r0, [r1, #0]
 800c4b8:	f7ff ff80 	bl	800c3bc <__hexdig_fun>
 800c4bc:	1e42      	subs	r2, r0, #1
 800c4be:	b2d2      	uxtb	r2, r2
 800c4c0:	2a18      	cmp	r2, #24
 800c4c2:	d82e      	bhi.n	800c522 <__gethex+0x13a>
 800c4c4:	f1a0 0210 	sub.w	r2, r0, #16
 800c4c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c4cc:	f7ff ff76 	bl	800c3bc <__hexdig_fun>
 800c4d0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800c4d4:	fa5f fc8c 	uxtb.w	ip, ip
 800c4d8:	f1bc 0f18 	cmp.w	ip, #24
 800c4dc:	d91d      	bls.n	800c51a <__gethex+0x132>
 800c4de:	f1bb 0f00 	cmp.w	fp, #0
 800c4e2:	d000      	beq.n	800c4e6 <__gethex+0xfe>
 800c4e4:	4252      	negs	r2, r2
 800c4e6:	4416      	add	r6, r2
 800c4e8:	f8ca 1000 	str.w	r1, [sl]
 800c4ec:	b1dc      	cbz	r4, 800c526 <__gethex+0x13e>
 800c4ee:	9b01      	ldr	r3, [sp, #4]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	bf14      	ite	ne
 800c4f4:	f04f 0800 	movne.w	r8, #0
 800c4f8:	f04f 0806 	moveq.w	r8, #6
 800c4fc:	4640      	mov	r0, r8
 800c4fe:	b005      	add	sp, #20
 800c500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c504:	4645      	mov	r5, r8
 800c506:	4626      	mov	r6, r4
 800c508:	2401      	movs	r4, #1
 800c50a:	e7c7      	b.n	800c49c <__gethex+0xb4>
 800c50c:	f04f 0b00 	mov.w	fp, #0
 800c510:	1ca9      	adds	r1, r5, #2
 800c512:	e7d0      	b.n	800c4b6 <__gethex+0xce>
 800c514:	f04f 0b01 	mov.w	fp, #1
 800c518:	e7fa      	b.n	800c510 <__gethex+0x128>
 800c51a:	230a      	movs	r3, #10
 800c51c:	fb03 0002 	mla	r0, r3, r2, r0
 800c520:	e7d0      	b.n	800c4c4 <__gethex+0xdc>
 800c522:	4629      	mov	r1, r5
 800c524:	e7e0      	b.n	800c4e8 <__gethex+0x100>
 800c526:	eba5 0308 	sub.w	r3, r5, r8
 800c52a:	3b01      	subs	r3, #1
 800c52c:	4621      	mov	r1, r4
 800c52e:	2b07      	cmp	r3, #7
 800c530:	dc0a      	bgt.n	800c548 <__gethex+0x160>
 800c532:	4648      	mov	r0, r9
 800c534:	f7fd ff56 	bl	800a3e4 <_Balloc>
 800c538:	4604      	mov	r4, r0
 800c53a:	b940      	cbnz	r0, 800c54e <__gethex+0x166>
 800c53c:	4b61      	ldr	r3, [pc, #388]	; (800c6c4 <__gethex+0x2dc>)
 800c53e:	4602      	mov	r2, r0
 800c540:	21e4      	movs	r1, #228	; 0xe4
 800c542:	4861      	ldr	r0, [pc, #388]	; (800c6c8 <__gethex+0x2e0>)
 800c544:	f7ff feb4 	bl	800c2b0 <__assert_func>
 800c548:	3101      	adds	r1, #1
 800c54a:	105b      	asrs	r3, r3, #1
 800c54c:	e7ef      	b.n	800c52e <__gethex+0x146>
 800c54e:	f100 0a14 	add.w	sl, r0, #20
 800c552:	2300      	movs	r3, #0
 800c554:	495a      	ldr	r1, [pc, #360]	; (800c6c0 <__gethex+0x2d8>)
 800c556:	f8cd a004 	str.w	sl, [sp, #4]
 800c55a:	469b      	mov	fp, r3
 800c55c:	45a8      	cmp	r8, r5
 800c55e:	d342      	bcc.n	800c5e6 <__gethex+0x1fe>
 800c560:	9801      	ldr	r0, [sp, #4]
 800c562:	f840 bb04 	str.w	fp, [r0], #4
 800c566:	eba0 000a 	sub.w	r0, r0, sl
 800c56a:	1080      	asrs	r0, r0, #2
 800c56c:	6120      	str	r0, [r4, #16]
 800c56e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c572:	4658      	mov	r0, fp
 800c574:	f7fe f828 	bl	800a5c8 <__hi0bits>
 800c578:	683d      	ldr	r5, [r7, #0]
 800c57a:	eba8 0000 	sub.w	r0, r8, r0
 800c57e:	42a8      	cmp	r0, r5
 800c580:	dd59      	ble.n	800c636 <__gethex+0x24e>
 800c582:	eba0 0805 	sub.w	r8, r0, r5
 800c586:	4641      	mov	r1, r8
 800c588:	4620      	mov	r0, r4
 800c58a:	f7fe fbb7 	bl	800acfc <__any_on>
 800c58e:	4683      	mov	fp, r0
 800c590:	b1b8      	cbz	r0, 800c5c2 <__gethex+0x1da>
 800c592:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800c596:	1159      	asrs	r1, r3, #5
 800c598:	f003 021f 	and.w	r2, r3, #31
 800c59c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c5a0:	f04f 0b01 	mov.w	fp, #1
 800c5a4:	fa0b f202 	lsl.w	r2, fp, r2
 800c5a8:	420a      	tst	r2, r1
 800c5aa:	d00a      	beq.n	800c5c2 <__gethex+0x1da>
 800c5ac:	455b      	cmp	r3, fp
 800c5ae:	dd06      	ble.n	800c5be <__gethex+0x1d6>
 800c5b0:	f1a8 0102 	sub.w	r1, r8, #2
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	f7fe fba1 	bl	800acfc <__any_on>
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	d138      	bne.n	800c630 <__gethex+0x248>
 800c5be:	f04f 0b02 	mov.w	fp, #2
 800c5c2:	4641      	mov	r1, r8
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	f7ff fea7 	bl	800c318 <rshift>
 800c5ca:	4446      	add	r6, r8
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	42b3      	cmp	r3, r6
 800c5d0:	da41      	bge.n	800c656 <__gethex+0x26e>
 800c5d2:	4621      	mov	r1, r4
 800c5d4:	4648      	mov	r0, r9
 800c5d6:	f7fd ff45 	bl	800a464 <_Bfree>
 800c5da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c5dc:	2300      	movs	r3, #0
 800c5de:	6013      	str	r3, [r2, #0]
 800c5e0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c5e4:	e78a      	b.n	800c4fc <__gethex+0x114>
 800c5e6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c5ea:	2a2e      	cmp	r2, #46	; 0x2e
 800c5ec:	d014      	beq.n	800c618 <__gethex+0x230>
 800c5ee:	2b20      	cmp	r3, #32
 800c5f0:	d106      	bne.n	800c600 <__gethex+0x218>
 800c5f2:	9b01      	ldr	r3, [sp, #4]
 800c5f4:	f843 bb04 	str.w	fp, [r3], #4
 800c5f8:	f04f 0b00 	mov.w	fp, #0
 800c5fc:	9301      	str	r3, [sp, #4]
 800c5fe:	465b      	mov	r3, fp
 800c600:	7828      	ldrb	r0, [r5, #0]
 800c602:	9303      	str	r3, [sp, #12]
 800c604:	f7ff feda 	bl	800c3bc <__hexdig_fun>
 800c608:	9b03      	ldr	r3, [sp, #12]
 800c60a:	f000 000f 	and.w	r0, r0, #15
 800c60e:	4098      	lsls	r0, r3
 800c610:	ea4b 0b00 	orr.w	fp, fp, r0
 800c614:	3304      	adds	r3, #4
 800c616:	e7a1      	b.n	800c55c <__gethex+0x174>
 800c618:	45a8      	cmp	r8, r5
 800c61a:	d8e8      	bhi.n	800c5ee <__gethex+0x206>
 800c61c:	2201      	movs	r2, #1
 800c61e:	4628      	mov	r0, r5
 800c620:	9303      	str	r3, [sp, #12]
 800c622:	f7ff fde9 	bl	800c1f8 <strncmp>
 800c626:	4926      	ldr	r1, [pc, #152]	; (800c6c0 <__gethex+0x2d8>)
 800c628:	9b03      	ldr	r3, [sp, #12]
 800c62a:	2800      	cmp	r0, #0
 800c62c:	d1df      	bne.n	800c5ee <__gethex+0x206>
 800c62e:	e795      	b.n	800c55c <__gethex+0x174>
 800c630:	f04f 0b03 	mov.w	fp, #3
 800c634:	e7c5      	b.n	800c5c2 <__gethex+0x1da>
 800c636:	da0b      	bge.n	800c650 <__gethex+0x268>
 800c638:	eba5 0800 	sub.w	r8, r5, r0
 800c63c:	4621      	mov	r1, r4
 800c63e:	4642      	mov	r2, r8
 800c640:	4648      	mov	r0, r9
 800c642:	f7fe f929 	bl	800a898 <__lshift>
 800c646:	eba6 0608 	sub.w	r6, r6, r8
 800c64a:	4604      	mov	r4, r0
 800c64c:	f100 0a14 	add.w	sl, r0, #20
 800c650:	f04f 0b00 	mov.w	fp, #0
 800c654:	e7ba      	b.n	800c5cc <__gethex+0x1e4>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	42b3      	cmp	r3, r6
 800c65a:	dd73      	ble.n	800c744 <__gethex+0x35c>
 800c65c:	1b9e      	subs	r6, r3, r6
 800c65e:	42b5      	cmp	r5, r6
 800c660:	dc34      	bgt.n	800c6cc <__gethex+0x2e4>
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2b02      	cmp	r3, #2
 800c666:	d023      	beq.n	800c6b0 <__gethex+0x2c8>
 800c668:	2b03      	cmp	r3, #3
 800c66a:	d025      	beq.n	800c6b8 <__gethex+0x2d0>
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d115      	bne.n	800c69c <__gethex+0x2b4>
 800c670:	42b5      	cmp	r5, r6
 800c672:	d113      	bne.n	800c69c <__gethex+0x2b4>
 800c674:	2d01      	cmp	r5, #1
 800c676:	d10b      	bne.n	800c690 <__gethex+0x2a8>
 800c678:	9a02      	ldr	r2, [sp, #8]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6013      	str	r3, [r2, #0]
 800c67e:	2301      	movs	r3, #1
 800c680:	6123      	str	r3, [r4, #16]
 800c682:	f8ca 3000 	str.w	r3, [sl]
 800c686:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c688:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c68c:	601c      	str	r4, [r3, #0]
 800c68e:	e735      	b.n	800c4fc <__gethex+0x114>
 800c690:	1e69      	subs	r1, r5, #1
 800c692:	4620      	mov	r0, r4
 800c694:	f7fe fb32 	bl	800acfc <__any_on>
 800c698:	2800      	cmp	r0, #0
 800c69a:	d1ed      	bne.n	800c678 <__gethex+0x290>
 800c69c:	4621      	mov	r1, r4
 800c69e:	4648      	mov	r0, r9
 800c6a0:	f7fd fee0 	bl	800a464 <_Bfree>
 800c6a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	6013      	str	r3, [r2, #0]
 800c6aa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c6ae:	e725      	b.n	800c4fc <__gethex+0x114>
 800c6b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d1f2      	bne.n	800c69c <__gethex+0x2b4>
 800c6b6:	e7df      	b.n	800c678 <__gethex+0x290>
 800c6b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d1dc      	bne.n	800c678 <__gethex+0x290>
 800c6be:	e7ed      	b.n	800c69c <__gethex+0x2b4>
 800c6c0:	0800d36c 	.word	0x0800d36c
 800c6c4:	0800d203 	.word	0x0800d203
 800c6c8:	0800d516 	.word	0x0800d516
 800c6cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800c6d0:	f1bb 0f00 	cmp.w	fp, #0
 800c6d4:	d133      	bne.n	800c73e <__gethex+0x356>
 800c6d6:	f1b8 0f00 	cmp.w	r8, #0
 800c6da:	d004      	beq.n	800c6e6 <__gethex+0x2fe>
 800c6dc:	4641      	mov	r1, r8
 800c6de:	4620      	mov	r0, r4
 800c6e0:	f7fe fb0c 	bl	800acfc <__any_on>
 800c6e4:	4683      	mov	fp, r0
 800c6e6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c6f0:	f008 081f 	and.w	r8, r8, #31
 800c6f4:	fa03 f308 	lsl.w	r3, r3, r8
 800c6f8:	4213      	tst	r3, r2
 800c6fa:	4631      	mov	r1, r6
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	bf18      	it	ne
 800c700:	f04b 0b02 	orrne.w	fp, fp, #2
 800c704:	1bad      	subs	r5, r5, r6
 800c706:	f7ff fe07 	bl	800c318 <rshift>
 800c70a:	687e      	ldr	r6, [r7, #4]
 800c70c:	f04f 0802 	mov.w	r8, #2
 800c710:	f1bb 0f00 	cmp.w	fp, #0
 800c714:	d04a      	beq.n	800c7ac <__gethex+0x3c4>
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d016      	beq.n	800c74a <__gethex+0x362>
 800c71c:	2b03      	cmp	r3, #3
 800c71e:	d018      	beq.n	800c752 <__gethex+0x36a>
 800c720:	2b01      	cmp	r3, #1
 800c722:	d109      	bne.n	800c738 <__gethex+0x350>
 800c724:	f01b 0f02 	tst.w	fp, #2
 800c728:	d006      	beq.n	800c738 <__gethex+0x350>
 800c72a:	f8da 3000 	ldr.w	r3, [sl]
 800c72e:	ea4b 0b03 	orr.w	fp, fp, r3
 800c732:	f01b 0f01 	tst.w	fp, #1
 800c736:	d10f      	bne.n	800c758 <__gethex+0x370>
 800c738:	f048 0810 	orr.w	r8, r8, #16
 800c73c:	e036      	b.n	800c7ac <__gethex+0x3c4>
 800c73e:	f04f 0b01 	mov.w	fp, #1
 800c742:	e7d0      	b.n	800c6e6 <__gethex+0x2fe>
 800c744:	f04f 0801 	mov.w	r8, #1
 800c748:	e7e2      	b.n	800c710 <__gethex+0x328>
 800c74a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c74c:	f1c3 0301 	rsb	r3, r3, #1
 800c750:	930f      	str	r3, [sp, #60]	; 0x3c
 800c752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c754:	2b00      	cmp	r3, #0
 800c756:	d0ef      	beq.n	800c738 <__gethex+0x350>
 800c758:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c75c:	f104 0214 	add.w	r2, r4, #20
 800c760:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c764:	9301      	str	r3, [sp, #4]
 800c766:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c76a:	2300      	movs	r3, #0
 800c76c:	4694      	mov	ip, r2
 800c76e:	f852 1b04 	ldr.w	r1, [r2], #4
 800c772:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800c776:	d01e      	beq.n	800c7b6 <__gethex+0x3ce>
 800c778:	3101      	adds	r1, #1
 800c77a:	f8cc 1000 	str.w	r1, [ip]
 800c77e:	f1b8 0f02 	cmp.w	r8, #2
 800c782:	f104 0214 	add.w	r2, r4, #20
 800c786:	d13d      	bne.n	800c804 <__gethex+0x41c>
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	3b01      	subs	r3, #1
 800c78c:	42ab      	cmp	r3, r5
 800c78e:	d10b      	bne.n	800c7a8 <__gethex+0x3c0>
 800c790:	1169      	asrs	r1, r5, #5
 800c792:	2301      	movs	r3, #1
 800c794:	f005 051f 	and.w	r5, r5, #31
 800c798:	fa03 f505 	lsl.w	r5, r3, r5
 800c79c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7a0:	421d      	tst	r5, r3
 800c7a2:	bf18      	it	ne
 800c7a4:	f04f 0801 	movne.w	r8, #1
 800c7a8:	f048 0820 	orr.w	r8, r8, #32
 800c7ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7ae:	601c      	str	r4, [r3, #0]
 800c7b0:	9b02      	ldr	r3, [sp, #8]
 800c7b2:	601e      	str	r6, [r3, #0]
 800c7b4:	e6a2      	b.n	800c4fc <__gethex+0x114>
 800c7b6:	4290      	cmp	r0, r2
 800c7b8:	f842 3c04 	str.w	r3, [r2, #-4]
 800c7bc:	d8d6      	bhi.n	800c76c <__gethex+0x384>
 800c7be:	68a2      	ldr	r2, [r4, #8]
 800c7c0:	4593      	cmp	fp, r2
 800c7c2:	db17      	blt.n	800c7f4 <__gethex+0x40c>
 800c7c4:	6861      	ldr	r1, [r4, #4]
 800c7c6:	4648      	mov	r0, r9
 800c7c8:	3101      	adds	r1, #1
 800c7ca:	f7fd fe0b 	bl	800a3e4 <_Balloc>
 800c7ce:	4682      	mov	sl, r0
 800c7d0:	b918      	cbnz	r0, 800c7da <__gethex+0x3f2>
 800c7d2:	4b1b      	ldr	r3, [pc, #108]	; (800c840 <__gethex+0x458>)
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	2184      	movs	r1, #132	; 0x84
 800c7d8:	e6b3      	b.n	800c542 <__gethex+0x15a>
 800c7da:	6922      	ldr	r2, [r4, #16]
 800c7dc:	3202      	adds	r2, #2
 800c7de:	f104 010c 	add.w	r1, r4, #12
 800c7e2:	0092      	lsls	r2, r2, #2
 800c7e4:	300c      	adds	r0, #12
 800c7e6:	f7ff fd4b 	bl	800c280 <memcpy>
 800c7ea:	4621      	mov	r1, r4
 800c7ec:	4648      	mov	r0, r9
 800c7ee:	f7fd fe39 	bl	800a464 <_Bfree>
 800c7f2:	4654      	mov	r4, sl
 800c7f4:	6922      	ldr	r2, [r4, #16]
 800c7f6:	1c51      	adds	r1, r2, #1
 800c7f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c7fc:	6121      	str	r1, [r4, #16]
 800c7fe:	2101      	movs	r1, #1
 800c800:	6151      	str	r1, [r2, #20]
 800c802:	e7bc      	b.n	800c77e <__gethex+0x396>
 800c804:	6921      	ldr	r1, [r4, #16]
 800c806:	4559      	cmp	r1, fp
 800c808:	dd0b      	ble.n	800c822 <__gethex+0x43a>
 800c80a:	2101      	movs	r1, #1
 800c80c:	4620      	mov	r0, r4
 800c80e:	f7ff fd83 	bl	800c318 <rshift>
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	3601      	adds	r6, #1
 800c816:	42b3      	cmp	r3, r6
 800c818:	f6ff aedb 	blt.w	800c5d2 <__gethex+0x1ea>
 800c81c:	f04f 0801 	mov.w	r8, #1
 800c820:	e7c2      	b.n	800c7a8 <__gethex+0x3c0>
 800c822:	f015 051f 	ands.w	r5, r5, #31
 800c826:	d0f9      	beq.n	800c81c <__gethex+0x434>
 800c828:	9b01      	ldr	r3, [sp, #4]
 800c82a:	441a      	add	r2, r3
 800c82c:	f1c5 0520 	rsb	r5, r5, #32
 800c830:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c834:	f7fd fec8 	bl	800a5c8 <__hi0bits>
 800c838:	42a8      	cmp	r0, r5
 800c83a:	dbe6      	blt.n	800c80a <__gethex+0x422>
 800c83c:	e7ee      	b.n	800c81c <__gethex+0x434>
 800c83e:	bf00      	nop
 800c840:	0800d203 	.word	0x0800d203

0800c844 <L_shift>:
 800c844:	f1c2 0208 	rsb	r2, r2, #8
 800c848:	0092      	lsls	r2, r2, #2
 800c84a:	b570      	push	{r4, r5, r6, lr}
 800c84c:	f1c2 0620 	rsb	r6, r2, #32
 800c850:	6843      	ldr	r3, [r0, #4]
 800c852:	6804      	ldr	r4, [r0, #0]
 800c854:	fa03 f506 	lsl.w	r5, r3, r6
 800c858:	432c      	orrs	r4, r5
 800c85a:	40d3      	lsrs	r3, r2
 800c85c:	6004      	str	r4, [r0, #0]
 800c85e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c862:	4288      	cmp	r0, r1
 800c864:	d3f4      	bcc.n	800c850 <L_shift+0xc>
 800c866:	bd70      	pop	{r4, r5, r6, pc}

0800c868 <__match>:
 800c868:	b530      	push	{r4, r5, lr}
 800c86a:	6803      	ldr	r3, [r0, #0]
 800c86c:	3301      	adds	r3, #1
 800c86e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c872:	b914      	cbnz	r4, 800c87a <__match+0x12>
 800c874:	6003      	str	r3, [r0, #0]
 800c876:	2001      	movs	r0, #1
 800c878:	bd30      	pop	{r4, r5, pc}
 800c87a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c87e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c882:	2d19      	cmp	r5, #25
 800c884:	bf98      	it	ls
 800c886:	3220      	addls	r2, #32
 800c888:	42a2      	cmp	r2, r4
 800c88a:	d0f0      	beq.n	800c86e <__match+0x6>
 800c88c:	2000      	movs	r0, #0
 800c88e:	e7f3      	b.n	800c878 <__match+0x10>

0800c890 <__hexnan>:
 800c890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c894:	680b      	ldr	r3, [r1, #0]
 800c896:	6801      	ldr	r1, [r0, #0]
 800c898:	115e      	asrs	r6, r3, #5
 800c89a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c89e:	f013 031f 	ands.w	r3, r3, #31
 800c8a2:	b087      	sub	sp, #28
 800c8a4:	bf18      	it	ne
 800c8a6:	3604      	addne	r6, #4
 800c8a8:	2500      	movs	r5, #0
 800c8aa:	1f37      	subs	r7, r6, #4
 800c8ac:	4682      	mov	sl, r0
 800c8ae:	4690      	mov	r8, r2
 800c8b0:	9301      	str	r3, [sp, #4]
 800c8b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c8b6:	46b9      	mov	r9, r7
 800c8b8:	463c      	mov	r4, r7
 800c8ba:	9502      	str	r5, [sp, #8]
 800c8bc:	46ab      	mov	fp, r5
 800c8be:	784a      	ldrb	r2, [r1, #1]
 800c8c0:	1c4b      	adds	r3, r1, #1
 800c8c2:	9303      	str	r3, [sp, #12]
 800c8c4:	b342      	cbz	r2, 800c918 <__hexnan+0x88>
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	9105      	str	r1, [sp, #20]
 800c8ca:	9204      	str	r2, [sp, #16]
 800c8cc:	f7ff fd76 	bl	800c3bc <__hexdig_fun>
 800c8d0:	2800      	cmp	r0, #0
 800c8d2:	d14f      	bne.n	800c974 <__hexnan+0xe4>
 800c8d4:	9a04      	ldr	r2, [sp, #16]
 800c8d6:	9905      	ldr	r1, [sp, #20]
 800c8d8:	2a20      	cmp	r2, #32
 800c8da:	d818      	bhi.n	800c90e <__hexnan+0x7e>
 800c8dc:	9b02      	ldr	r3, [sp, #8]
 800c8de:	459b      	cmp	fp, r3
 800c8e0:	dd13      	ble.n	800c90a <__hexnan+0x7a>
 800c8e2:	454c      	cmp	r4, r9
 800c8e4:	d206      	bcs.n	800c8f4 <__hexnan+0x64>
 800c8e6:	2d07      	cmp	r5, #7
 800c8e8:	dc04      	bgt.n	800c8f4 <__hexnan+0x64>
 800c8ea:	462a      	mov	r2, r5
 800c8ec:	4649      	mov	r1, r9
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	f7ff ffa8 	bl	800c844 <L_shift>
 800c8f4:	4544      	cmp	r4, r8
 800c8f6:	d950      	bls.n	800c99a <__hexnan+0x10a>
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	f1a4 0904 	sub.w	r9, r4, #4
 800c8fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800c902:	f8cd b008 	str.w	fp, [sp, #8]
 800c906:	464c      	mov	r4, r9
 800c908:	461d      	mov	r5, r3
 800c90a:	9903      	ldr	r1, [sp, #12]
 800c90c:	e7d7      	b.n	800c8be <__hexnan+0x2e>
 800c90e:	2a29      	cmp	r2, #41	; 0x29
 800c910:	d155      	bne.n	800c9be <__hexnan+0x12e>
 800c912:	3102      	adds	r1, #2
 800c914:	f8ca 1000 	str.w	r1, [sl]
 800c918:	f1bb 0f00 	cmp.w	fp, #0
 800c91c:	d04f      	beq.n	800c9be <__hexnan+0x12e>
 800c91e:	454c      	cmp	r4, r9
 800c920:	d206      	bcs.n	800c930 <__hexnan+0xa0>
 800c922:	2d07      	cmp	r5, #7
 800c924:	dc04      	bgt.n	800c930 <__hexnan+0xa0>
 800c926:	462a      	mov	r2, r5
 800c928:	4649      	mov	r1, r9
 800c92a:	4620      	mov	r0, r4
 800c92c:	f7ff ff8a 	bl	800c844 <L_shift>
 800c930:	4544      	cmp	r4, r8
 800c932:	d934      	bls.n	800c99e <__hexnan+0x10e>
 800c934:	f1a8 0204 	sub.w	r2, r8, #4
 800c938:	4623      	mov	r3, r4
 800c93a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c93e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c942:	429f      	cmp	r7, r3
 800c944:	d2f9      	bcs.n	800c93a <__hexnan+0xaa>
 800c946:	1b3b      	subs	r3, r7, r4
 800c948:	f023 0303 	bic.w	r3, r3, #3
 800c94c:	3304      	adds	r3, #4
 800c94e:	3e03      	subs	r6, #3
 800c950:	3401      	adds	r4, #1
 800c952:	42a6      	cmp	r6, r4
 800c954:	bf38      	it	cc
 800c956:	2304      	movcc	r3, #4
 800c958:	4443      	add	r3, r8
 800c95a:	2200      	movs	r2, #0
 800c95c:	f843 2b04 	str.w	r2, [r3], #4
 800c960:	429f      	cmp	r7, r3
 800c962:	d2fb      	bcs.n	800c95c <__hexnan+0xcc>
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	b91b      	cbnz	r3, 800c970 <__hexnan+0xe0>
 800c968:	4547      	cmp	r7, r8
 800c96a:	d126      	bne.n	800c9ba <__hexnan+0x12a>
 800c96c:	2301      	movs	r3, #1
 800c96e:	603b      	str	r3, [r7, #0]
 800c970:	2005      	movs	r0, #5
 800c972:	e025      	b.n	800c9c0 <__hexnan+0x130>
 800c974:	3501      	adds	r5, #1
 800c976:	2d08      	cmp	r5, #8
 800c978:	f10b 0b01 	add.w	fp, fp, #1
 800c97c:	dd06      	ble.n	800c98c <__hexnan+0xfc>
 800c97e:	4544      	cmp	r4, r8
 800c980:	d9c3      	bls.n	800c90a <__hexnan+0x7a>
 800c982:	2300      	movs	r3, #0
 800c984:	f844 3c04 	str.w	r3, [r4, #-4]
 800c988:	2501      	movs	r5, #1
 800c98a:	3c04      	subs	r4, #4
 800c98c:	6822      	ldr	r2, [r4, #0]
 800c98e:	f000 000f 	and.w	r0, r0, #15
 800c992:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c996:	6020      	str	r0, [r4, #0]
 800c998:	e7b7      	b.n	800c90a <__hexnan+0x7a>
 800c99a:	2508      	movs	r5, #8
 800c99c:	e7b5      	b.n	800c90a <__hexnan+0x7a>
 800c99e:	9b01      	ldr	r3, [sp, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d0df      	beq.n	800c964 <__hexnan+0xd4>
 800c9a4:	f1c3 0320 	rsb	r3, r3, #32
 800c9a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9ac:	40da      	lsrs	r2, r3
 800c9ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c9b2:	4013      	ands	r3, r2
 800c9b4:	f846 3c04 	str.w	r3, [r6, #-4]
 800c9b8:	e7d4      	b.n	800c964 <__hexnan+0xd4>
 800c9ba:	3f04      	subs	r7, #4
 800c9bc:	e7d2      	b.n	800c964 <__hexnan+0xd4>
 800c9be:	2004      	movs	r0, #4
 800c9c0:	b007      	add	sp, #28
 800c9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9c6 <__ascii_mbtowc>:
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	b901      	cbnz	r1, 800c9cc <__ascii_mbtowc+0x6>
 800c9ca:	a901      	add	r1, sp, #4
 800c9cc:	b142      	cbz	r2, 800c9e0 <__ascii_mbtowc+0x1a>
 800c9ce:	b14b      	cbz	r3, 800c9e4 <__ascii_mbtowc+0x1e>
 800c9d0:	7813      	ldrb	r3, [r2, #0]
 800c9d2:	600b      	str	r3, [r1, #0]
 800c9d4:	7812      	ldrb	r2, [r2, #0]
 800c9d6:	1e10      	subs	r0, r2, #0
 800c9d8:	bf18      	it	ne
 800c9da:	2001      	movne	r0, #1
 800c9dc:	b002      	add	sp, #8
 800c9de:	4770      	bx	lr
 800c9e0:	4610      	mov	r0, r2
 800c9e2:	e7fb      	b.n	800c9dc <__ascii_mbtowc+0x16>
 800c9e4:	f06f 0001 	mvn.w	r0, #1
 800c9e8:	e7f8      	b.n	800c9dc <__ascii_mbtowc+0x16>

0800c9ea <_realloc_r>:
 800c9ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ee:	4680      	mov	r8, r0
 800c9f0:	4614      	mov	r4, r2
 800c9f2:	460e      	mov	r6, r1
 800c9f4:	b921      	cbnz	r1, 800ca00 <_realloc_r+0x16>
 800c9f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9fa:	4611      	mov	r1, r2
 800c9fc:	f7fd bc66 	b.w	800a2cc <_malloc_r>
 800ca00:	b92a      	cbnz	r2, 800ca0e <_realloc_r+0x24>
 800ca02:	f7fd fbef 	bl	800a1e4 <_free_r>
 800ca06:	4625      	mov	r5, r4
 800ca08:	4628      	mov	r0, r5
 800ca0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca0e:	f000 f842 	bl	800ca96 <_malloc_usable_size_r>
 800ca12:	4284      	cmp	r4, r0
 800ca14:	4607      	mov	r7, r0
 800ca16:	d802      	bhi.n	800ca1e <_realloc_r+0x34>
 800ca18:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca1c:	d812      	bhi.n	800ca44 <_realloc_r+0x5a>
 800ca1e:	4621      	mov	r1, r4
 800ca20:	4640      	mov	r0, r8
 800ca22:	f7fd fc53 	bl	800a2cc <_malloc_r>
 800ca26:	4605      	mov	r5, r0
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	d0ed      	beq.n	800ca08 <_realloc_r+0x1e>
 800ca2c:	42bc      	cmp	r4, r7
 800ca2e:	4622      	mov	r2, r4
 800ca30:	4631      	mov	r1, r6
 800ca32:	bf28      	it	cs
 800ca34:	463a      	movcs	r2, r7
 800ca36:	f7ff fc23 	bl	800c280 <memcpy>
 800ca3a:	4631      	mov	r1, r6
 800ca3c:	4640      	mov	r0, r8
 800ca3e:	f7fd fbd1 	bl	800a1e4 <_free_r>
 800ca42:	e7e1      	b.n	800ca08 <_realloc_r+0x1e>
 800ca44:	4635      	mov	r5, r6
 800ca46:	e7df      	b.n	800ca08 <_realloc_r+0x1e>

0800ca48 <__ascii_wctomb>:
 800ca48:	b149      	cbz	r1, 800ca5e <__ascii_wctomb+0x16>
 800ca4a:	2aff      	cmp	r2, #255	; 0xff
 800ca4c:	bf85      	ittet	hi
 800ca4e:	238a      	movhi	r3, #138	; 0x8a
 800ca50:	6003      	strhi	r3, [r0, #0]
 800ca52:	700a      	strbls	r2, [r1, #0]
 800ca54:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ca58:	bf98      	it	ls
 800ca5a:	2001      	movls	r0, #1
 800ca5c:	4770      	bx	lr
 800ca5e:	4608      	mov	r0, r1
 800ca60:	4770      	bx	lr
	...

0800ca64 <fiprintf>:
 800ca64:	b40e      	push	{r1, r2, r3}
 800ca66:	b503      	push	{r0, r1, lr}
 800ca68:	4601      	mov	r1, r0
 800ca6a:	ab03      	add	r3, sp, #12
 800ca6c:	4805      	ldr	r0, [pc, #20]	; (800ca84 <fiprintf+0x20>)
 800ca6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca72:	6800      	ldr	r0, [r0, #0]
 800ca74:	9301      	str	r3, [sp, #4]
 800ca76:	f7ff f97b 	bl	800bd70 <_vfiprintf_r>
 800ca7a:	b002      	add	sp, #8
 800ca7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca80:	b003      	add	sp, #12
 800ca82:	4770      	bx	lr
 800ca84:	2000008c 	.word	0x2000008c

0800ca88 <abort>:
 800ca88:	b508      	push	{r3, lr}
 800ca8a:	2006      	movs	r0, #6
 800ca8c:	f000 f834 	bl	800caf8 <raise>
 800ca90:	2001      	movs	r0, #1
 800ca92:	f7f5 f89b 	bl	8001bcc <_exit>

0800ca96 <_malloc_usable_size_r>:
 800ca96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca9a:	1f18      	subs	r0, r3, #4
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	bfbc      	itt	lt
 800caa0:	580b      	ldrlt	r3, [r1, r0]
 800caa2:	18c0      	addlt	r0, r0, r3
 800caa4:	4770      	bx	lr

0800caa6 <_raise_r>:
 800caa6:	291f      	cmp	r1, #31
 800caa8:	b538      	push	{r3, r4, r5, lr}
 800caaa:	4604      	mov	r4, r0
 800caac:	460d      	mov	r5, r1
 800caae:	d904      	bls.n	800caba <_raise_r+0x14>
 800cab0:	2316      	movs	r3, #22
 800cab2:	6003      	str	r3, [r0, #0]
 800cab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cab8:	bd38      	pop	{r3, r4, r5, pc}
 800caba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cabc:	b112      	cbz	r2, 800cac4 <_raise_r+0x1e>
 800cabe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cac2:	b94b      	cbnz	r3, 800cad8 <_raise_r+0x32>
 800cac4:	4620      	mov	r0, r4
 800cac6:	f000 f831 	bl	800cb2c <_getpid_r>
 800caca:	462a      	mov	r2, r5
 800cacc:	4601      	mov	r1, r0
 800cace:	4620      	mov	r0, r4
 800cad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cad4:	f000 b818 	b.w	800cb08 <_kill_r>
 800cad8:	2b01      	cmp	r3, #1
 800cada:	d00a      	beq.n	800caf2 <_raise_r+0x4c>
 800cadc:	1c59      	adds	r1, r3, #1
 800cade:	d103      	bne.n	800cae8 <_raise_r+0x42>
 800cae0:	2316      	movs	r3, #22
 800cae2:	6003      	str	r3, [r0, #0]
 800cae4:	2001      	movs	r0, #1
 800cae6:	e7e7      	b.n	800cab8 <_raise_r+0x12>
 800cae8:	2400      	movs	r4, #0
 800caea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800caee:	4628      	mov	r0, r5
 800caf0:	4798      	blx	r3
 800caf2:	2000      	movs	r0, #0
 800caf4:	e7e0      	b.n	800cab8 <_raise_r+0x12>
	...

0800caf8 <raise>:
 800caf8:	4b02      	ldr	r3, [pc, #8]	; (800cb04 <raise+0xc>)
 800cafa:	4601      	mov	r1, r0
 800cafc:	6818      	ldr	r0, [r3, #0]
 800cafe:	f7ff bfd2 	b.w	800caa6 <_raise_r>
 800cb02:	bf00      	nop
 800cb04:	2000008c 	.word	0x2000008c

0800cb08 <_kill_r>:
 800cb08:	b538      	push	{r3, r4, r5, lr}
 800cb0a:	4d07      	ldr	r5, [pc, #28]	; (800cb28 <_kill_r+0x20>)
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	4604      	mov	r4, r0
 800cb10:	4608      	mov	r0, r1
 800cb12:	4611      	mov	r1, r2
 800cb14:	602b      	str	r3, [r5, #0]
 800cb16:	f7f5 f849 	bl	8001bac <_kill>
 800cb1a:	1c43      	adds	r3, r0, #1
 800cb1c:	d102      	bne.n	800cb24 <_kill_r+0x1c>
 800cb1e:	682b      	ldr	r3, [r5, #0]
 800cb20:	b103      	cbz	r3, 800cb24 <_kill_r+0x1c>
 800cb22:	6023      	str	r3, [r4, #0]
 800cb24:	bd38      	pop	{r3, r4, r5, pc}
 800cb26:	bf00      	nop
 800cb28:	20000594 	.word	0x20000594

0800cb2c <_getpid_r>:
 800cb2c:	f7f5 b836 	b.w	8001b9c <_getpid>

0800cb30 <_init>:
 800cb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb32:	bf00      	nop
 800cb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb36:	bc08      	pop	{r3}
 800cb38:	469e      	mov	lr, r3
 800cb3a:	4770      	bx	lr

0800cb3c <_fini>:
 800cb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb3e:	bf00      	nop
 800cb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb42:	bc08      	pop	{r3}
 800cb44:	469e      	mov	lr, r3
 800cb46:	4770      	bx	lr
